<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode</title>
    <link href="/2022/04/04/LeetCode/"/>
    <url>/2022/04/04/LeetCode/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><p>根据微信公众号<strong>代码随想录</strong>，学习所做笔记</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><img src="/2022/04/04/LeetCode/image-20220404222053445.png" alt="image-20220404222053445" style="zoom: 67%;"><p>数组是存放在<strong>连续的内存</strong>空间上，<strong>相同类型</strong>数据的集合</p><p>索引快，增删慢（直接通过索引下标获取数组中的元素）</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><img src="/2022/04/04/LeetCode/image-20220404222353536.png" alt="image-20220404222353536" style="zoom: 67%;"><p>数组中元素是<strong>有序</strong>的，并且<strong>没有重复元素</strong>（一旦有重复元素，二分查找的结果可能不唯一）</p><p>查找次数：最大查找次数是32次</p><ul><li>数组的长度是2^n，n就是查找的次数</li><li>lg数组长度&#x2F;lg2 得到的数就是查找的次数</li></ul><p>给定一个含有n个元素的有序（升序）数组并且没有重复元素，查找target是否存在数组中，若存在则返回数组的下标，若不存在则返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;  <span class="hljs-comment">//区间是左闭右闭[left, right]</span><br><br>    <span class="hljs-keyword">while</span> (right &gt;= left)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + (right-left)/<span class="hljs-number">2</span>; <span class="hljs-comment">//防止溢出</span><br>        <span class="hljs-keyword">if</span> (target &gt; nums[middle])&#123;  <span class="hljs-comment">//target在右区间 [middle+1, right]</span><br>            left = middle +<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &lt; nums[middle])&#123; <span class="hljs-comment">//target在左区间 [left, middle-1]</span><br>            right = middle -<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//查找到相应的值</span><br>            <span class="hljs-keyword">return</span> middle;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="搜索插入位置（二分查找）"><a href="#搜索插入位置（二分查找）" class="headerlink" title="搜索插入位置（二分查找）"></a>搜索插入位置（二分查找）</h3><p>给定一个排序的数组和一个目标值，在数组中找到目标值并返回索引，如果目标值不存在则返回目标值将会被按顺序插入的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 暴力解法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-comment">//分三种情况处理</span><br>    <span class="hljs-comment">//1. 目标值等于数组中的某一个元素</span><br>    <span class="hljs-comment">//2. 目标值在数组中所有元素之后</span><br>    <span class="hljs-comment">//3. 目标值插入数组中的位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (target &lt;= nums[i])&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums.length;<br>&#125;<br><br><span class="hljs-comment">//2. 二分法（默认数组没有重复元素）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert2</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> target)</span>&#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (right &gt;= left)&#123;  <span class="hljs-comment">// &gt;= 因为right=nums.length-1，right在数组中存在，所以有=</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + (right-left)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (target &gt; nums[middle])&#123;<br>            left = middle+<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &lt; nums[middle])&#123;<br>            right = middle-<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> middle;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span>; <span class="hljs-comment">//当数组中没有目标元素时，或者返回left</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>相关题目推荐</strong></p><ul><li>在排序数组中查找元素的第一个和最后一个位置（元素重复，二分查找左元素（右元素））</li><li>x 的平方根</li><li>有效的完全平方数</li></ul><h3 id="移除元素（双指针）"><a href="#移除元素（双指针）" class="headerlink" title="移除元素（双指针）"></a>移除元素（双指针）</h3><p>给你一个数组nums和一个值val，在原地移除所有数值等于val的元素，并返回移除后数组的长度</p><img src="/2022/04/04/LeetCode/04/04/LeetCode/20220405113239.gif" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//暴力解法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement1</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> val)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;  <span class="hljs-comment">//遍历数组中参与删除的元素</span><br>        <span class="hljs-keyword">if</span> (nums[i] == val)&#123;  <span class="hljs-comment">//当查询到val元素时，将val元素后的所有元素都向前移动一位</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; size; j++) &#123;   <span class="hljs-comment">//循环开始条件是j=i+1限制j&lt;size数组越界</span><br>                nums[j-<span class="hljs-number">1</span>] = nums[j];<br>            &#125;<br>            size--; <span class="hljs-comment">//将参与删除的元素减1</span><br>            i--; <span class="hljs-comment">//因为i后边的所有元素都向前移动一位，所有此时i所在的位置变成了i后的元素，该元素还没有进行比较，所以要i--</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/04/04/LeetCode/04/04/LeetCode/20220405145446.gif" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双指针法（快慢指针法）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement2</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> val)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">slowIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//慢指针</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">quickIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; quickIndex &lt; nums.length; quickIndex++) &#123; <span class="hljs-comment">//快指针</span><br>        <span class="hljs-keyword">if</span> (val != nums[quickIndex])&#123; <span class="hljs-comment">//当val和数组元素不相等时将快指针的值赋值给慢指针</span><br>            nums[slowIndex] = nums[quickIndex];<br>            slowIndex++; <span class="hljs-comment">//快指针的值赋值给慢指针时候，慢指针向后移动（前边的值元素已经比较完了）</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> slowIndex;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>相关题目推荐</strong></p><ul><li>删除排序数组中的重复项</li><li>移动零</li><li>比较含退格的字符串</li></ul><h3 id="有序数组的平方（双指针）"><a href="#有序数组的平方（双指针）" class="headerlink" title="有序数组的平方（双指针）"></a>有序数组的平方（双指针）</h3><p>将一个非递减顺序的数组nums，返回每个元素的平方组成新非递减顺序的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//暴力解法  时间复杂度为 O(nlogn)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sortedSquares1(<span class="hljs-type">int</span> nums[])&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        nums[i] *= nums[i]; <span class="hljs-comment">//将每个元素进行平方</span><br>    &#125;<br>    Arrays.sort(nums);  <span class="hljs-comment">//将数组进行排序</span><br><br>    <span class="hljs-keyword">return</span> nums;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/04/04/LeetCode/04/04/LeetCode/20220405154642.gif" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双指针法</span><br><span class="hljs-comment">//数组平方最大值在数组的两端，可以用两个指针分别指向数组的两端，通过对比两端的元素进行排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sortedSquares2(<span class="hljs-type">int</span> nums[])&#123;<br>    <span class="hljs-type">int</span> [] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length]; <span class="hljs-comment">//初始化临时数组</span><br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//定义左指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;  <span class="hljs-comment">//定义右指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> result.length-<span class="hljs-number">1</span>; <span class="hljs-comment">//计数，将元素从后向前插入</span><br><br>    <span class="hljs-keyword">while</span> (left &lt;= right)&#123;  <span class="hljs-comment">//比较两端的元素，将大的元素插入到result数组</span><br>        <span class="hljs-keyword">if</span> (nums[left]*nums[left] &lt; nums[right]*nums[right])&#123;<br>            result[target--] = nums[right]*nums[right];<br>            right--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result[target--] = nums[left]*nums[left];<br>            left++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="长度最小子数组（滑动窗口）"><a href="#长度最小子数组（滑动窗口）" class="headerlink" title="长度最小子数组（滑动窗口）"></a>长度最小子数组（滑动窗口）</h3><p>给定一个正整数数组nums和一个正整数val，找出满足元素和&gt;&#x3D;val的长度最小的 连续子数组，并返回其长度，若不存在返回0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//暴力解法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minSubArrayLen1</span><span class="hljs-params">(<span class="hljs-type">int</span> []nums, <span class="hljs-type">int</span> val)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> nums.length+<span class="hljs-number">1</span>; <span class="hljs-comment">//元素和大于等于val时的最小长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//用于元素叠加，和val进行比较</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">subNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//计数</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123; <span class="hljs-comment">//子数组的起始位置</span><br>        num = <span class="hljs-number">0</span>;<br>        subNum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &lt; nums.length; j++) &#123; <span class="hljs-comment">//子数组的结束位置</span><br>            num += nums[j];<br>            subNum++;<br>            <span class="hljs-keyword">if</span> (val &lt;= num)&#123;<br>                size = subNum &gt; size ? size : subNum; <span class="hljs-comment">//获取子数组的最小长度</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> size==nums.length+<span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : size;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/04/04/LeetCode/20220405172504.gif"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//滑动窗口（双指针法）</span><br><span class="hljs-comment">//窗口内就是满足大于等于val的子数组</span><br><span class="hljs-comment">//窗口的起始位置：如果窗口内的值大于等于val，窗口进行移动（缩小）</span><br><span class="hljs-comment">//窗口的结束位置：移动到窗口中的值满足满足大于等于val时，窗口结束位置不在移动（不在增大）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minSubArrayLen2</span><span class="hljs-params">(<span class="hljs-type">int</span> []nums, <span class="hljs-type">int</span> val)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//窗口起始位置</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//元素叠加，和val进行比较</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> nums.length+<span class="hljs-number">1</span>; <span class="hljs-comment">//最终子数组的长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">subNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//计数</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; nums.length; j++) &#123; <span class="hljs-comment">//窗口结束位置，当子数组元素和小于val，窗口一直增大</span><br>        num += nums[j];<br>        subNum++;<br>        <span class="hljs-keyword">while</span> (num &gt;= val)&#123; <span class="hljs-comment">//缩小窗口判断窗口内的值是否小于val</span><br>            size = size&gt;subNum ? subNum : size;<br>            subNum--;<br>            num -= nums[i++]; <span class="hljs-comment">//将起始位置前移，缩小窗口</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> size==nums.length+<span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : size;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>相关题目推荐</strong></p><ul><li>水果成篮</li><li>最小覆盖子串</li></ul><h3 id="螺旋矩阵II"><a href="#螺旋矩阵II" class="headerlink" title="螺旋矩阵II"></a>螺旋矩阵II</h3><p>给定一个正整数n，生成一个包含1到n^2所有的元素，且元素按顺时针顺序螺旋排列的正方形矩阵</p><p>共画四条边，每画一条边都坚持左闭右开（左开右闭）的原则（每条边的拐角处都交给新的一条边画）顺时针画矩</p><p>阵的过程：<br>        填充上方从左到右<br>        填充右方从上到下<br>        填充下方从右到左<br>        填充左方从下到上</p><img src="/2022/04/04/LeetCode/20220405210510.png" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] generateMatrix(<span class="hljs-type">int</span> n)&#123;<br>    <span class="hljs-type">int</span> [][] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];  <span class="hljs-comment">//创建二维数组</span><br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> n/<span class="hljs-number">2</span>;  <span class="hljs-comment">//定义循环次数</span><br>    <span class="hljs-comment">//定义循环起始位置</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">startX</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">startY</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//定义偏移量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//定义填充数字</span><br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> n/<span class="hljs-number">2</span>; <span class="hljs-comment">//定义中间位置</span><br><br>    <span class="hljs-keyword">while</span> (loop &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> startX;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> startY;<br><br>        <span class="hljs-keyword">while</span> (y &lt; startY+n-offset)&#123; <span class="hljs-comment">//填充上边界</span><br>            res[x][y] = count++;<br>            y++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (x &lt; startX+n-offset)&#123; <span class="hljs-comment">//填充右边界</span><br>            res[x][y] = count++;<br>            x++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (y &gt; startY)&#123;  <span class="hljs-comment">//填充下边界</span><br>            res[x][y] = count++;<br>            y--;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (x &gt; startX)&#123; <span class="hljs-comment">//填充左边界</span><br>            res[x][y] = count++;<br>            x--;<br>        &#125;<br><br>        loop--; <span class="hljs-comment">//循环内层</span><br><br>        <span class="hljs-comment">//内层循环起始位置</span><br>        startX += <span class="hljs-number">1</span>;<br>        startY += <span class="hljs-number">1</span>;<br><br>        offset += <span class="hljs-number">2</span>; <span class="hljs-comment">//偏移量，没循环一次会增加两层</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (n%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        res[mid][mid] = count; <span class="hljs-comment">//奇数时会有一个中间值，不参与循环插入</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类似题目</strong></p><ul><li>54.螺旋矩阵</li><li>剑指Offer 29.顺时针打印矩阵</li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是一种通过指针串联在一起的线性结构，每个结点由数据域和指针域两部分组成</p><p>链表的结点在内存中的存储方式不连续</p><p><strong>单链表</strong></p><img src="/2022/04/04/LeetCode/20220406103333.png" style="zoom: 67%;"><p><strong>双链表</strong></p><img src="/2022/04/04/LeetCode/20220406103423.png" style="zoom: 67%;"><p><strong>循环链表</strong></p><img src="/2022/04/04/LeetCode/20220406103454.png" style="zoom: 67%;"><img src="/2022/04/04/LeetCode/20220406103852.png" style="zoom: 67%;"><h3 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h3><p>删除链表中元素等于val的所有结点</p><img src="/2022/04/04/LeetCode/20220406104027.png" style="zoom: 50%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除结点（没有虚拟头结点）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode&lt;Integer&gt; <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode&lt;Integer&gt; head, <span class="hljs-type">int</span> val)</span>&#123;<br><br>    <span class="hljs-comment">//删除首结点（使用while，因为当删除首节点时，成为首结点的结点可能也需要删除）</span><br>    <span class="hljs-keyword">while</span> (head!=<span class="hljs-literal">null</span> &amp;&amp; head.getT()==val)&#123;<br>        head = head.getNext();<br>    &#125;<br><br>    <span class="hljs-comment">//删除非首结点</span><br>    ListNode&lt;Integer&gt; temp = head;<br>    <span class="hljs-keyword">while</span> (temp!=<span class="hljs-literal">null</span> &amp;&amp; temp.getNext()!=<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//遍历非首结点</span><br>        <span class="hljs-keyword">if</span> (temp.getNext().getT()==val)&#123;<br>            temp.setNext(temp.getNext().getNext());<br>        &#125;<br>        temp = temp.getNext();<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除结点（有虚拟头结点）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode&lt;Integer&gt; <span class="hljs-title function_">removeElements2</span><span class="hljs-params">(ListNode&lt;Integer&gt; head, <span class="hljs-type">int</span> val)</span>&#123;<br><br>    ListNode&lt;Integer&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>&lt;&gt;(); <span class="hljs-comment">//创建虚拟化头结点</span><br>    node.setNext(head); <span class="hljs-comment">//令头结点执行首结点</span><br>    ListNode&lt;Integer&gt; temp = node; <span class="hljs-comment">//临时指针，指向头结点</span><br>    <span class="hljs-keyword">while</span> (temp.getNext()!=<span class="hljs-literal">null</span>)&#123;  <span class="hljs-comment">//进行循环遍历比较</span><br>        <span class="hljs-keyword">if</span> (temp.getNext().getT()==val)&#123;<br>            temp.setNext(temp.getNext().getNext());<br>        &#125;<br>        temp = temp.getNext();<br>    &#125;<br>    head = node.getNext();  <span class="hljs-comment">//将循环后的链表在赋值给head（去掉头结点）</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h3><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点</li><li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素</li><li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点</li><li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点</li></ul><p>删除链表节点：<img src="/2022/04/04/LeetCode/20220406165229.png" style="zoom:67%;"></p><p>添加链表节点：<img src="/2022/04/04/LeetCode/20220406165246.png" style="zoom: 67%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（有虚拟头结点）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ListNode&lt;Integer&gt; head;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedList</span><span class="hljs-params">()</span> &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        获取链表第index个节点的数值</span><br><span class="hljs-comment">        在链表的最前面插入一个节点</span><br><span class="hljs-comment">        在链表的最后面插入一个节点</span><br><span class="hljs-comment">        在链表第index个节点前面插入一个节点</span><br><span class="hljs-comment">        删除链表的第index个节点</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//查询操作（有虚拟头结点）</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        ListNode&lt;Integer&gt; temp = head; <span class="hljs-comment">//创建临时指针，指向头结点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//基数</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123; <span class="hljs-comment">//循环查找第index结点的数值</span><br>            <span class="hljs-keyword">if</span> (temp.getNext()==<span class="hljs-literal">null</span>)&#123;  <span class="hljs-comment">//如果index索引无效，返回-1</span><br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i==index)&#123;<br>                <span class="hljs-keyword">return</span> temp.getNext().getT();<br>            &#125;<br>            i++;<br>            temp = temp.getNext();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//在首节点处插入结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>        ListNode&lt;Integer&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>&lt;&gt;(val, head.getNext());<br>        head.setNext(newNode);<br>    &#125;<br><br>    <span class="hljs-comment">//在尾结点处插入结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>        ListNode&lt;Integer&gt; temp = head;<br>        <span class="hljs-keyword">while</span> (temp.getNext() != <span class="hljs-literal">null</span>)&#123;<br>            temp = temp.getNext();<br>        &#125;<br>        ListNode&lt;Integer&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>&lt;&gt;(val, <span class="hljs-literal">null</span>);<br>        temp.setNext(newNode);<br>    &#125;<br><br>    <span class="hljs-comment">//在index处插入结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span>&#123;<br>        ListNode&lt;Integer&gt; temp = head;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (temp.getNext() != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span> (i==index)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.getNext();<br>            i++;<br>        &#125;<br>        ListNode&lt;Integer&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>&lt;&gt;(val, temp.getNext());<br>        temp.setNext(newNode);<br>    &#125;<br><br>    <span class="hljs-comment">//删除结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        ListNode&lt;Integer&gt; temp = head; <span class="hljs-comment">//临时指针，指向头结点</span><br>        <span class="hljs-keyword">while</span> (temp.getNext()!=<span class="hljs-literal">null</span>)&#123;  <span class="hljs-comment">//进行循环遍历比较</span><br>            <span class="hljs-keyword">if</span> (temp.getNext().getT()==index)&#123;<br>                temp.setNext(temp.getNext().getNext());<br>            &#125;<br>            temp = temp.getNext();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><img src="/2022/04/04/LeetCode/20220406165442.gif"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双指针法</span><br><span class="hljs-keyword">public</span> ListNode&lt;Integer&gt; <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode&lt;Integer&gt; head)</span>&#123;<br>    ListNode&lt;Integer&gt; cur = head;<br>    ListNode&lt;Integer&gt; pre = <span class="hljs-literal">null</span>;<br>    ListNode&lt;Integer&gt; temp = <span class="hljs-literal">null</span>; <span class="hljs-comment">//保存cur指向的结点的下一个结点</span><br><br>    <span class="hljs-keyword">while</span> (cur!=<span class="hljs-literal">null</span>)&#123;<br>        temp = cur.getNext();<br>        cur.setNext(pre); <span class="hljs-comment">//令cur指向的结点 指向pre所指向的结点</span><br>        pre = cur; <span class="hljs-comment">//令pre指向cur指向的结点</span><br>        cur = temp; <span class="hljs-comment">//令cur指向下一个结点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//递归法（调用该方法的初始条件是传null和head，相当于双指针中初始化cur和pre）</span><br><span class="hljs-keyword">public</span> ListNode&lt;Integer&gt; <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode&lt;Integer&gt; pre, ListNode&lt;Integer&gt; cur)</span>&#123;<br>    <span class="hljs-keyword">if</span> (cur==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> pre; <span class="hljs-comment">//当cur递归到null时，结束递归</span><br>    ListNode&lt;Integer&gt; temp = cur.getNext(); <span class="hljs-comment">//保存cur指向的结点的下一个结点</span><br>    cur.setNext(pre); <span class="hljs-comment">//令cur指向的结点  指向pre所指向的结点</span><br>    <span class="hljs-comment">//相当于双指针中的</span><br>    <span class="hljs-comment">//pre = cur;</span><br>    <span class="hljs-comment">//cur = temp;</span><br>    <span class="hljs-keyword">return</span> reverseList(cur, temp);  <span class="hljs-comment">//递归调用将cur赋值给pre，将cur的下一个结点赋值给cur</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>相似题目推荐</strong></p><ul><li>反转链表 II</li><li>回文链表</li></ul><h3 id="删除链表的倒数第N个结点"><a href="#删除链表的倒数第N个结点" class="headerlink" title="删除链表的倒数第N个结点"></a>删除链表的倒数第N个结点</h3><p>给你一个链表，删除链表的倒数第N个结点，并返回头结点</p><ul><li><p>定义fast指针和slow指针，初始值为虚拟头结点，如图：<img src="/2022/04/04/LeetCode/20220406211543.png" style="zoom:67%;"></p></li><li><p>fast首先走n + 1步 ，因为只有这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作），如图：<img src="/2022/04/04/LeetCode/20220406211619.png" style="zoom:67%;"></p></li><li><p>fast和slow同时移动，直到fast指向末尾，删除slow指向的下一个节点，如图：<img src="/2022/04/04/LeetCode/20220406211642.png" style="zoom:67%;"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode&lt;Integer&gt; <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode&lt;Integer&gt; head, <span class="hljs-type">int</span> n)</span>&#123;<br>    ListNode&lt;Integer&gt; fast = head; <br>    ListNode&lt;Integer&gt; slow = head;<br><br>    <span class="hljs-keyword">while</span> (fast!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">if</span> (n-- &gt;= <span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//让fast指针先向前移动n+1</span><br>            fast = fast.getNext();<br>        &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//同时移动fast和slow指针，此时fast和slow之间间隔时n+1</span><br>            fast = fast.getNext();<br>            slow = slow.getNext();<br>        &#125;<br>    &#125;<br>    slow.setNext(slow.getNext().getNext());<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h3><p>给定两个链表，判定它们是否相交并返回交点（相交是指针相等）</p><ul><li>求出两个链表长度的差值，然后让curA移动到，和curB 末尾对齐的位置，如图：</li></ul><img src="/2022/04/04/LeetCode/20220406211722.png" style="zoom: 67%;"><ul><li>比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA &#x3D;&#x3D; curB，则找到交点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode&lt;Integer&gt; <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode&lt;Integer&gt; headA, ListNode&lt;Integer&gt; headB)</span>&#123;<br>    ListNode&lt;Integer&gt; tempA = headA;<br>    ListNode&lt;Integer&gt; tempB = headB;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">lenA</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, lenB = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (tempA!=<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//求headA链表的长度</span><br>        lenA++;<br>        tempA = tempA.getNext();<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (tempB!=<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//求headB链表的长度</span><br>        lenB++;<br>        tempB = tempB.getNext();<br>    &#125;<br>    tempA = headA;<br>    tempB = headB;<br><br>    <span class="hljs-keyword">if</span> (lenB &gt; lenA)&#123;  <span class="hljs-comment">//当headB链表长时，将tempA指向和tempB链表一样长</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> lenB - lenA;<br>        <span class="hljs-keyword">while</span> (len-- &gt; <span class="hljs-number">0</span>)&#123;<br>            tempB = tempB.getNext();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (lenB &lt; lenA)&#123; <span class="hljs-comment">//当headA链表长时，将tempB指向和tempA链表一样长</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> lenA - lenB;<br>        <span class="hljs-keyword">while</span> (len-- &gt; <span class="hljs-number">0</span>)&#123;<br>            tempA = tempA.getNext();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (tempA != <span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//此时链表储藏度相同，同时遍历链表，看是否存在交点</span><br>        <span class="hljs-keyword">if</span> (tempA.equals(tempB))&#123;<br>            <span class="hljs-keyword">return</span> tempA;<br>        &#125;<br>        tempA = tempA.getNext();<br>        tempB = tempB.getNext();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h3><p>给定一个链表，返回链表开始入环的第一个结点，如果链表无环，则返回null</p><p><strong>判断链表是否有环</strong></p><p>定义 fast 和 slow指针，从头结点出发，<strong>fast指针每次移动两个节点</strong>，<strong>slow指针每次移动一个节点</strong>，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环<img src="/2022/04/04/LeetCode/04/04/LeetCode/20220407110825.gif" class></p><p><strong>找到环的入口</strong></p><p>从<strong>头结点出发</strong>一个指针，从<strong>相遇节点出发</strong>一个指针，这两个指针<strong>每次只走一个节点</strong>， 当这两个指针相遇的时候就是环形入口的节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义 fast 和 slow指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环</span><br><span class="hljs-comment">//从头结点出发一个指针，从相遇节点出发一个指针，这两个指针每次只走一个节点， 当这两个指针相遇的时候就是环形入口的节点</span><br><span class="hljs-keyword">public</span> ListNode&lt;Integer&gt; <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode&lt;Integer&gt; head)</span>&#123;<br>    ListNode&lt;Integer&gt; fast = head;<br>    ListNode&lt;Integer&gt; slow = head;<br><br>    <span class="hljs-keyword">while</span> (fast!=<span class="hljs-literal">null</span> &amp;&amp; fast.getNext()!=<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//当链表中没环（fast指向空或fast的下一个结点为空）</span><br>        fast = fast.getNext().getNext(); <span class="hljs-comment">//fast每次移动两个结点</span><br>        slow = slow.getNext(); <span class="hljs-comment">//slow每次移动一个结点</span><br>        <span class="hljs-keyword">if</span> (fast == slow) &#123; <span class="hljs-comment">//当fast和slow指向同一个结点时表示有环</span><br>            fast = head; <span class="hljs-comment">//fast指向head</span><br>            <span class="hljs-keyword">while</span> (fast != slow) &#123; <span class="hljs-comment">//当fast和slow指向同一个结点，此结点时环入口结点</span><br>                fast = fast.getNext();<br>                slow = slow.getNext();<br>            &#125;<br>            <span class="hljs-keyword">return</span> fast;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="哈希表（散列表）"><a href="#哈希表（散列表）" class="headerlink" title="哈希表（散列表）"></a>哈希表（散列表）</h2><p>Hash table是根据关键码的值直接访问的数据结构</p><p><strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong></p><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><p>通过hashCode把数据转化为数据（hashCode通过特定的编码方式将其他数据格式转化为不同的数值），就可以把数据映射为哈希表上的索引数字</p><img src="/2022/04/04/LeetCode/20220407140625.png" style="zoom: 67%;"><h3 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h3><p>当hashCode得到的值大于哈希表的大小，就将得到的hashCode值在进行取模操作，此时会出现两个数据映射在一个索引数字上，这就叫哈希碰转</p><img src="/2022/04/04/LeetCode/20220407141140.png" style="zoom: 67%;"><h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h4><p>数据规模是dataSize， 哈希表的大小为tableSize</p><img src="/2022/04/04/LeetCode/20220407141317.png" style="zoom:67%;"><h4 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h4><p>要保证哈希表大小tableSize大于数据规模dataSize，依靠哈希表的空位来解决哈希碰撞</p><p>（当小李和小王存在冲突时，会将小王向下查找空位放置小王的信息）</p><img src="/2022/04/04/LeetCode/20220407141547.png" style="zoom:67%;"><h3 id="常见的哈希结构"><a href="#常见的哈希结构" class="headerlink" title="常见的哈希结构"></a>常见的哈希结构</h3><ul><li>数组<ul><li>没有限制数值的大小，就无法使用数组来做哈希表</li><li>哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费</li></ul></li><li>HashSet（集合）<ul><li>没有重复元素，且无序，HashSet允许使用 null 元素</li><li>由HashMap实现的，只有HashMap中的key</li></ul></li><li>HashMap（映射）<ul><li>当哈希桶中拉链长度小于等于8时，会采用尾插法插入节点，形成一个单向链表</li><li>当拉链长度大于8，且数组容量【哈希桶】小于64时，会进行扩容，不会进行树化</li><li>当拉链大于8且数组容量大于等于64时，会将链表转换为红黑树</li></ul></li></ul><h3 id="算法问题"><a href="#算法问题" class="headerlink" title="算法问题"></a>算法问题</h3><h4 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h4><p>给定两个字符串s和t，判断两个字符串是否时字母异位词（组成单词的字母相同）<img src="/2022/04/04/LeetCode/20220407144951.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//哈希法</span><br><span class="hljs-comment">//把字符映射到数组也就是哈希表的索引下表上，因为字符a到字符z的ASCII是26个连续的数值，所以字符a映射为下表0，相应的字符z映射为下表25</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnagram</span><span class="hljs-params">(String s, String t)</span>&#123;<br><br>    <span class="hljs-type">char</span> [] temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">26</span>];  <span class="hljs-comment">//创建临时数组当做hashtable，存储字符串中的字符</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123; <span class="hljs-comment">//遍历s字符串</span><br>        temp[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] += <span class="hljs-number">1</span>; <span class="hljs-comment">//将s字符串中的字符，通过s.charAt(i)-&#x27;a&#x27;转换为数组的下标进行存储</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t.length(); i++) &#123; <span class="hljs-comment">//遍历t字符串</span><br>        temp[t.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] -= <span class="hljs-number">1</span>;  <span class="hljs-comment">//将t字符串中的字符，通过t.charAt(i)-&#x27;a&#x27;转换为数组的下标进行存储</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;  <span class="hljs-comment">//遍历数组</span><br>        <span class="hljs-keyword">if</span> (temp[i] != <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//若元素存在不为0的，表示s字符串和t字符中的字符不同</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>相关题目</strong></p><ul><li>赎金信</li><li>字母异位词分组</li><li>找到字符串中所有字母异位词</li></ul><h4 id="查找常用字符"><a href="#查找常用字符" class="headerlink" title="查找常用字符"></a>查找常用字符</h4><p>给定仅有小写字母组成的字符串数组A，返回列表中每个字符串都显示的全部字符（包括重复字符）组成的列表</p><p>（26个小写字符中有字符在所有字符串里都出现就输出，重复的也算）</p><img src="/2022/04/04/LeetCode/20220407152629.png" style="zoom:67%;"><p>答：统计每个字符串中字符出现的次数，然后取出每个字符出现的频率的最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//哈希法</span><br><span class="hljs-comment">//先统计第一个字符串字符出现的次数</span><br><span class="hljs-comment">//统计其他字符串中字符出现的次数，和第一个做比较，取最小值（表示两个字符串不是全都包括该字符，所以要取最小值去掉该字符）</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">commonChars</span><span class="hljs-params">(String[] A)</span>&#123;<br>    List&lt;String&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">//获取得到的字符串</span><br><br>    <span class="hljs-keyword">if</span> (A.length==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//如果A为空，则不用进行比较</span><br><br>    <span class="hljs-type">int</span> [] hashStr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>]; <span class="hljs-comment">//用来存储第一个字符串，用来做参照进行对比</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; A[<span class="hljs-number">0</span>].length(); i++) &#123;<br>        hashStr[A[<span class="hljs-number">0</span>].charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> [] hashOtherStr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>]; <span class="hljs-comment">//用来存储第一个以外的字符串</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; A.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; A[i].length(); j++) &#123;  <span class="hljs-comment">//将字符串映射到数组</span><br>            hashOtherStr[A[i].charAt(j) - <span class="hljs-string">&#x27;a&#x27;</span>] += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; j++) &#123; <span class="hljs-comment">//比较hashStr和hashOtherStr</span><br>            <span class="hljs-keyword">if</span> (hashStr[j] &gt; hashOtherStr[j])&#123; <span class="hljs-comment">//若出现两数不相等，则表示字符不包括，将小的值赋值给hashStr</span><br>                hashStr[j] = hashOtherStr[j];<br>            &#125;<br>            hashOtherStr[j] = <span class="hljs-number">0</span>; <span class="hljs-comment">//将hashOtherStr数组进行清零，供下一个字符串使用</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123; <span class="hljs-comment">//将hashStr遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; hashStr[i]; j++) &#123; <span class="hljs-comment">//获取hashStr中的字符</span><br>            result.add(String.valueOf(i+<span class="hljs-string">&#x27;a&#x27;</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h4><p>给定两个数组，求数组的交集，交集中元素不能重复</p><img src="/2022/04/04/LeetCode/image-20220407165735870.png" style="zoom: 80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//哈希法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span> num1[], <span class="hljs-type">int</span> num2[])&#123;<br>    <span class="hljs-comment">//判断若有一个数组为空，则交集为空</span><br>    <span class="hljs-keyword">if</span> (num1==<span class="hljs-literal">null</span> || num1.length==<span class="hljs-number">0</span> || num2==<span class="hljs-literal">null</span> || num2.length==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>    HashSet&lt;Integer&gt; set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    HashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//遍历第一个数组，将数组存入set1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num1.length; i++) &#123;<br>        set1.add(num1[i]);<br>    &#125;<br>    <span class="hljs-comment">//遍历第二个数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num2.length; i++) &#123;<br>        <span class="hljs-comment">//set1中是否存在第二个数组中的元素，存在则存储到set中</span><br>        <span class="hljs-keyword">if</span> (set1.contains(num2[i]))&#123;<br>            set.add(num2[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//变量里set集合，将元素插入到数组中进行返回</span><br>    <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[set.size()];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Integer integer : set) &#123;<br>        result[index++] = integer;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>相关题目</strong></p><ul><li>两个数组的交集 II</li></ul><h4 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h4><p>判断一个数n是不是快乐数</p><p>快乐数：将n按位置（个十百千…）分开，分别求平方，再求和，循环该步骤，直到和变为1则是快乐数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//哈希法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    HashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//存储n中每个位数的平方和</span><br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//求n的每个分位上的平方和</span><br>            sum += (n%<span class="hljs-number">10</span>)*(n%<span class="hljs-number">10</span>);<br>            n /= <span class="hljs-number">10</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (sum == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//如果求出等于1，则是快乐数</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (set.contains(sum))&#123; <span class="hljs-comment">//若sum在之前出现过则表示，陷入了死循环，不是快乐数</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        set.add(sum); <span class="hljs-comment">//将sum添加到set集合中，用来比较</span><br>        n = sum; <span class="hljs-comment">//将sum赋值给n</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h4><p>给定一个整数数组nums和目标值target，在该数组中找出两个元素和为目标值的元素，并返回该元素的下标</p><p>每个数组中只有一个答案，并且数组中的元素不能重复使用</p><img src="/2022/04/04/LeetCode/20220407212447.gif" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//哈希法</span><br><span class="hljs-comment">//先和map中的值配对，不满足在将数组中的元素存入到map中（开始map中没有任何元素，边配对边添加）</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)&#123;<br>    <span class="hljs-keyword">if</span> (nums==<span class="hljs-literal">null</span> || nums.length==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>]; <span class="hljs-comment">//存储符合的两个元素的下标</span><br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123; <span class="hljs-comment">//遍历数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> target - nums[i]; <span class="hljs-comment">//获取要和数组中该元素配对的数值</span><br>        <span class="hljs-keyword">if</span> (map.containsKey(temp))&#123; <span class="hljs-comment">//map若存在该数值，则添加到result数组</span><br>            result[<span class="hljs-number">0</span>] = map.get(temp);<br>            result[<span class="hljs-number">1</span>] = i;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        map.put(nums[i], i); <span class="hljs-comment">//若map中不存在该数组，则将数组的元素做keu，下标做value存入map中</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="四数相加II"><a href="#四数相加II" class="headerlink" title="四数相加II"></a>四数相加II</h4><p>给定四整数数组A、B、C、D，计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] &#x3D; 0，所有数组A、B、C、D具有相同的长度，，且0 ≤ N ≤ 500 ，整数范围是-2^28 ~ 2^28 - 1，结果不会超所超过2^31 - 1  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//哈希法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fourSumCount</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span>[] B, <span class="hljs-type">int</span>[] C, <span class="hljs-type">int</span>[] D)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//先遍历A和B的数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : A) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : B) &#123;<br>            <span class="hljs-comment">//将A和B的数组进行组合相加</span><br>            <span class="hljs-keyword">if</span> (map.containsKey(i+j))&#123; <span class="hljs-comment">//若map中存在该结果，使该结果+1</span><br>                map.put(i+j, map.get(i+j)+<span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//若不存在该结果存储该结果，并初始化value为1</span><br>                map.put(i+j, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//遍历C和D数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : C) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : D) &#123;<br>            <span class="hljs-comment">//判断map中是否存在和C和D数组元素组合相加等于0的结果，若存在则res+1</span><br>            <span class="hljs-keyword">if</span> (map.containsKey(-(i+j)))&#123;<br>                res += map.get(-(i+j));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="赎金信"><a href="#赎金信" class="headerlink" title="赎金信"></a>赎金信</h4><p>给定一个赎金信字符串和杂志字符串，判定赎金信字符串是否能由杂志字符串里边的字符组成（杂志字符串中的每个字符只能使用一次）（只包含小写字母）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//暴力解法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canConstruct1</span><span class="hljs-params">(String ransom, String magazine)</span>&#123;<br><br>    <span class="hljs-comment">//因为String不能修改，所以使用StringBuilder（非同步）</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(ransom);<br><br>    <span class="hljs-comment">//因为杂志字符串中的字符不能重复使用，所以要使用杂志字符串遍历赎金字符串</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; magazine.length(); i++) &#123; <span class="hljs-comment">//遍历magazine字符串</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; builder.length(); j++) &#123; <span class="hljs-comment">//遍历builder字符串</span><br>            <span class="hljs-keyword">if</span> (magazine.charAt(i) == builder.charAt(j))&#123; <span class="hljs-comment">//如果magazine字符串中的字符在builder中储存在</span><br>                builder.deleteCharAt(j); <span class="hljs-comment">//删除该字符</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (builder.length()==<span class="hljs-number">0</span> || builder==<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//若builder为空，则表示杂志字符串的字符能组成赎金字符串</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//哈希法（数组）</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canConstruct2</span><span class="hljs-params">(String ransom, String magazine)</span>&#123;<br><br>    <span class="hljs-type">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br><br>    <span class="hljs-comment">//遍历magazine字符串，将magazine中的字符存入到temp中</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; magazine.length(); i++) &#123;<br>        temp[magazine.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br><br>    <span class="hljs-comment">//遍历ransom字符串，取出temp中的字符，若字符不存在则不能组成赎金信</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ransom.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (temp[ransom.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>            temp[ransom.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h4><p>给你一个包含n个整数的数组nums，判断数组中是否存在三个元素a+b+c&#x3D;0（不能存在重复的三元组）</p><img src="/2022/04/04/LeetCode/04/04/LeetCode/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.gif" class title="15.三数之和"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双指针法</span><br><span class="hljs-keyword">public</span> List&lt;<span class="hljs-type">int</span>[]&gt; threeSum(<span class="hljs-type">int</span>[] nums)&#123;<br>    ArrayList&lt;<span class="hljs-type">int</span>[]&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    Arrays.sort(nums); <span class="hljs-comment">//对数组进行排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123; <span class="hljs-comment">//遍历数组</span><br><br>        <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//因为数组已经排序，所以最小的元素若大于零，则不能满足要求，直接返回</span><br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-comment">//若使用nums[i]==nums[i+1]，会导致&#123;-1,-1,2&#125;这样的三元组被去重</span><br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span> &amp;&amp; nums[i]==nums[i-<span class="hljs-number">1</span>])&#123; <span class="hljs-comment">//遍历数组时，去重</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; <span class="hljs-comment">//左指针指向i+1的位置</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>; <span class="hljs-comment">//右指针指向数组最后一个元素</span><br><br>        <span class="hljs-keyword">while</span> (right &gt; left) &#123; <span class="hljs-comment">//i不动，移动right和left组成三元组</span><br>            <span class="hljs-comment">//因为数组已经排序，若组成的三元组大于零，则要移动right-1</span><br>            <span class="hljs-keyword">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class="hljs-number">0</span>) &#123;<br>                right--; <span class="hljs-comment">//先移动，在判断去重，会停留在最后一个重复的元素上（保留一个元素）</span><br>                <span class="hljs-keyword">while</span> (right&gt;left &amp;&amp; nums[right]==nums[right+<span class="hljs-number">1</span>])&#123; <span class="hljs-comment">//移动right时，去重</span><br>                    right--;<br>                &#125;<br>                <span class="hljs-comment">//因为数组已经排序，若组成的三元组小于零，则要移动left+1，直至left&lt;right</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class="hljs-number">0</span>) &#123;<br>                left++;<br>                <span class="hljs-keyword">while</span> (right&gt;left &amp;&amp; nums[left]==nums[left-<span class="hljs-number">1</span>])&#123;<span class="hljs-comment">//移动left时，去重</span><br>                    left++;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//若三元组等于零，则将三元组元素，存入res</span><br>                <span class="hljs-type">int</span>[] ints = &#123;nums[i], nums[left], nums[right]&#125;;<br>                res.add(ints);<br>                <span class="hljs-comment">//先判断去重，在移动，会停留在不是该元素的位置（去除掉所有该元素）</span><br>                <span class="hljs-keyword">while</span> (right&gt;left &amp;&amp; nums[right]==nums[right-<span class="hljs-number">1</span>])&#123;<br>                    right--;<br>                &#125;<br>                <span class="hljs-keyword">while</span> (right&gt;left &amp;&amp; nums[left]==nums[left+<span class="hljs-number">1</span>])&#123;<br>                    left++;<br>                &#125;<br>                right--;<br>                left++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h4><p>给定一个包含n个整数的数组和一个目标值target，判断数组中是否存在a+b+c+d&#x3D;target（去除重复的四元组）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双指针法</span><br><span class="hljs-keyword">public</span> List&lt;<span class="hljs-type">int</span>[]&gt; fourSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)&#123;<br>    ArrayList&lt;<span class="hljs-type">int</span>[]&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    Arrays.sort(nums); <span class="hljs-comment">//给数组进行排序</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br><br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span> &amp;&amp; nums[i]== nums[i-<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; nums.length; j++) &#123;<br><br>            <span class="hljs-keyword">if</span> (j&gt;<span class="hljs-number">0</span> &amp;&amp; nums[j]== nums[j-<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> j+<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">while</span> (right &gt; left)&#123;<br>                <span class="hljs-keyword">if</span> (nums[i]+nums[j] &gt; target-(nums[right]+nums[left]))&#123;<br>                    right--;<br>                    <span class="hljs-keyword">while</span> (right&gt;left &amp;&amp; nums[right]==nums[right+<span class="hljs-number">1</span>])&#123;<br>                        right--;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i]+nums[j] &lt; target-(nums[right]+nums[left])) &#123;<br>                    left++;<br>                    <span class="hljs-keyword">while</span> (right&gt;left &amp;&amp; nums[left] == nums[left-<span class="hljs-number">1</span>]) &#123;<br>                        left++;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">int</span>[] ints = &#123;nums[i], nums[j], nums[right], nums[left]&#125;;<br>                    res.add(ints);<br><br>                    <span class="hljs-keyword">while</span> (right&gt;left &amp;&amp; nums[right]==nums[right-<span class="hljs-number">1</span>])&#123;<br>                        right--;<br>                    &#125;<br>                    <span class="hljs-keyword">while</span> (right&gt;left &amp;&amp; nums[left] == nums[left+<span class="hljs-number">1</span>]) &#123;<br>                        left++;<br>                    &#125;<br>                    right--;<br>                    left++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot2</title>
    <link href="/2022/04/01/SpringBoot2/"/>
    <url>/2022/04/01/SpringBoot2/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot2"><a href="#SpringBoot2" class="headerlink" title="SpringBoot2"></a>SpringBoot2</h1><p>能快速创建出生产级别的Spring应用，是整合Spring技术栈的一站式框架，简化Spring技术栈的快速开发脚手架</p><p>SpringBoot优点：</p><ul><li><p>创建独立Spring应用</p></li><li><p>内嵌web服务器</p></li><li><p>自动starter依赖，简化构建配置</p></li><li><p>自动配置Spring以及第三方功能</p></li><li><p>提供生产级别的监控、健康检查及外部化配置</p></li><li><p>无代码生成、无需编写XML</p></li></ul><p>SpringBoot缺点：</p><p>​人称版本帝，迭代快，需要时刻关注变化</p><p>​封装太深，内部原理复杂，不容易精通</p><p><strong>原理</strong>：<strong>场景starter</strong> - xxxxAutoConfiguration - 导入xxx组件 - 绑定xxxProperties – <strong>绑定配置文件项</strong> </p><p><strong>maven引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-comment">&lt;!--依赖管理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zhq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--可以修改默认版本号（查看spring-boot-dependencies里面规定当前依赖的版本用的 key）--&gt;</span><br>        <span class="hljs-comment">&lt;!--修改的是mysql的版本号--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;mysql.version&gt;5.1.43&lt;/mysql.version&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入web场景启动器依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入lombok依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-comment">&lt;!--设置项目打包成jar直接在目标服务器上执行即可--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--表示lombok只参与代码编译工作，打包时不将该jar进行打包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>创建主程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">@SpringBootApplication：设置该类是一个SpringBoot应用（主程序）</span><br><span class="hljs-comment">默认扫描该注解所在的包的所有注解</span><br><span class="hljs-comment">@SpringBootApplication(scanBasePackages = &quot;&quot;包全限定名称)：修改扫描的包</span><br><span class="hljs-comment">等同于</span><br><span class="hljs-comment"> @SpringBootConfiguration：表示可以当做配置类使用，可以在给类中使用@Bean声明组件</span><br><span class="hljs-comment"> @EnableAutoConfiguration：开启自动配置功能</span><br><span class="hljs-comment"> @ComponentScan(&quot;com.zhq&quot;)：扫描器，找到注解，默认扫描给注解所在的包和子包中的注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(SpringbootApplication.class, args);<br>        <span class="hljs-comment">//手工获取SpringBoot容器中的对象，一般测试时使用</span><br><span class="hljs-type">MyConfig</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> run.getBean(MyConfig.class);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> bean.user();<br>System.out.println(user);<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//实现CommandLineRunner接口，可以创建run方法，该方法是容器对象创建完成后执行的</span><br><span class="hljs-comment">//CommandLineRunner返回值</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootApplication</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(SpringbootApplication.class, args);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//创建好容器对象之后，在执行该方法</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写业务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@RestController：@ResponseBody和@Controller的结合（控制器类，返回的是JSON数据）</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> user.getUsername();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接运行main方法，不用配置Tomcat服务器</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ul><li><p>开发导入starter场景启动器</p><p>​见到很多 spring-boot-starter-* ： *就某种场景<br>​只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</p><p>​*-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器</p></li><li><p>无需关注版本号，自动版本仲裁（引入非版本仲裁的jar，要写版本号）</p></li><li><p>可以修改默认版本号，在pom文件的properties标签里</p></li></ul><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><ul><li><p>自动配好Tomcat</p></li><li><p>自动配好SpringMVC</p><p>​引入SpringMVC全套组件</p><p>​自动配好SpringMVC常用组件（功能）</p></li><li><p>自动配好Web常见功能，如：字符编码问题</p><p>​SpringBoot帮我们配置好了所有web开发的常见场景</p></li><li><p>默认的包结构</p><p>​主程序所在包及其下面的所有子包里面的组件（注解）都会被默认扫描进来，无需以前的包扫描配置</p><p>​改变默认的包扫描路径，@SpringBootApplication(scanBasePackages&#x3D;”com.zhq”)或@ComponentScan 指定扫描路径</p></li><li><p>各种配置拥有默认值（可以在application.properties文件中自定义修改）</p><p>​默认配置最终都是映射到某个类上，如：MultipartProperties</p><p>​配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</p></li><li><p>按需加载所有自动配置项</p><p>​引入了哪些场景，这个场景的自动配置才会开启</p><p>​SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</p></li></ul><h2 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h2><p><strong>@Configuration</strong>：声明在类上，设置该类是配置类，在该类里将声明组件，添加到SpringBoot容器中（相当于  Spring中的配置文件）</p><p><strong>@Configuration和@Controller等注解的区别在与，使用@Bean注解时创建对象是不是单例的</strong></p><p><strong>@Bean</strong>：定义在方法上，设置该方法是组件（相当于Spring配置文件中的bean标签）</p><p><strong>Full模式与Lite模式</strong></p><p>​配置类组件之间无依赖关系，Lite模式加速容器启动过程，减少判断，会创建新对象</p><p>​配置类组件之间有依赖关系，Full模式使用CGLIB的代理方法会调用得到之前的单实例组件，不在创建新的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">配置类本身也是组件</span><br><span class="hljs-comment">@Configuration：告诉SpringBoot这是一个配置类（配置文件）</span><br><span class="hljs-comment">    proxyBeanMethods：代理bean的方法，默认为true</span><br><span class="hljs-comment">          true：Full模式【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</span><br><span class="hljs-comment">         false：Lite模式【每个@Bean方法被调用多少次返回的组件都是新创建的】</span><br><span class="hljs-comment">          组件依赖必须使用Full模式，其他默认是Lite模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     @Bean给容器中添加组件；方法名作为组件的id，返回类型就是组件类型，返回值就是组件在容器中的实例</span><br><span class="hljs-comment">     @Bean标注在方法上给容器注册组件，默认是单实例的，相当于Spring配置文件中的bean标签</span><br><span class="hljs-comment">     @Bean(&quot;名称&quot;)：给组件设置id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-comment">//user组件依赖了Pet组件，要使用Full模式</span><br>        user.setPet(tomcatPet());<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;tom&quot;)</span><br>    <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">tomcatPet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-string">&quot;tomcat&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a><strong>@Import</strong></h4><p>将组件导入到@Configuration类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Import(&#123;&#125;)：给配置类中自动添加导入的组件，默认组件的名字就是全类名</span><br><span class="hljs-meta">@Import(&#123;User.class, DBHelper.class&#125;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a><strong>@Conditional</strong></h4><p>条件装配：满足Conditionalxxx指定的条件，则进行组件注入到@Configuration（方法和类上都可定义）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@ConditionalOnBean(name = &quot;tom&quot;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a><strong>@ImportResource</strong></h4><p>读取xml配置文件，将配置自动添加到@Configuration类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将beans.xml进行解析，给配置类中自动添加解析的组件</span><br><span class="hljs-meta">@ImportResource(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Component-ConfigurationProperties"><a href="#Component-ConfigurationProperties" class="headerlink" title="@Component + @ConfigurationProperties"></a><strong>@Component + @ConfigurationProperties</strong></h4><p>读取yaml配置文件赋值给属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">@Component：将组件加入到SpringBoot容器中，如果在配置类中使用@Bean添加了该类的组件，则无需在添加</span><br><span class="hljs-comment">@ConfigurationProperties：自动将和该类相同属性名的值赋值给该类的属性</span><br><span class="hljs-comment">  prefix：设置配置文件中的前缀（前缀下的属性和该类中的属性一一对应）</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">若不导入主配置文件的值则可使用@PropertySource(value=&quot;classpath:application.yaml&quot;)注解指定  文件的位置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> Integer price;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="EnableConfigurationProperties-ConfigurationProperties"><a href="#EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties + @ConfigurationProperties"></a><strong>@EnableConfigurationProperties + @ConfigurationProperties</strong></h4><p>读取yaml配置文件赋值给属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//开启Car配置绑定功能</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> Integer price;<br>&#125;<br><br><span class="hljs-comment">//把Car这个组件自动注册到配置类中，配置类会将组件添加到SpringBoot容器中</span><br><span class="hljs-meta">@EnableConfigurationProperties(Car.class)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a><strong>@PropertySource</strong></h4><p>指定读取yaml的配置文件的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(value = &quot;classpath:application.yaml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MailService</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a><strong>@Value</strong></h4><p>相当于@ConfigurationProperties，但是@ConfigurationProperties是读取配置文件给类属性赋值</p><p>@Value是读取配置文件给单个属性赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(“$&#123;spring.redis.weight&#125;”)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> weight；<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><p>SpringBoot先加载所有的自动配置类  xxxAutoConfiguration</p></li><li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值，xxxProperties和配置文件进行了绑定</p></li><li><p>生效的配置类就会给容器中装配很多组件，只要容器中有这些组件，就相当于有了这些功能</p></li><li><p>定制化配置</p><p>​用户直接自己在配置类中@Bean替换底层的组件</p><p>​用户查看该组件获取的配置文件中的哪个值就去application.yaml中进行修改</p></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><p>同以前的properties用法一样（key &#x3D; value）</p><h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><p>非常适合用来做以数据为中心的配置文件</p><p><strong>基本语法：</strong></p><ul><li><p>key: value；key和value之间有空格</p></li><li><p>大小写敏感</p></li><li><p>使用缩进表示层级关系</p></li><li><p>缩进不允许使用tab，只允许空格（IDEA中可使用）</p></li><li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p></li><li><p>‘#’表示注释</p></li><li><p>字符串无需加引号，’’ “表示字符串内容会被转义（\n不在是换行功能），一般只是用’ ‘</p></li></ul><p><strong>数据类型：</strong></p><ul><li>字面量：单个的、不可再分的值（date、boolean、string、number、null）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">key:</span> <span class="hljs-string">value</span><br></code></pre></td></tr></table></figure><ul><li>对象：键值对的集合（map集合、hash集合、set集合、object对象 ）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">行内写法：</span>  <span class="hljs-attr">k:</span> &#123;<span class="hljs-string">k1:v1</span>,<span class="hljs-string">k2:v2</span>,<span class="hljs-string">k3:v3</span>&#125;<br><span class="hljs-comment">#或</span><br><span class="hljs-attr">k:</span> <br>  <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">k3:</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure><ul><li>数组：一组按次序排列的值（array集合、list集合、queue集合）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">行内写法：</span>  <span class="hljs-attr">k:</span> [<span class="hljs-string">v1</span>,<span class="hljs-string">v2</span>,<span class="hljs-string">v3</span>]<br><span class="hljs-comment">#或者</span><br><span class="hljs-attr">k:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">v2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">v</span><br></code></pre></td></tr></table></figure><h5 id="配置提示"><a href="#配置提示" class="headerlink" title="配置提示"></a>配置提示</h5><p>自定义的类和配置文件绑定一般没有提示，使用提示要导入spring-boot-configuration-processor依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入提示功能，编写配置文件时进行提示--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--使用打包成jar包，在服务器就可运行--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--只进行编写代码时提示，打包时不将该jar包进行打包--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Profile功能"><a href="#Profile功能" class="headerlink" title="Profile功能"></a>Profile功能</h3><p>为了方便多环境适配，springboot简化了profile功能。</p><h4 id="application-profile功能"><a href="#application-profile功能" class="headerlink" title="application-profile功能"></a>application-profile功能</h4><ul><li><p>默认配置文件application.yaml任何时候都会加载</p></li><li><p>指定环境配置文件application-prod.yaml     application-test.yaml</p></li><li><p>激活指定环境</p></li><li><ul><li>默认配置文件激活：<code>spring.profiles.active=prod(test)</code></li><li>命令行激活：<code>java -jar xxx.jar --spring.profiles.active=prod</code> 也可进行配置文件中属性的修改  <code>--person.name=haha</code></li></ul></li><li><ul><li><strong>修改配置文件的任意值，命令行优先</strong></li></ul></li><li><p>激活指定环境，默认配置与环境配置同时生效（同名配置项，环境配置优先）</p></li></ul><h4 id="Profile条件装配功能"><a href="#Profile条件装配功能" class="headerlink" title="@Profile条件装配功能"></a>@Profile条件装配功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Profile(&quot;test&quot;)</span> <span class="hljs-comment">//@Profile指定在某个环境下才生效</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductionConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="profile分组"><a href="#profile分组" class="headerlink" title="profile分组"></a>profile分组</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#在主配置文件中激活production组</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">production</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#将proddb和prodmq配置文件添加为一个组里</span><br><span class="hljs-attr">spring.profiles.group.production[0]</span>=<span class="hljs-string">proddb</span><br><span class="hljs-attr">spring.profiles.group.production[1]</span>=<span class="hljs-string">prodmq</span><br></code></pre></td></tr></table></figure><h3 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h3><h4 id="外部配置源"><a href="#外部配置源" class="headerlink" title="外部配置源"></a>外部配置源</h4><p>常用：<strong>Java属性文件</strong>、<strong>YAML文件</strong>、<strong>环境变量</strong>、<strong>命令行参数</strong></p><p>@Value(“${环境变量名}”)：从环境变量中获取</p><h4 id="配置文件查找位置"><a href="#配置文件查找位置" class="headerlink" title="配置文件查找位置"></a>配置文件查找位置</h4><p>(1) classpath 根路径</p><p>(2) classpath 根路径下config目录</p><p>(3) jar包当前目录</p><p>(4) jar包当前目录的config目录</p><p>(5) &#x2F;config子目录的直接子目录（linux系统生效）</p><p><strong>配置文件加载顺序是从上到下加载，指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</strong></p><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><p>静态资源目录（存放静态资源，访问项目时在此路径下扫描静态资源）：请求进来，先去找Controller看能不能处理。不能处理的所有请求再交给静态资源处理器。静态资源处理器也找不到则响应404页面</p><p>静态资源默认存放在类路径：  resources &#x2F;static</p><p>​resources&#x2F;public</p><p>​resources&#x2F;resources</p><p>​resources&#x2F;META-INF&#x2F;resources</p><p>访问 ： 项目根路径&#x2F;静态资源名 （不用加静态资源所在的真实路径）</p><p>改变默认的静态资源存放路径：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">resources:</span><br>  <span class="hljs-comment">#修改静态资源存放的路径，访问时默认在此路径扫描静态资源</span><br>    <span class="hljs-attr">static-locations:</span> [<span class="hljs-string">classpath:/文件名/</span>,<span class="hljs-string">classpath:/文件名1/......</span>]<br></code></pre></td></tr></table></figure><p>静态资源访问前缀：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>  <span class="hljs-comment">#默认是/**，访问时直接是    项目根路径/静态资源名(不用加静态资源所在的真实路径)</span><br>  <span class="hljs-comment">#添加访问前缀/res/**，访问时是   项目根路径/res/静态资源名（方便拦截器放行静态资源）</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/res/**</span><br>   <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">add-mappings:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#禁用静态资源的所有处理规则（静态资源的默认规则失效）</span><br></code></pre></td></tr></table></figure><h4 id="webjar"><a href="#webjar" class="headerlink" title="webjar"></a>webjar</h4><p>使用<a href="https://www.webjars.org/%E6%90%9C%E7%B4%A2%E7%94%A8%E5%88%B0%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%B7%BB%E5%8A%A0%E5%88%B0maven%E4%B8%AD%EF%BC%8CSpringBoot%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%98%A0%E5%B0%84">https://www.webjars.org/搜索用到的静态资源添加到maven中，SpringBoot会自动映射</a> &#x2F;webjars&#x2F;**</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--比如添加jquery的jar--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--要想在浏览器中访问，地址是(http://localhost:8080/webjars/jquery/3.5.1/jquery.js)   /webjars后面的路径要按照依赖里面的包路径--&gt;</span><br></code></pre></td></tr></table></figure><h4 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h4><ul><li><p>静态资源路径下创建index.html（不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问）</p></li><li><p>创建controller处理&#x2F;index路径请求（可以配置静态资源访问前缀）</p></li></ul><h4 id="自定义-Favicon图标"><a href="#自定义-Favicon图标" class="headerlink" title="自定义 Favicon图标"></a>自定义 Favicon图标</h4><p>在浏览器中访问时的项目图标</p><p>图片要命名为favicon.ico，放在静态资源目录下即可，作用是将该资源默认为项目的页面图标</p><p>不可以配置静态资源的访问前缀。否则导致 Favicon 功能失效</p><h2 id="请求及响应"><a href="#请求及响应" class="headerlink" title="请求及响应"></a>请求及响应</h2><h3 id="rest使用"><a href="#rest使用" class="headerlink" title="rest使用"></a>rest使用</h3><ul><li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p><p>比如访问路径全是&#x2F;user，使用GET（获取用户）DELETE（删除用户） PUT（修改用户）POST（保存用户）区分请求，进行控制器处理</p></li><li><p>用法： </p><p>from表单中请求方式method&#x3D;post，在input标签中设置隐藏域 _method&#x3D;delete&#x2F;put</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;发起请求&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpringBoot中手动开启rest功能</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">hiddenmethod:</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#开启页面表单的Rest功能</span><br></code></pre></td></tr></table></figure><p>编写Controller，进行请求处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@RestController：@ResponseBody和@Controller的结合(controller类，类中的方法返回的是json)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-comment">//@GetMapping：请求的方式是get方式</span><br>    <span class="hljs-meta">@GetMapping(&quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-comment">//@PostMapping：请求的方式是post方式</span><br>    <span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">postUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-comment">//@DeleteMapping：请求的方式是delete方式</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-comment">//@PutMapping：请求的方式是put方式</span><br>    <span class="hljs-meta">@PutMapping(&quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">putUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>自定义修改form表单的隐藏域中的name的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在配置类中自定义filter，自定义form表单的隐藏域的name</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> HiddenHttpMethodFilter <span class="hljs-title function_">hiddenHttpMethodFilter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">methodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br>    <span class="hljs-comment">//修改_method为_m</span><br>    methodFilter.setMethodParam(<span class="hljs-string">&quot;_m&quot;</span>);<br>    <span class="hljs-keyword">return</span> methodFilter;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h3><p>@PathVariable：获取url路径中的变量值</p><p>@RequestHeader：获取请求头的参数信息</p><p>@RequestParam：获取get请求参数</p><p>@MatrixVariable：矩阵变量，url路径中;后的数据（当浏览器禁用cookie时使用矩阵变量可以存储数据）</p><p>@CookieValue：获取Cookie的值</p><p>@RequestBody：获取post请求体的值</p><p>@RequestAttribute：获取request域的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义路径，&#123;id&#125;是一个路径变量</span><br><span class="hljs-meta">@GetMapping(&quot;/car/&#123;id&#125;/owner&quot;)</span><br><span class="hljs-comment">//获取url路径中的变量</span><br><span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id<br><span class="hljs-meta">@PathVariable</span> Map&lt;String,String&gt; pv<br><br><span class="hljs-comment">//获取请求头信息</span><br><span class="hljs-meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent<br><span class="hljs-meta">@RequestHeader</span> Map&lt;String,String&gt; header<br><br><span class="hljs-comment">//获取get请求的参数</span><br><span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age<br><span class="hljs-meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters<br><span class="hljs-meta">@RequestParam</span> Map&lt;String,String&gt; params<br><br><span class="hljs-comment">//获取cookie</span><br><span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> String _ga<br><span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie<br><br><span class="hljs-comment">//获取post请求体信息</span><br><span class="hljs-meta">@RequestBody</span> String content<br></code></pre></td></tr></table></figure><p>手动开启UrlPathHelper中的removeSemicolonContext属性（移除分号内容）支持矩阵变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//请求路径：/cars/sell;low=34</span><br><span class="hljs-comment">//SpringBoot默认是禁用了矩阵变量的功能，需要手动开启</span><br><span class="hljs-comment">//矩阵变量必须有url路径变量才能被解析</span><br><span class="hljs-meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span><br><span class="hljs-meta">@MatrixVariable(&quot;low&quot;)</span> Integer low<br><br><span class="hljs-comment">//请求路径：/user/bossId;age=20;/empId;age=22</span><br><span class="hljs-meta">@GetMapping(&quot;/user/&#123;path&#125;&quot;)</span><br><span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span><br><span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span><br><br><br><span class="hljs-comment">//在配置类中，重新声明WebMvcConfigurer组件，返回WebMvcConfigurer组件中重写的configurePathMatch方法，将url路径中;后的内容不移出urlPathHelper.setRemoveSemicolonContent(false);</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurePathMatch</span><span class="hljs-params">(PathMatchConfigurer configurer)</span> &#123;<br>            <span class="hljs-type">UrlPathHelper</span> <span class="hljs-variable">urlPathHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlPathHelper</span>();<br>            <span class="hljs-comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span><br>            urlPathHelper.setRemoveSemicolonContent(<span class="hljs-literal">false</span>);<br>            configurer.setUrlPathHelper(urlPathHelper);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet API"></a>Servlet API</h3><p>参数位置可以传入：</p><p>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId等类型和子类型的参数</p><h3 id="复杂参数"><a href="#复杂参数" class="headerlink" title="复杂参数"></a>复杂参数</h3><p><strong>Map</strong>、<strong>Model（map、model里面的数据会被放在request的请求域）</strong>Errors&#x2F;BindingResult、<strong>RedirectAttributes（ 重定向携带数据）</strong>、<strong>ServletResponse（response）</strong>、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p><h3 id="自定义对象参数"><a href="#自定义对象参数" class="headerlink" title="自定义对象参数"></a>自定义对象参数</h3><p>页面提交的请求参数都可以和自定义对象中的属性一一对应，使用自定义对象接收参数</p><p>自定义 Converter，接收自定义的请求参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在配置类中重新声明WebMvcConfigurer组件，组件中重写addFormatters方法</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>        <span class="hljs-comment">//自定义接收自定义的参数对象，并进行解析</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFormatters</span><span class="hljs-params">(FormatterRegistry registry)</span> &#123;<br>            registry.addConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Converter</span>&lt;String, User&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> User <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>                    <span class="hljs-comment">//接收页面提交的一个数据(狗子,1234)参数，自定义设置参数处理规则以,进行分隔</span><br>                    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(source))&#123;<br>                        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>                        String[] split = source.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                        user.setUsername(split[<span class="hljs-number">0</span>]);<br>                        user.setPassword(split[<span class="hljs-number">1</span>]);<br>                        <span class="hljs-keyword">return</span> user;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="响应JSON"><a href="#响应JSON" class="headerlink" title="响应JSON"></a>响应JSON</h3><p><strong>jackson.jar+@ResponseBody</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入的web场景会自动引入了json场景--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><p>根据客户端接收能力不同，返回不同媒体类型的数据</p><h4 id="url路径请求参数"><a href="#url路径请求参数" class="headerlink" title="url路径请求参数"></a>url路径请求参数</h4><p>默认只支持json和xml格式</p><p><strong>引入jackson-dataformat-xml依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jackson-dataformat-xml依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>开启浏览器参数方式内容协商功能</strong></p><p>为了方便内容协商，开启基于请求参数的内容协商功能，在url路径中使用参数进行设置   ?format&#x3D;json(xml)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">contentnegotiation:</span><br>      <span class="hljs-attr">favor-parameter:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#开启请求参数内容协商模式</span><br></code></pre></td></tr></table></figure><h5 id="自定义数据响应类型"><a href="#自定义数据响应类型" class="headerlink" title="自定义数据响应类型"></a>自定义数据响应类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加返回自定义媒体类型的参数</span><br><span class="hljs-comment">//创建类实现HttpMessageConverter接口，并实现五个方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMessafeConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;User&gt; &#123;<br>    <span class="hljs-comment">//类型是否可读</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><span class="hljs-comment">//类型是否可写</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canWrite</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-comment">//如果是User类型的数据就可写</span><br>        <span class="hljs-keyword">return</span> clazz.isAssignableFrom(User.class);<br>    &#125;<br><span class="hljs-comment">//定义解析返回的媒体类型</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">getSupportedMediaTypes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//定义解析的类型</span><br>        <span class="hljs-keyword">return</span> MediaType.parseMediaTypes(<span class="hljs-string">&quot;application/x-user&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//类型进行读操作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">read</span><span class="hljs-params">(Class&lt;? extends User&gt; clazz, HttpInputMessage inputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotReadableException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><span class="hljs-comment">//类型进行写操作（响应给浏览器的数据规则）</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(User user, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException &#123;<br>        <span class="hljs-comment">//自定义写出的数据格式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> user.getUsername() + <span class="hljs-string">&quot;;&quot;</span> + user.getPassword();<br>        <span class="hljs-comment">//将数据写出</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> outputMessage.getBody();<br>        body.write(data.getBytes());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//url路径请求参数默认只支持json和xml格式</span><br><span class="hljs-comment">//在配置类中重新声明WebMvcConfigurer组件，组件中重写configureContentNegotiation方法，在该方法中添加以url请求参数返回的自定义的媒体类型</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureContentNegotiation</span><span class="hljs-params">(ContentNegotiationConfigurer configurer)</span> &#123;<br>            Map&lt;String, MediaType&gt; mediaTrayMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>            <span class="hljs-comment">//添加响应的媒体类型</span><br>            mediaTrayMap.put(<span class="hljs-string">&quot;json&quot;</span>, MediaType.APPLICATION_JSON);<br>            mediaTrayMap.put(<span class="hljs-string">&quot;xml&quot;</span>, MediaType.APPLICATION_XML);<br>            mediaTrayMap.put(<span class="hljs-string">&quot;user&quot;</span>, MediaType.parseMediaType(<span class="hljs-string">&quot;application/x-user&quot;</span>));<br><br>            <span class="hljs-comment">//添加到url路径请求参数</span><br>            <span class="hljs-type">ParameterContentNegotiationStrategy</span> <span class="hljs-variable">parameterStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterContentNegotiationStrategy</span>(mediaTrayMap);<br>            <span class="hljs-comment">//默认url的参数名是format，修改为user</span><br>            parameterStrategy.setParameterName(<span class="hljs-string">&quot;user&quot;</span>);<br><br>            <span class="hljs-comment">//将自定义响应的数据类型，添加到configurer</span><br>            configurer.strategies(Arrays.asList(parameterStrategy));<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="请求头处理"><a href="#请求头处理" class="headerlink" title="请求头处理"></a>请求头处理</h4><h5 id="自定义数据响应类型-1"><a href="#自定义数据响应类型-1" class="headerlink" title="自定义数据响应类型"></a>自定义数据响应类型</h5><p>请求头处理法：自定义接收数据的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加返回自定义媒体类型的参数</span><br><span class="hljs-comment">//创建类实现HttpMessageConverter接口，并实现五个方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMessafeConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;User&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canWrite</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-comment">//如果是User类型的数据就可写</span><br>        <span class="hljs-keyword">return</span> clazz.isAssignableFrom(User.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">getSupportedMediaTypes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//定义解析的类型</span><br>        <span class="hljs-keyword">return</span> MediaType.parseMediaTypes(<span class="hljs-string">&quot;application/x-user&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">read</span><span class="hljs-params">(Class&lt;? extends User&gt; clazz, HttpInputMessage inputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotReadableException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(User user, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException &#123;<br>        <span class="hljs-comment">//自定义写出的数据格式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> user.getUsername() + <span class="hljs-string">&quot;;&quot;</span> + user.getPassword();<br>        <span class="hljs-comment">//将数据写出</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> outputMessage.getBody();<br>        body.write(data.getBytes(StandardCharsets.UTF_8));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在配置类中重新声明WebMvcConfigurer组件，组件中重写extendMessageConverters方法，在该方法中添加以请求头方式返回自定义的媒体类型</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br><span class="hljs-comment">//添加自定义converter</span><br>            converters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestMessafeConverter</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。</strong></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="HandlerInterceptor-接口"><a href="#HandlerInterceptor-接口" class="headerlink" title="HandlerInterceptor 接口"></a>HandlerInterceptor 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">创建类实现HandlerInterceptor接口，实现接口中的三个方法</span><br><span class="hljs-comment">配置好拦截器要拦截哪些请求，并把这些配置放在容器中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-comment">//目标方法执行之前</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><span class="hljs-comment">//目标方法执行完成以后</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    &#125;<br><br><span class="hljs-comment">//页面渲染以后</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">创建配置类实现WebMvcConfigurer接口实现addInterceptors方法（或者创建返回WebMvcConfigurer类型的@Bean，在组件方法中创建WebMvcConfigurer匿名内部类实现addInterceptors方法）</span><br><span class="hljs-comment">指定拦截规则【如果是拦截所有，静态资源也会被拦截】</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<br>             <span class="hljs-comment">//所有请求都被拦截包括静态资源</span><br>            .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>) <br>         <span class="hljs-comment">//放行的请求</span><br>   .excludePathPatterns(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-string">&quot;/css/**&quot;</span>,<span class="hljs-string">&quot;/fonts/**&quot;</span>,<span class="hljs-string">&quot;/images/**&quot;</span>,<span class="hljs-string">&quot;/js/**&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Web组件"><a href="#Web组件" class="headerlink" title="Web组件"></a>Web组件</h2><h3 id="使用Servlet-API创建"><a href="#使用Servlet-API创建" class="headerlink" title="使用Servlet API创建"></a>使用Servlet API创建</h3><p>主程序类上添加**@ServletComponentScan(basePackages &#x3D; “包名”)** ：指定原生Servlet组件的位置（若不使用basePackages 指定表示扫描主程序类所在的包以及子包）</p><p><strong>创建servlet类</strong>继承HttpServlet类，并在类上添加@WebServlet(urlPatterns &#x3D; “&#x2F;路径”)直接响应，不经过Spring的拦截器</p><p><strong>创建filter类</strong>实现Filter接口，并在类上添加@WebFilter(urlPatterns&#x3D;{“&#x2F;css&#x2F;*“,”&#x2F;images&#x2F;*“})：urlPatterns指定拦截路径</p><p><strong>创建listenerr类</strong>实现ServletContextListener接口，并在类上添加@WebListener</p><h3 id="使用RegistrationBean创建"><a href="#使用RegistrationBean创建" class="headerlink" title="使用RegistrationBean创建"></a>使用RegistrationBean创建</h3><p>使用RegistrationBean之前已经 <strong>创建servlet类</strong>继承HttpServlet类，<strong>创建filter类</strong>实现Filter接口，<strong>创建listenerr类</strong>实现ServletContextListener接口，然后再使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRegistConfig</span> &#123;<br><br>    <span class="hljs-comment">//创建servlet</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">myServlet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//返回添加创建的mySerlvet，并指定路径，路径可有多个</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServlet</span>(),<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/my02&quot;</span>);<br>    &#125;<br><br>    <br>    <span class="hljs-comment">//创建filter</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">myFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//返回添加创建的myFilter，并指定使用@Bean创建的servlet组件（该组件中访问servlet的路径是什 么就拦截什么）</span><br>        <span class="hljs-comment">//return new FilterRegistrationBean(new MyFilter(),myServlet());</span><br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">filterRegistrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFilter</span>());<br>        <span class="hljs-comment">//自定义添加拦截路径</span><br>        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/css/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br><br>    <br>    <span class="hljs-comment">//创建listener</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletListenerRegistrationBean <span class="hljs-title function_">myListener</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletListenerRegistrationBean</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySwervletContextListener</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌入式Servlet容器"><a href="#嵌入式Servlet容器" class="headerlink" title="嵌入式Servlet容器"></a>嵌入式Servlet容器</h3><h4 id="切换Servlet容器"><a href="#切换Servlet容器" class="headerlink" title="切换Servlet容器"></a>切换Servlet容器</h4><ul><li><p>默认支持的webServer</p><p>​Tomcat,  Jetty,  Undertow</p><p>​ServletWebServerApplicationContext 容器启动寻找ServletWebServerFactory 并引导创建服务器</p></li><li><p>切换服务器</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--禁用tomcat服务器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入undertow服务器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="定制Servlet容器"><a href="#定制Servlet容器" class="headerlink" title="定制Servlet容器"></a>定制Servlet容器</h4><p>创建类实现<code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code>接口，并实现customize方法，在customize方法中使用server进行Servlet容器的定制</p><p>或者直接在配置文件中修改 server.xxx</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomizationBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableServletWebServerFactory&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customize</span><span class="hljs-params">(ConfigurableServletWebServerFactory server)</span> &#123;<br>        server.setPort(<span class="hljs-number">9000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定制化"><a href="#定制化" class="headerlink" title="定制化"></a>定制化</h3><ul><li><p>修改配置文件；</p></li><li><p>xxxxxCustomizer；</p></li><li><p>编写自定义的配置类   xxxConfiguration + @Bean替换、增加容器中默认组件或视图解析器</p></li><li><p>Web应用编写一个配置类实现WebMvcConfigurer接口可定制化web功能和@Bean给容器中再扩展一些组件</p></li><li><p>@EnableWebMvc + WebMvcConfigurer —— @Bean可以全面接管SpringMVC，所有规则全部自己重新配置</p></li></ul><h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="数据源的自动配置"><a href="#数据源的自动配置" class="headerlink" title="数据源的自动配置"></a>数据源的自动配置</h4><h5 id="导入JDBC场景"><a href="#导入JDBC场景" class="headerlink" title="导入JDBC场景"></a>导入JDBC场景</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jdbc驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>   <br></code></pre></td></tr></table></figure><p>数据库版本要和驱动版本对应</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--pom文件下声明，修改版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="自动配置的类"><a href="#自动配置的类" class="headerlink" title="自动配置的类"></a>自动配置的类</h5><ul><li><p>DataSourceAutoConfiguration ： 数据源的自动配置</p><p>​修改数据源相关的配置：spring.datasource.xxx</p><p>​数据库连接池的配置，是自己容器中没有DataSource才自动配置的</p><p>​底层配置好的连接池是：HikariDataSource</p></li><li><p>DataSourceTransactionManagerAutoConfiguration： 事务管理器的自动配置</p></li><li><p>JdbcTemplateAutoConfiguration： <strong>JdbcTemplate的自动配置，可以来对数据库进行crud</strong></p><p>​可以修改spring.jdbc.xx来修改JdbcTemplate的配置</p><p>​容器中已经存在 JdbcTemplate组件，可直接赋值进行使用</p></li><li><p>JndiDataSourceAutoConfiguration： jndi的自动配置</p></li><li><p>XADataSourceAutoConfiguration： 分布式事务相关的</p></li></ul><h5 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/javaweb</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">4213</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot05WebAdminApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(<span class="hljs-string">&quot;select count(*) from account_tbl&quot;</span>, Long.class);<br>        log.info(<span class="hljs-string">&quot;记录总数：&#123;&#125;&quot;</span>,aLong);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用Druid数据源"><a href="#使用Druid数据源" class="headerlink" title="使用Druid数据源"></a>使用Druid数据源</h4><p><strong>引入druid-starter依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jdbc驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>分析自动配置</strong></p><ul><li><p>扩展配置项 spring.datasource.druid.xxx</p></li><li><p>DruidSpringAopConfiguration.class监控SpringBean的；配置项：spring.datasource.druid.aop-patterns</p></li><li><p>DruidStatViewServletConfiguration.class监控页的配置：spring.datasource.druid.stat-view-servlet；默认开启</p></li><li><p>DruidWebStatFilterConfiguration.class, web监控配置；spring.datasource.druid.web-stat-filter；默认开启</p></li><li><p>DruidFilterConfiguration.class}) 所有Druid自己filter的配置</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">FILTER_STAT_PREFIX = <span class="hljs-string">&quot;spring.datasource.druid.filter.stat&quot;</span>;<br>FILTER_CONFIG_PREFIX = <span class="hljs-string">&quot;spring.datasource.druid.filter.config&quot;</span>;<br>FILTER_ENCODING_PREFIX = <span class="hljs-string">&quot;spring.datasource.druid.filter.encoding&quot;</span>;<br>FILTER_SLF4J_PREFIX = <span class="hljs-string">&quot;spring.datasource.druid.filter.slf4j&quot;</span>;<br>FILTER_LOG4J_PREFIX = <span class="hljs-string">&quot;spring.datasource.druid.filter.log4j&quot;</span>;<br>FILTER_LOG4J2_PREFIX = <span class="hljs-string">&quot;spring.datasource.druid.filter.log4j2&quot;</span>;<br>FILTER_COMMONS_LOG_PREFIX = <span class="hljs-string">&quot;spring.datasource.druid.filter.commons-log&quot;</span>;<br>FILTER_WALL_PREFIX = <span class="hljs-string">&quot;spring.datasource.druid.filter.wall&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>配置示例</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/javaweb</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">aop-patterns:</span> <span class="hljs-string">com.zhq.admin.*</span>  <span class="hljs-comment">#监控SpringBean</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall</span>     <span class="hljs-comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span><br><br>      <span class="hljs-attr">stat-view-servlet:</span>   <span class="hljs-comment"># 配置监控页功能</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">resetEnable:</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-attr">web-stat-filter:</span>  <span class="hljs-comment"># 监控web</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">urlPattern:</span> <span class="hljs-string">/*</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span><br><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">stat:</span>    <span class="hljs-comment"># 对上面filters里面的stat的详细配置</span><br>          <span class="hljs-attr">slow-sql-millis:</span> <span class="hljs-number">1000</span><br>          <span class="hljs-attr">logSlowSql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">wall:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">config:</span><br>            <span class="hljs-attr">drop-table-allow:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>配置列表：<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8">https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8</a></p><h4 id="整合MyBatis操作"><a href="#整合MyBatis操作" class="headerlink" title="整合MyBatis操作"></a>整合MyBatis操作</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入mybaits依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="配置模式"><a href="#配置模式" class="headerlink" title="配置模式"></a>配置模式</h5><ul><li><p>全局配置文件mybatis-config.xml</p></li><li><p>SqlSessionFactory: 自动配置好了</p></li><li><p>SqlSession：自动配置了 SqlSessionTemplate 组合了SqlSession</p></li><li><p>Mapper： 只要我们写的操作MyBatis的接口标注了 @Mapper 就会被自动扫描进来</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#mybatis是根标签不写在spring标签的后边</span><br><span class="hljs-attr">mybatis:</span><br><span class="hljs-comment">#  config-location: classpath:mybatis/mybatis-config.xml</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br>  <span class="hljs-attr">configuration:</span> <span class="hljs-comment">#可以不写mybatis主配置文件，所有全局配置文件的配置放在configuration配置项中即可</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li><p>导入mybatis官方starter</p></li><li><p>编写mapper接口，标注 @Mapper注解</p></li><li><p>编写sql映射文件并绑定mapper接口</p></li><li><p>application.yaml中指定Mapper配置文件的位置，以及指定全局配置文件的信息 （建议配置在mybatis.configuration标签下）</p></li></ul><h5 id="注解模式"><a href="#注解模式" class="headerlink" title="注解模式"></a>注解模式</h5><p>直接创建接口使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CityMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from city where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> City <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br><span class="hljs-comment">//不写@Insert注解，也可以在mapper.xml文件中编写SQL语句</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(City city)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>最佳实战：</strong></p><ul><li><p>引入mybatis-starter</p></li><li><p><strong>配置application.yaml中，指定mapper-location位置即可</strong></p></li><li><p>编写Mapper接口并标注@Mapper注解</p></li><li><p>注解方式或编写mapper.xml进行绑定映射</p></li><li><p>在程序类上添加@MapperScan(“包名”) ，其他的mapper接口就可以不用标注@Mapper注解</p></li></ul><h4 id="整合-MyBatis-Plus"><a href="#整合-MyBatis-Plus" class="headerlink" title="整合 MyBatis-Plus"></a>整合 MyBatis-Plus</h4><p>官网地址：<a href="https://baomidou.com/">https://baomidou.com/</a></p><p>MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生</p><h5 id="整合MyBatis-Plus"><a href="#整合MyBatis-Plus" class="headerlink" title="整合MyBatis-Plus"></a>整合MyBatis-Plus</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入mybatis-plus依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>自动配置</p><ul><li><p>MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定。mybatis-plus.xxx 就是对mybatis-plus的定制</p></li><li><p>SqlSessionFactory 自动配置好。底层是容器中默认的数据源</p></li><li><p>mapperLocations 自动配置好的，默认值为classpath*:&#x2F;mapper&#x2F;**&#x2F;*.xml；<strong>任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件</strong>（ 建议以后sql映射文件，放在 mapper下）</p></li><li><p>容器中也自动配置好了 SqlSessionTemplate</p></li><li><p>@Mapper 标注的接口也会被自动扫描；可以直接 @MapperScan(“包名”) 批量扫描</p></li></ul><h5 id="CRUD功能"><a href="#CRUD功能" class="headerlink" title="CRUD功能"></a>CRUD功能</h5><p><strong>创建bean类，接收查询数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//若数据库表名和该类名不同，则使用@TableName()注解进行表名声明</span><br><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <br>    <span class="hljs-meta">@TableField(exist = flase)</span> <span class="hljs-comment">//声明该属性不是数据库字段</span><br>    <span class="hljs-keyword">private</span> String c;<br>    <br>    <span class="hljs-comment">//数据库字段</span><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span> <span class="hljs-comment">//设置id属性自动自增</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <br>    <span class="hljs-meta">@TableField(&quot;name&quot;)</span> <span class="hljs-comment">//数据库中的字段名是name</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#配置文件中定义全局配置</span><br><span class="hljs-attr">mybatis-plus:</span><br><span class="hljs-attr">global-config:</span><br><span class="hljs-attr">db-config:</span><br><span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tb_</span> <span class="hljs-comment">#设置所有表名的前缀</span><br><span class="hljs-attr">id-type:</span> <span class="hljs-string">AUTO</span> <span class="hljs-comment">#设置所有表的id自增</span><br><span class="hljs-attr">configuration:</span><br>   <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#设置不使用驼峰命名映射(若数据库中字段单词间不_分隔)</span><br>   <span class="hljs-attr">log-impl:</span>  <span class="hljs-comment">#控制台输出日志</span><br></code></pre></td></tr></table></figure><p><strong>创建mapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// BaseMapper类中封装了很多SQL语句功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt;&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>创建service接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//IService类中存在很多service方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>创建service实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ServiceImpl类中实现了很多service方法</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>创建controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pn&quot;,defaultValue = &quot;1&quot;)</span>Integer pn,</span><br><span class="hljs-params">                         RedirectAttributes ra)</span>&#123;<br><br>    userService.removeById(id);<br>    ra.addAttribute(<span class="hljs-string">&quot;pn&quot;</span>,pn);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/dynamic_table&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/dynamic_table&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dynamic_table</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value=&quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn,Model model)</span>&#123;<br><br>    <span class="hljs-comment">//构造分页参数</span><br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pn, <span class="hljs-number">2</span>);<br>    <span class="hljs-comment">//调用page进行分页</span><br>    Page&lt;User&gt; userPage = userService.page(page, <span class="hljs-literal">null</span>);<br>    model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,userPage);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;table/dynamic_table&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h5><p>条件构造器的条件：<a href="https://baomidou.com/pages/10c804/#abstractwrapper">https://baomidou.com/pages/10c804/#abstractwrapper</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrapper</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>    wrapper.gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>);<span class="hljs-comment">//年龄大于18</span><br>    wrapper.eq(<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;河北&quot;</span>);<span class="hljs-comment">//地址是河北</span><br>    userMapper.selectList(wrapper);<span class="hljs-comment">//查询数据，将where条件传入</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-comment">//1. 查询id和username字段</span><br>    queryWrapper.select(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-comment">//2. 查询id和username字段</span><br>    queryWrapper.select(User.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;TableFieldInfo&gt;()&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(TableFieldInfo tableFieldInfo)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;username&quot;</span>.equals(tableFieldInfo.getColumn());<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//3. 查询id和username字段</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br>    queryWrapper.select(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;TableFieldInfo&gt;()&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(TableFieldInfo tableFieldInfo)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;username&quot;</span>.equals(tableFieldInfo.getColumn());<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//3. 查询id和username字段</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br>    queryWrapper.select(tableFieldInfo-&gt;<span class="hljs-string">&quot;username&quot;</span>.equals(tableFieldInfo.getColumn()));<br>    <br>    userMapper.selectList(queryWrapper);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a>UpdateWrapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;&gt;();<br>    updateWrapper.gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>);<span class="hljs-comment">//年龄大于18</span><br>    updateWrapper.set(<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;河北&quot;</span>);<span class="hljs-comment">//插入地址是河北</span><br>    userMapper.update(<span class="hljs-literal">null</span>, updateWrapper);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>    queryWrapper.gt(User::getAge, <span class="hljs-number">18</span>);<span class="hljs-comment">//年龄大于18</span><br>    queryWrapper.eq(User::getAddress, <span class="hljs-string">&quot;河北&quot;</span>);<span class="hljs-comment">//地址是河北</span><br>    userMapper.selectList(wrapper);<span class="hljs-comment">//查询数据，将where条件传入</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="自定义条件构造器"><a href="#自定义条件构造器" class="headerlink" title="自定义条件构造器"></a>自定义条件构造器</h6><p>mapper接口中的方法添加Wrapper参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt;&#123;<br>    user <span class="hljs-title function_">findMyUserByWrapper</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;User&gt; wrapper)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在SQL语句中获取wrapper拼接的SQL片段进行拼接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findMyUserByWrapper&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zhq.domain.User&quot;</span>&gt;</span><br>    select username,password from $&#123;ew.customSqlSegment&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h5><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入mybatisplus代码生成器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>latest-generator-version<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--模板引擎--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试代码自动编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generate</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">AutoGenerator</span> <span class="hljs-variable">generator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoGenerator</span>();<br>    <span class="hljs-comment">//全局配置</span><br>    <span class="hljs-type">GlobalConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">projectPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>    <span class="hljs-comment">//设置输出目录</span><br>    config.setOutDir(projectPath+<span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>    config.setOpen(<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">//全局配置添加到generator上</span><br>    generator.setGlobalConfig(config);<br>    <span class="hljs-comment">//数据源配置</span><br>    <span class="hljs-type">DataSourceConfig</span> <span class="hljs-variable">dataSourceConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceConfig</span>();<br>    dataSourceConfig.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/javaweb?characterEncoding=utf-8&amp;serverTimezone=UTC&quot;</span>);<br>    dataSourceConfig.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>    dataSourceConfig.setPassword(<span class="hljs-string">&quot;4213&quot;</span>);<br>    <span class="hljs-comment">//数据源配合添加到generator上</span><br>    generator.setDataSource(dataSourceConfig);<br>    <span class="hljs-comment">//包配置，生成的代码放在哪个包下</span><br>    <span class="hljs-type">PackageConfig</span> <span class="hljs-variable">packageConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageConfig</span>();<br>    packageConfig.setParent(<span class="hljs-string">&quot;com.zhq&quot;</span>);<br>    <span class="hljs-comment">//包添加到generator上</span><br>    generator.setPackageInfo(packageConfig);<br>    <span class="hljs-comment">//策略配置</span><br>    <span class="hljs-type">StrategyConfig</span> <span class="hljs-variable">strategyConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyConfig</span>();<br>    <span class="hljs-comment">//下划线驼峰命名转换开启</span><br>    strategyConfig.setNaming(NamingStrategy.underline_to_camel);<br>    strategyConfig.setColumnNaming(NamingStrategy.underLine_to_camel);<br>    <span class="hljs-comment">//开启lombok</span><br>    strategyConfig.setEntityLombokModel(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//开启RestController</span><br>    strategyConfig.setRestControllerStyle(<span class="hljs-literal">true</span>);<br>    generator。setStrategy(strategyConfig);<br>    generator.setTemplateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerTemplateEngine</span>());<br>    <br>    <span class="hljs-comment">//开始生成</span><br>    generator.execute();<br>&#125; <br></code></pre></td></tr></table></figure><h5 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">flag</span> <span class="hljs-comment"># 全局逻辑删除的实体字段名</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值(默认为 1)</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值(默认为 0)</span><br></code></pre></td></tr></table></figure><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、<strong>缓存</strong>和消息中间件。 它支持多种类型的数据结构</p><h4 id="Redis自动配置"><a href="#Redis自动配置" class="headerlink" title="Redis自动配置"></a>Redis自动配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>自动配置：</p><ul><li><p>RedisAutoConfiguration 自动配置类。RedisProperties 属性类 –&gt; spring.redis.xxx是对redis的配置</p></li><li><p>连接工厂是准备好的。LettuceConnectionConfiguration、JedisConnectionConfiguration</p></li><li><p>自动注入了RedisTemplate&lt;Object, Object&gt; </p></li><li><p>自动注入了StringRedisTemplate；key:value都是String</p></li><li><p>底层只要我们使用 <strong>StringRedisTemplate</strong>、<strong>RedisTemplate</strong>就可以操作redis</p></li></ul><h4 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedis</span><span class="hljs-params">()</span>&#123;<br>    ValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();<br><br>    operations.set(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> operations.get(<span class="hljs-string">&quot;hello&quot;</span>);<br>    System.out.println(hello);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="jedis"><a href="#jedis" class="headerlink" title="jedis"></a>jedis</h4><p>切换使用jedis控制redis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">client-type:</span> <span class="hljs-string">jedis</span> <span class="hljs-comment">#切换jedis操作redis</span><br>      <span class="hljs-attr">jedis:</span><br>        <span class="hljs-attr">pool:</span><br>          <span class="hljs-attr">max-active:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="整合redis"><a href="#整合redis" class="headerlink" title="整合redis"></a>整合redis</h4><p><strong>在启动类上加注解 @EnableCaching</strong></p><p><strong>yaml配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-comment">#数据库连接</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/javaweb</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">4213</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br>  <span class="hljs-comment">## Redis 配置</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment">## Redis数据库索引（默认为0）</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment">## Redis服务器地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.197</span><span class="hljs-number">.130</span><br>    <span class="hljs-comment">## Redis服务器连接端口</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-comment">## Redis服务器连接密码（默认为空）</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">4213</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-comment">## 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class="hljs-comment">#spring.redis.pool.max-active=8</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment">## 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class="hljs-comment">#spring.redis.pool.max-wait=-1</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span><br>        <span class="hljs-comment">## 连接池中的最大空闲连接</span><br>        <span class="hljs-comment">#spring.redis.pool.max-idle=8</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment">## 连接池中的最小空闲连接</span><br>        <span class="hljs-comment">#spring.redis.pool.min-idle=0</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment">## 连接超时时间（毫秒）</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">1200</span><br><br>  <span class="hljs-comment">#将themilef的默认缓存禁用，热加载生效</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#设置不使用驼峰命名映射(若数据库中字段单词间不_分隔)</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  <span class="hljs-comment">#控制台输出日志</span><br><br><span class="hljs-comment">#打印sql时的语句</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.zhq.mapper:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><p><strong>实体类，实现Serializable，将实体类序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>配置序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123;<br><br>    <span class="hljs-comment">//采用RedisCacheManager作为缓存管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br><br>        <span class="hljs-comment">//使用时需要生成序列化版本号（Settings-Editor-Inspections-Serializable class without &#x27;serialVersionUID&#x27;），在domain实体类中点击类名Alt+Enter提示Add &#x27;serialVersionUID&#x27;</span><br>        <span class="hljs-comment">/*Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="hljs-comment">        //解决查询缓存转换异常的问题</span><br><span class="hljs-comment">        ObjectMapper om = new ObjectMapper();</span><br><span class="hljs-comment">        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span><br><span class="hljs-comment">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="hljs-comment">        jackson2JsonRedisSerializer.setObjectMapper(om);*/</span><br>        <br>        <span class="hljs-comment">//使用序列化为JSON，把类也序列化，不用生成序列化版本号</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">genericJackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br><br><br>        <span class="hljs-comment">// 配置序列化（解决乱码的问题）</span><br>        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig()<br>            <span class="hljs-comment">// 1天缓存过期</span><br>            .entryTtl(Duration.ofDays(<span class="hljs-number">1</span>))<br>            <span class="hljs-comment">//配置key使用String类型序列化</span><br>            .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>            <span class="hljs-comment">//配置value使用json类型序列化</span><br>            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(genericJackson2JsonRedisSerializer))<br>            .disableCachingNullValues();<br><br>        <span class="hljs-type">RedisCacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> RedisCacheManager.builder(factory) <span class="hljs-comment">//连接redis</span><br>            .cacheDefaults(config)  <span class="hljs-comment">//加载配置</span><br>            .build();<br><br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123;<br>    <span class="hljs-comment">//retemplate相关配置，配置retemplate方式序列化</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 配置连接工厂</span><br>        template.setConnectionFactory(factory);<br><br>        <span class="hljs-comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span><br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jacksonSeial</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span><br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        jacksonSeial.setObjectMapper(om);<br><br>        <span class="hljs-comment">// 值采用json序列化</span><br>        template.setValueSerializer(jacksonSeial);<br>        <span class="hljs-comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span><br>        template.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>        <span class="hljs-comment">// 设置hash key 和value序列化模式</span><br>        template.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        template.setHashValueSerializer(jacksonSeial);<br>        template.afterPropertiesSet();<br><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123; <br>    <span class="hljs-comment">//stringRedisTemplate相关配置</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(StringRedisTemplate.class)</span><br>    <span class="hljs-keyword">public</span> StringRedisTemplate <span class="hljs-title function_">stringRedisTemplate</span><span class="hljs-params">(</span><br><span class="hljs-params">        RedisConnectionFactory redisConnectionFactory)</span><br>        <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>        <span class="hljs-type">StringRedisTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisTemplate</span>();<br>        template.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h5><p><strong>添加缓存</strong></p><p>@Cacheable(value&#x3D; “user”, key &#x3D; “name”)：添加在方法上或类上（表示存储的key为user::name），先查询缓存若不存在，再查询数据库，并返回到缓存（cacheNames等同于value）</p><p>value和 key 都必须填，如果不填 key ，默认的 key 是当前的方法名，更新缓存时会因为方法名不同而更新失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Cacheable(cacheNames = &quot;product&quot;, key = &quot;product&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>更新缓存</strong><br>@CachePut(value&#x3D; “prodcut”, key &#x3D; “product”)，直接查询数据库，并返回到缓存</p><p>value和 key 要跟 @Cacheable注解里的一致，才会正确更新</p><p>@CachePut() 和 @Cacheable() 注解的方法返回值要一致</p><p><strong>删除缓存</strong><br>@CacheEvict(value&#x3D; “prodcut”, key &#x3D; “product”)，执行完这个方法之后会将 Redis 中对应的记录删除</p><p><strong>设置value</strong><br>@CacheConfig(cacheNames&#x3D; “product”) ，统一写在类上面，具体的方法上就不用写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheConfig(cacheNames = &quot;product&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BuyerOrderController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/cancel&quot;)</span><br><span class="hljs-meta">@CachePut(key = &quot;order&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(String openid)</span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Key 也可以动态设置为方法的参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/detail&quot;)</span><br><span class="hljs-meta">@Cacheable(value = &quot;prodcut&quot;, key = &quot;#openid&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detail</span><span class="hljs-params">(String openid)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>如果参数是个对象，也可以设置对象的某个属性为 key，比如其中一个参数是 user 对象，key 可以写成 key&#x3D;”#user.id”</p><p><strong>设置缓存时间</strong></p><p>@CacheExpire(expire &#x3D; 4000)</p><h5 id="RedisTemplate方式"><a href="#RedisTemplate方式" class="headerlink" title="RedisTemplate方式"></a>RedisTemplate方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userDao.queryAll();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取用户策略：先从缓存中获取用户，没有则取数据表中 数据，再将数据写入缓存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user_&quot;</span> + id;<br><br>        ValueOperations&lt;String, User&gt; operations = redisTemplate.opsForValue();<br><br>        <span class="hljs-comment">//判断redis中是否有键为key的缓存</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasKey</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(key);<br><br>        <span class="hljs-keyword">if</span> (hasKey) &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> operations.get(key);<br>            System.out.println(<span class="hljs-string">&quot;从缓存中获得数据：&quot;</span>+user.getUserName());<br>            System.out.println(<span class="hljs-string">&quot;------------------------------------&quot;</span>);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.findUserById(id);<br>            System.out.println(<span class="hljs-string">&quot;查询数据库获得数据：&quot;</span>+user.getUserName());<br>            System.out.println(<span class="hljs-string">&quot;------------------------------------&quot;</span>);<br><br>            <span class="hljs-comment">// 写入缓存</span><br>            operations.set(key, user, <span class="hljs-number">5</span>, TimeUnit.HOURS);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新用户策略：先更新数据表，成功之后，删除原来的缓存，再更新缓存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span> &#123;<br>        ValueOperations&lt;String, User&gt; operations = redisTemplate.opsForValue();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userDao.updateUser(user);<br>        <span class="hljs-keyword">if</span> (result != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user_&quot;</span> + user.getUid();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">haskey</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(key);<br>            <span class="hljs-keyword">if</span> (haskey) &#123;<br>                redisTemplate.delete(key);<br>                System.out.println(<span class="hljs-string">&quot;删除缓存中的key-----------&gt; &quot;</span> + key);<br>            &#125;<br>            <span class="hljs-comment">// 再将更新后的数据加入缓存</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">userNew</span> <span class="hljs-operator">=</span> userDao.findUserById(user.getUid());<br>            <span class="hljs-keyword">if</span> (userNew != <span class="hljs-literal">null</span>) &#123;<br>                operations.set(key, userNew, <span class="hljs-number">3</span>, TimeUnit.HOURS);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除用户策略：删除数据表中数据，然后删除缓存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userDao.deleteUserById(id);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user_&quot;</span> + id;<br>        <span class="hljs-keyword">if</span> (result != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">hasKey</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(key);<br>            <span class="hljs-keyword">if</span> (hasKey) &#123;<br>                redisTemplate.delete(key);<br>                System.out.println(<span class="hljs-string">&quot;删除了缓存中的key:&quot;</span> + key);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>在启动类上添加@EnableTransactionManagement注解声明事务管理器</strong></p><p><strong>给public方法添加注解@Transactional</strong></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//MultipartFile 自动封装上传过来的文件</span><br><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span>(!headerImg.isEmpty())&#123;<br>        <span class="hljs-comment">//保存到文件服务器，OSS服务器</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> headerImg.getOriginalFilename();<br>        headerImg.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;H:\\cache\\&quot;</span>+originalFilename));<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(photos.length &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span> (MultipartFile photo : photos) &#123;<br>            <span class="hljs-keyword">if</span>(!photo.isEmpty())&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br>                photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;H:\\cache\\&quot;</span>+originalFilename));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h4><ul><li><p>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射，templates或静态资源文件夹下&#x2F;error下的4xx，5xx页面会被自动解析</p></li><li><p>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。</p></li><li><p>对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</p><img src="/2022/04/01/SpringBoot2/image-20220402231836851.png" alt="image-20220402231836851" style="zoom:80%;"></li><li><p>要完全替换默认行为，可以实现 ErrorController 并注册该类型的Bean定义，或添加ErrorAttributes类型的组件以使用现有机制但替换其内容</p></li></ul><h4 id="定制错误处理逻辑"><a href="#定制错误处理逻辑" class="headerlink" title="定制错误处理逻辑"></a>定制错误处理逻辑</h4><ul><li><p>自定义错误页</p><p>​error&#x2F;404.html   error&#x2F;5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</p></li><li><p>在类上添加@ControllerAdvice注解表示异常类，在方法上添加@ExceptionHandler({异常.class})注解处理全局异常</p></li><li><p>自定义异常类，在类上添加@ResponseStatus(value&#x3D;异常类型, reason&#x3D;”错误原因”)然后需要的地方抛出异常</p></li><li><p>Spring底层的异常，如参数类型转换异常；<strong>DefaultHandlerExceptionResolver 处理框架底层的异常。</strong></p><p>​response.sendError(HttpServletResponse.<strong>SC_BAD_REQUEST</strong>, ex.getMessage()); </p></li><li><p>自定义类实现HandlerExceptionResolver接口并在类上添加@Component注解添加到容器中，在方法中使用response.sendError (错误码, “错误信息”);进行异常的定义，可以作为默认的全局异常处理规则</p><p>（可以使用@Order(value&#x3D;Orderd.HIGHEST_PRECEDENCE)设置优先）</p></li><li><p><strong>ErrorViewResolver</strong>  实现自定义处理异常；</p><p>​response.sendError ()，error请求就会转给controller</p><p>​你的异常没有任何人能处理，tomcat底层 response.sendError()，error请求就会转给controller</p><p>​<strong>basicErrorController 要去的页面地址是</strong> <strong>ErrorViewResolver</strong>  ；</p></li></ul><h2 id="模板引擎-Thymeleaf"><a href="#模板引擎-Thymeleaf" class="headerlink" title="模板引擎-Thymeleaf"></a>模板引擎-Thymeleaf</h2><p><strong>现代化、服务端Java模板引擎</strong></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>要在html页面引入模板引擎（<code>&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>）</p><p><strong>表达式</strong></p><table><thead><tr><th>表达式名字</th><th>语法</th><th>用途</th></tr></thead><tbody><tr><td>变量取值</td><td>${…}</td><td>获取请求域、session域、对象等值</td></tr><tr><td>选择变量</td><td>*{…}</td><td>获取上下文对象值中的属性，要在th:object&#x3D;”${对象}”里使用（使用div包裹）</td></tr><tr><td>消息</td><td>#{…}</td><td>获取国际化等值</td></tr><tr><td>链接</td><td>@{…}</td><td>生成链接：绝对路径，相对路径（&#x2F;开头），传参”@{&#x2F;user(id&#x3D;${id},age&#x3D;${age})}”</td></tr><tr><td>片段表达式</td><td>~{…}</td><td>jsp:include 作用，引入公共页面片段</td></tr></tbody></table><p><strong>字面量</strong></p><p>文本值: ‘one text’ , ‘Another one!’…</p><p>数字: 0, 34, 12.3 ,…</p><p>布尔值: true , false</p><p>空值: null</p><p>变量： one，two，…. 变量不能有空格</p><p><strong>文本操作</strong></p><p>字符串拼接: +</p><p> 字符串拼接: |name是 ${name}|</p><p><strong>数学运算</strong></p><p>运算符: + , - , * , &#x2F; , %</p><p><strong>布尔运算</strong></p><p>运算符:  and, or</p><p>一元运算: !, not</p><p><strong>比较运算</strong></p><p>比较: &gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; ( gt , lt , ge , le )</p><p>等式: &#x3D;&#x3D; , !&#x3D; ( eq , ne ) </p><p><strong>条件运算</strong></p><p>If-then: (条件) ? (true)</p><p>If-then-else: (条件) ? (结果true) : (结果false)</p><p>Default: (value) ?: (defaultvalue) </p><p><strong>特殊操作</strong></p><p>无操作： _</p><h3 id="设置属性值th-attr"><a href="#设置属性值th-attr" class="headerlink" title="设置属性值th:attr"></a>设置属性值th:attr</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/gtvglogo.png&quot;</span>  <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>可以直接使用th:属性名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;zhq&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Subscribe!&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;#&#123;subscribe.submit&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;subscribe.html&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/subscribe&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>所有h5兼容的标签写法</strong></p><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes</a></p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">遍历list，Array数组直接是属性$&#123;user.id&#125;<br>遍历map遍历key$&#123;map.key&#125;，遍历value$&#123;map.value.id&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;prod, stats : $&#123;prods&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;stats.count&#125;&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--行内获取数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>[[$&#123;prod.price&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>可以在javascript中使用，要在script声明th:inline=&quot;javascript&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">th:if=true会执行<br>th:unless=false会执行<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;comments.html&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;</span>&gt;</span>view<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:switch</span>=<span class="hljs-string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;&#x27;admin&#x27;&quot;</span>&gt;</span>结果admin<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;#&#123;roles.manager&#125;&quot;</span>&gt;</span>结果manager<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>默认结果<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h3><img src="/2022/04/01/SpringBoot2/image-20220402231932244.png" alt="image-20220402231932244" style="zoom: 80%;"><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>#request：HttpServletRequest对象</p><p>#session(session)：HttpSession对象</p><p>#dates：Date对象</p><p>#calendars：Calendar对象，和Date对象类似</p><p>#numbers：格式化数字对象</p><p>#strings：字符串对象</p><p>#objects：对object操作</p><p>#bools：对布尔值请求</p><p>#arrays：数组</p><p>#lists：list集合</p><p>#sets：set集合</p><p>#maps：map集合</p><p>#aggregates：对数组或集合创建聚合</p><p>处理null值，在${user?}，在取值后加?，表示若不为空则取出</p><h3 id="抽取公共页面"><a href="#抽取公共页面" class="headerlink" title="抽取公共页面"></a>抽取公共页面</h3><p>使用fragment：在公共页面中将公共部分使用<code>&lt;footer th:fragment=&quot;名称&quot;&gt;&lt;/footer&gt;</code>包裹起来</p><p>​在其他页面使用<code>&lt;div th:insert=&quot;公共页面名称 :: 公共页面中包裹的内容名称&quot;&gt;</code></p><p>也可以使用id：公共页面：<code>&lt;footer id=&quot;id值&quot;&gt;&lt;/footer&gt;</code>其他页面：<code>&lt;div th:insert=&quot;公共页面名称 :: #id值&quot;&gt;</code></p><p><strong>insert</strong>：将footer插入到该div内部</p><p><strong>replace</strong>：将footer完整替换该div</p><p><strong>include</strong>：将footer的内容（去掉footer标签）放到div内部</p><h3 id="thymeleaf使用"><a href="#thymeleaf使用" class="headerlink" title="thymeleaf使用"></a>thymeleaf使用</h3><h4 id="引入Starter"><a href="#引入Starter" class="headerlink" title="引入Starter"></a>引入Starter</h4><p>要在html页面的上边添加xmlns:th&#x3D;”<a href="http://www.thymeleaf.org&quot;,引入模板引擎(`/">http://www.thymeleaf.org&quot;，引入模板引擎（`</a><html lang="en" xmlns:th="http://www.thymeleaf.org">&#96;）</html></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入Thymeleaf模板引擎的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//制定了页面放置到类路径下的templates目录下，是.html文件的默认规则，并且不能通过地址直接访问，必须通过controller处理后跳转</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="页面开发"><a href="#页面开发" class="headerlink" title="页面开发"></a>页面开发</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--页面引入Thymeleaf的规则--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><h4 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h4><p><strong>定义实体类并实现序列化接口</strong></p><p><strong>定义服务的接口</strong></p><p><strong>导出接口和实现类为一个jar文件，提供给服务提供者</strong></p><h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p><strong>引入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入dubbo依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入zookeeper依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--服务接口的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zhq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>invokeService<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>在主程序中使用@EnableDubbo注解，开启基于注解的Dubbo功能</strong></p><p><strong>定义服务的接口的实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现dubbo中的service注解，暴露服务</span><br><span class="hljs-meta">@DubboService(interfaceClass = invokeService.class, version = &quot;1.0.0&quot;, timeout = 5000)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">userServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">invokeService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryService</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(username);<br>        user.setPassword(<span class="hljs-string">&quot;1234&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义dubbo配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment">#声明服务名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">provide</span><br>  <span class="hljs-comment">#声明注册中心</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">loaclhost:2181</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">zookeeper</span><br>  <span class="hljs-comment">#声明使用的协议和端口</span><br>  <span class="hljs-attr">protocol:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">20880</span><br></code></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p><strong>引入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入dubbo依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--服务接口的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zhq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>invokeService<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>定义服务接口类，对远程获取远程服务对象并进行操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokeServiceImpl</span> &#123;<br><br>    <span class="hljs-meta">@DubboReference(interfaceClass = InvokeService.class, version = &quot;1.0.0&quot;)</span><br>    <span class="hljs-keyword">private</span> InvokeService invokeService;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">query</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> InvokeService.queryService(<span class="hljs-string">&quot;狗子&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义Dubbo配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment">#声明服务名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">provide</span><br>  <span class="hljs-comment">#声明注册中心</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">loaclhost:2181</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">zookeeper</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">100000</span><br>  <span class="hljs-attr">config-center:</span>            <span class="hljs-comment">#超时时间只设置也不生效</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">100000</span><br></code></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入单元测试场景依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpringBoot2.4之后默认不支持Junit4版本，如果需要继续兼容Junit4需要自行引入vintage</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入vintage依赖，兼容Junit4--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hamcrest<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hamcrest-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="JUnit5常用注解"><a href="#JUnit5常用注解" class="headerlink" title="JUnit5常用注解"></a>JUnit5常用注解</h3><p>​<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p><ul><li><strong>@SpringBootTest：</strong>在测试类上，表示使用SpringBoot测试驱动</li><li>**@Test :**表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li>**@ParameterizedTest :**表示方法是参数化测试</li><li>**@RepeatedTest(n) :**表示方法可重复执行n次</li><li>**@DisplayName(“名称”) :**为测试类或者测试方法设置展示名称</li><li>**@BeforeEach :**表示在每个单元测试之前执行</li><li>**@AfterEach :**表示在每个单元测试之后执行</li><li>**@BeforeAll :**表示在所有单元测试之前执行</li><li>**@AfterAll :**表示在所有单元测试之后执行</li><li>**@Tag :**表示单元测试类别，类似于JUnit4中的@Categories</li><li>**@Disabled :**表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li><li>**@Timeout(value &#x3D; 时间(毫秒), unit &#x3D; TimeUnit.MILLISECONDS) :**表示测试方法运行如果超过了指定时间将会返回错误</li><li>**@ExtendWith :**为测试类或测试方法提供扩展类引用</li></ul><h3 id="断言（assertions）"><a href="#断言（assertions）" class="headerlink" title="断言（assertions）"></a>断言（assertions）</h3><p>断言是测试方法中的核心部分，用来对测试需要满足的条件进行验证，都是Assertions中的静态方法</p><p>检查业务逻辑返回的数据是否合理</p><p>所有的测试运行结束以后，会有一个详细的测试报告</p><h4 id="简单断言"><a href="#简单断言" class="headerlink" title="简单断言"></a>简单断言</h4><p>用来对单个值进行简单的验证</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;simple assertion&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">simple</span><span class="hljs-params">()</span> &#123;<br>    assertEquals(<span class="hljs-number">3</span>, <span class="hljs-number">1</span> + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;simple math&quot;</span>);<br>    assertNotEquals(<span class="hljs-number">3</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1</span>);<br><br>    assertNotSame(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    assertSame(obj, obj);<br><br>    assertFalse(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>);<br>    assertTrue(<span class="hljs-number">1</span> &lt; <span class="hljs-number">2</span>);<br><br>    assertNull(<span class="hljs-literal">null</span>);<br>    assertNotNull(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数组断言"><a href="#数组断言" class="headerlink" title="数组断言"></a>数组断言</h4><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;array assertion&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">array</span><span class="hljs-params">()</span> &#123;<br>    assertArrayEquals(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组合断言"><a href="#组合断言" class="headerlink" title="组合断言"></a>组合断言</h4><p>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;assert all&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">all</span><span class="hljs-params">()</span> &#123;<br>    assertAll(<span class="hljs-string">&quot;Math&quot;</span>,<br>              () -&gt; assertEquals(<span class="hljs-number">2</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1</span>),<br>              () -&gt; assertTrue(<span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br>             );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="异常断言"><a href="#异常断言" class="headerlink" title="异常断言"></a>异常断言</h4><p>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule<strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式</strong>Assertions.assertThrows()** ,配合函数式编程就可以进行使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;异常测试&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exceptionTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ArithmeticException</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> Assertions.assertThrows(<br>        <span class="hljs-comment">//扔出断言异常</span><br>        ArithmeticException.class, () -&gt; System.out.println(<span class="hljs-number">1</span> % <span class="hljs-number">0</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="超时断言"><a href="#超时断言" class="headerlink" title="超时断言"></a>超时断言</h4><p>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;超时测试&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">timeoutTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//如果测试方法时间超过1s将会异常</span><br>    Assertions.assertTimeout(Duration.ofMillis(<span class="hljs-number">1000</span>), () -&gt; Thread.sleep(<span class="hljs-number">500</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h4><p>通过 fail 方法直接使得测试失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;fail&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFail</span><span class="hljs-params">()</span> &#123;<br>    fail(<span class="hljs-string">&quot;This should fail&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="前置条件（assumptions）"><a href="#前置条件（assumptions）" class="headerlink" title="前置条件（assumptions）"></a>前置条件（assumptions）</h3><p>JUnit 5 中的前置条件类似于断言，不同之处在于不满足的断言会使得测试方法失败，而不满足的前置条件只会使得测试方法的执行终止。</p><p>前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DisplayName(&quot;前置条件&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssumptionsTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DEV&quot;</span>;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;simple&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">simpleAssume</span><span class="hljs-params">()</span> &#123;<br>        assumeTrue(Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;DEV&quot;</span>));<br>        assumeFalse(() -&gt; Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;PROD&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;assume then do&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">assumeThenDo</span><span class="hljs-params">()</span> &#123;<br>        assumingThat(<br>            Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;DEV&quot;</span>),<br>            () -&gt; System.out.println(<span class="hljs-string">&quot;In DEV&quot;</span>)<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。</p><p>assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p><h3 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h3><p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试</p><p>在内部类中可以使用@BeforeEach 和@AfterEach 注解</p><p>内层的可以驱动外层Test，外层的不能驱动内层Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DisplayName(&quot;A stack&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestingAStackDemo</span> &#123;<br><br>    Stack&lt;Object&gt; stack;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">isInstantiatedWithNew</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Nested</span><br>    <span class="hljs-meta">@DisplayName(&quot;when new&quot;)</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhenNew</span> &#123;<br><br>        <span class="hljs-meta">@BeforeEach</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNewStack</span><span class="hljs-params">()</span> &#123;<br>            stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;is empty&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            assertTrue(stack.isEmpty());<br>        &#125;<br><br>        <span class="hljs-meta">@Nested</span><br>        <span class="hljs-meta">@DisplayName(&quot;after pushing an element&quot;)</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">AfterPushing</span> &#123;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">anElement</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;an element&quot;</span>;<br><br>            <span class="hljs-meta">@BeforeEach</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushAnElement</span><span class="hljs-params">()</span> &#123;<br>                stack.push(anElement);<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;it is no longer empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">isNotEmpty</span><span class="hljs-params">()</span> &#123;<br>                assertFalse(stack.isEmpty());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h3><p>参数化测试使得用不同的参数多次运行测试，测试方法不使用@Test，使用**@ParameterizedTest**表示参数测试</p><p><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</p><p><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</p><p><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</p><p><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</p><p><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p><p>只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterizedTest1</span><span class="hljs-params">(String string)</span> &#123;<br>    System.out.println(string);<br>    Assertions.assertTrue(StringUtils.isNotBlank(string));<br>&#125;<br><br><br><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@MethodSource(&quot;method&quot;)</span>    <span class="hljs-comment">//指定方法名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWithExplicitLocalMethodSource</span><span class="hljs-params">(String name)</span> &#123;<br>    System.out.println(name);<br>    Assertions.assertNotNull(name);<br>&#125;<br><span class="hljs-keyword">static</span> Stream&lt;String&gt; <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Stream.of(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a>迁移指南</h3><p>在进行迁移的时候需要注意如下的变化：</p><ul><li><p>注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。</p></li><li><p>把@Before 和@After 替换成@BeforeEach 和@AfterEach。</p></li><li><p>把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。</p></li><li><p>把@Ignore 替换成@Disabled。</p></li><li><p>把@Category 替换成@Tag。</p></li><li><p>把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。</p></li></ul><h2 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h2><h3 id="SpringBoot-Actuator"><a href="#SpringBoot-Actuator" class="headerlink" title="SpringBoot Actuator"></a>SpringBoot Actuator</h3><h4 id="1-x与2-x的不同"><a href="#1-x与2-x的不同" class="headerlink" title="1.x与2.x的不同"></a>1.x与2.x的不同</h4><img src="/2022/04/01/SpringBoot2/image-20220402231955684.png" alt="image-20220402231955684" style="zoom:80%;"><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><ul><li><p>引入场景</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>访问 <a href="http://localhost:8080/actuator/">http://localhost:8080/actuator/</a></p></li><li><p>暴露所有监控信息为HTTP</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#暴露所有端点信息</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span>  <span class="hljs-comment">#以web方式暴露</span><br></code></pre></td></tr></table></figure><h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><p><a href="https://github.com/codecentric/spring-boot-admin">https://github.com/codecentric/spring-boot-admin</a></p><h3 id="Actuator-Endpoint"><a href="#Actuator-Endpoint" class="headerlink" title="Actuator Endpoint"></a>Actuator Endpoint</h3><h4 id="最常使用的端点"><a href="#最常使用的端点" class="headerlink" title="最常使用的端点"></a>最常使用的端点</h4><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td></tr><tr><td><code>beans</code></td><td>显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td><code>caches</code></td><td>暴露可用的缓存。</td></tr><tr><td><code>conditions</code></td><td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td></tr><tr><td><code>configprops</code></td><td>显示所有<code>@ConfigurationProperties</code>。</td></tr><tr><td><code>env</code></td><td>暴露Spring的属性<code>ConfigurableEnvironment</code></td></tr><tr><td><code>flyway</code></td><td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td></tr><tr><td><code>health</code></td><td>显示应用程序运行状况信息。</td></tr><tr><td><code>httptrace</code></td><td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td></tr><tr><td><code>info</code></td><td>显示应用程序信息。</td></tr><tr><td><code>integrationgraph</code></td><td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td></tr><tr><td><code>loggers</code></td><td>显示和修改应用程序中日志的配置。</td></tr><tr><td><code>liquibase</code></td><td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td></tr><tr><td><code>metrics</code></td><td>显示当前应用程序的“指标”信息。</td></tr><tr><td><code>mappings</code></td><td>显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td><code>scheduledtasks</code></td><td>显示应用程序中的计划任务。</td></tr><tr><td><code>sessions</code></td><td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td></tr><tr><td><code>shutdown</code></td><td>使应用程序正常关闭。默认禁用。</td></tr><tr><td><code>startup</code></td><td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td></tr><tr><td><code>threaddump</code></td><td>执行线程转储。</td></tr></tbody></table><p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>heapdump</code></td><td>返回<code>hprof</code>堆转储文件。</td></tr><tr><td><code>jolokia</code></td><td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td></tr><tr><td><code>logfile</code></td><td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td></tr><tr><td><code>prometheus</code></td><td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td></tr></tbody></table><p>最常用的Endpoint</p><ul><li><p><strong>Health：监控状况</strong></p></li><li><p><strong>Metrics：运行时指标</strong></p></li><li><p><strong>Loggers：日志记录</strong></p></li></ul><h4 id="管理Endpoints"><a href="#管理Endpoints" class="headerlink" title="管理Endpoints"></a>管理Endpoints</h4><h5 id="开启与禁用Endpoints"><a href="#开启与禁用Endpoints" class="headerlink" title="开启与禁用Endpoints"></a>开启与禁用Endpoints</h5><ul><li>默认所有的Endpoint除过shutdown都是开启的。</li><li>需要开启或者禁用某个Endpoint，或者禁用所有的Endpoint然后手动开启指定的Endpoint</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">#禁用所有的Endpoint</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">beans:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="暴露Endpoints"><a href="#暴露Endpoints" class="headerlink" title="暴露Endpoints"></a>暴露Endpoints</h5><p>支持的暴露方式</p><ul><li><p>HTTP：默认只暴露health和info</p></li><li><p>JMX：默认暴露所有Endpoint</p></li><li><p>除health和info，剩下的Endpoint都应该进行保护访问。如果引入SpringSecurity，则默认配置安全访问规则</p></li></ul><h3 id="定制-Endpoint"><a href="#定制-Endpoint" class="headerlink" title="定制 Endpoint"></a>定制 Endpoint</h3><h4 id="定制-Health-信息"><a href="#定制-Health-信息" class="headerlink" title="定制 Health 信息"></a>定制 Health 信息</h4><p>设置显示health的详细信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span> <span class="hljs-comment">#总是显示详细信息。可显示每个模块的状态信息</span><br></code></pre></td></tr></table></figure><p>自定义health的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComHealthIndicator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHealthIndicator</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHealthCheck</span><span class="hljs-params">(Health.Builder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 检查完成</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-comment">//builder.up(); //健康</span><br>            builder.status(Status.UP);<br>            map.put(<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">1</span>);<br>            map.put(<span class="hljs-string">&quot;ms&quot;</span>,<span class="hljs-number">100</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//builder.down();</span><br>            builder.status(Status.OUT_OF_SERVICE);<br>            map.put(<span class="hljs-string">&quot;err&quot;</span>,<span class="hljs-string">&quot;连接超时&quot;</span>);<br>            map.put(<span class="hljs-string">&quot;ms&quot;</span>,<span class="hljs-number">3000</span>);<br>        &#125;<br><br>        builder.withDetail(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">100</span>)<br>            .withDetails(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="定制info信息"><a href="#定制info信息" class="headerlink" title="定制info信息"></a>定制info信息</h4><h5 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">appName:</span> <span class="hljs-string">boot-admin</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">2.0</span><span class="hljs-number">.1</span><br>  <span class="hljs-attr">mavenProjectName:</span> <span class="hljs-string">@project.artifactId@</span>  <span class="hljs-comment">#使用@@可以获取maven的pom文件值</span><br>  <span class="hljs-attr">mavenProjectVersion:</span> <span class="hljs-string">@project.version@</span><br></code></pre></td></tr></table></figure><h5 id="编写InfoContributor"><a href="#编写InfoContributor" class="headerlink" title="编写InfoContributor"></a>编写InfoContributor</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleInfoContributor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InfoContributor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contribute</span><span class="hljs-params">(Info.Builder builder)</span> &#123;<br>        builder.withDetail(<span class="hljs-string">&quot;example&quot;</span>,<br>                           Collections.singletonMap(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="http://localhost:8080/actuator/info">http://localhost:8080/actuator/info</a> 会输出以上方式返回的所有info信息</p><h4 id="定制Metrics信息"><a href="#定制Metrics信息" class="headerlink" title="定制Metrics信息"></a>定制Metrics信息</h4><p><strong>SpringBoot支持自动适配的Metrics</strong></p><h5 id="增加定制Metrics"><a href="#增加定制Metrics" class="headerlink" title="增加定制Metrics"></a>增加定制Metrics</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>MeterBinder <span class="hljs-title function_">queueSize</span><span class="hljs-params">(Queue queue)</span> &#123;<br>    <span class="hljs-keyword">return</span> (registry) -&gt; Gauge.builder(<span class="hljs-string">&quot;queueSize&quot;</span>, queue::size).register(registry);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="定制Endpoint"><a href="#定制Endpoint" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Endpoint(id = &quot;端点名&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DockerEndpoint</span> &#123;<br><br>    <span class="hljs-meta">@ReadOperation</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">getDockerInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.singletonMap(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;docker started...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@WriteOperation</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restartDocker</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;docker restarted....&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h2><h3 id="starter启动原理"><a href="#starter启动原理" class="headerlink" title="starter启动原理"></a>starter启动原理</h3><ul><li><p>starter-pom引入 autoconfigurer 包                    <img src="/2022/04/01/SpringBoot2/image-20220402232013898.png" alt="image-20220402232013898" style="zoom:67%;"></p></li><li><p>autoconfigure包中配置使用 META-INF&#x2F;spring.factories 中 EnableAutoConfiguration 的值，使得项目启动加载指定的自动配置类</p></li><li><p>编写自动配置类 xxxAutoConfiguration -&gt; xxxxProperties</p></li><li><ul><li>@Configuration</li><li>@Conditional</li><li>@EnableConfigurationProperties</li><li>@Bean</li></ul></li></ul><h2 id="开发小技巧"><a href="#开发小技巧" class="headerlink" title="开发小技巧"></a>开发小技巧</h2><h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><p>简化JavaBean开发，在编译时生成set、get、toSting、构造器方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--idea中安装lombok插件--&gt;</span><br><span class="hljs-comment">&lt;!--导入lombok依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--表示lombok只参与代码编译工作，打包时不将该jar进行打包--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@NoArgsConstructor：生成无参构造器</span><br><span class="hljs-comment">//@AllArgsConstructor：生成全参构造器</span><br><span class="hljs-comment">//@Data：生成get、set方法</span><br><span class="hljs-comment">//@ToString：重写toString方法</span><br><span class="hljs-comment">//@EqualsAndHashCode：重写equals和hashcode方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Slf4j：在控制台打印日志</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle01</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;请求进来了....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dev-tools"><a href="#dev-tools" class="headerlink" title="dev-tools"></a>dev-tools</h3><p>项目或者页面修改以后：Ctrl+F9自动编译屏幕所显示的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入dev-tools依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Spring-Assistant（项目初始化向导）"><a href="#Spring-Assistant（项目初始化向导）" class="headerlink" title="Spring Assistant（项目初始化向导）"></a>Spring Assistant（项目初始化向导）</h3><p>安装Spring Assistant插件</p><p>创建新项目时Spring Assistant创建，选择选择我们需要的开发场景</p><p>默认使用<a href="https://start.spring.io,使用国内地址创建http//start.springboot.io">https://start.spring.io，使用国内地址创建http://start.springboot.io</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus</title>
    <link href="/2022/03/30/MyBatisPlus/"/>
    <url>/2022/03/30/MyBatisPlus/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h1><p><strong>MyBatis-Plus</strong>(简称 MP)是一个 <strong>MyBatis的增强工具</strong>，在 MyBatis 的基础上<strong>只做增强不做改变</strong>，为 <strong>简化开发、提高效率而生</strong></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--MyBatis-plus启动器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 配置数据源信息</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># 配置连接数据库信息</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">4213</span><br>    <br><span class="hljs-comment"># 加入日志功能</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><p>在Spring Boot启动类中添加@MapperScan注解，扫描mapper包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">// 扫描mapper接口所在的包</span><br><span class="hljs-meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MybatisplusApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加实体"><a href="#添加实体" class="headerlink" title="添加实体"></a>添加实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加mapper"><a href="#添加mapper" class="headerlink" title="添加mapper"></a>添加mapper</h3><p><strong>BaseMapper</strong>是MyBatis-Plus提供的模板mapper，其中包含了基本的CRUD方法，泛型为操作的实体类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：IDEA在 userMapper 处报错，因为找不到注入的对象，因为类是动态创建的，但是程序可以正确的执行</p><p>为了避免报错，可以在mapper接口上添加 <strong>@Repository</strong> 注解</p><h2 id="基本CRUD"><a href="#基本CRUD" class="headerlink" title="基本CRUD"></a>基本CRUD</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setName(<span class="hljs-string">&quot;张三&quot;</span>;);<br>user.setAg(<span class="hljs-number">20</span>);<br>user.setEmail(<span class="hljs-string">&quot;zhangsan@atguigu.com&quot;</span>;);<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insert(user);<br></code></pre></td></tr></table></figure><p>MyBatis-Plus在实现插入数据时，<strong>会默认基于雪花算法的策略生成id</strong></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="根据id删除用户信息"><a href="#根据id删除用户信息" class="headerlink" title="根据id删除用户信息"></a>根据id删除用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.deleteById(<span class="hljs-number">1L</span>);  <br></code></pre></td></tr></table></figure><h4 id="根据多个id删除多个用户信息"><a href="#根据多个id删除多个用户信息" class="headerlink" title="根据多个id删除多个用户信息"></a>根据多个id删除多个用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Long&gt; idList = Arrays.asList(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">3L</span>); <br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.deleteBatchIds(idList); <br></code></pre></td></tr></table></figure><h4 id="通过map条件删除记录"><a href="#通过map条件删除记录" class="headerlink" title="通过map条件删除记录"></a>通过map条件删除记录</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(); map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">23</span>); <br>map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>); <br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.deleteByMap(map); <br></code></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setId(<span class="hljs-number">1</span>);<br>user.setName(<span class="hljs-string">&quot;李四&quot;</span>;);<br>user.setEmail(<span class="hljs-string">&quot;lisi@atguigu.com&quot;</span>;);<br>userMapper.updateById(user);<br></code></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="根据id查询用户信息"><a href="#根据id查询用户信息" class="headerlink" title="根据id查询用户信息"></a>根据id查询用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br></code></pre></td></tr></table></figure><h4 id="根据多个id查询多个用户信息"><a href="#根据多个id查询多个用户信息" class="headerlink" title="根据多个id查询多个用户信息"></a>根据多个id查询多个用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Long&gt; list = Arrays.asList(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">3L</span>);<br>List&lt;User&gt; users = userMapper.selectBatchIds(list);<br></code></pre></td></tr></table></figure><h4 id="通过map条件查询用户信息"><a href="#通过map条件查询用户信息" class="headerlink" title="通过map条件查询用户信息"></a>通过map条件查询用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>);<br>List&lt;User&gt; users = userMapper.selectByMap(map);<br></code></pre></td></tr></table></figure><h4 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>Wrapper类型的形参为条件构造器，<strong>可针对于SQL语句设置不同的条件，若没有条件，则可以为该形参赋值null，即查询（删除&#x2F;修改）所有数据</strong></p><h3 id="自定义功能"><a href="#自定义功能" class="headerlink" title="自定义功能"></a>自定义功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 根据id查询用户信息为map集合 **/</span><br>Map&lt;String,Object&gt; <span class="hljs-title function_">selectMapById</span><span class="hljs-params">(Long id)</span>;<br><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConsumer</span><span class="hljs-params">()</span> &#123;<br>    Map&lt;String, Object&gt; map = userMapper.selectMapById(<span class="hljs-number">1L</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String,Object&gt; selectMapById(Long id);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectMapById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select id,name,age,email from t_user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="通用Service"><a href="#通用Service" class="headerlink" title="通用Service"></a>通用Service</h2><p>MyBatis-Plus中有一个<strong>接口 IService</strong>和<strong>其实现类 ServiceImpl</strong>，<strong>封装了常见的业务层逻辑</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserService继承IService模板提供的基础功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   ServiceImpl实现了IService，提供了IService中基础功能的实现</span><br><span class="hljs-comment">   若ServiceImpl无法满足业务需求，则可以使用自定的UserService定义方法，</span><br><span class="hljs-comment">   并在实现类中实现</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h3><p>实体类名和表名不一致时：</p><ol><li><p>在实体类类型上添加**@TableName(“t_user”)**，标识实体类对应的表</p></li><li><p>使用<strong>MyBatis-Plus提供的全局配置</strong>，为实体类所对应的表名设置默认的前缀</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-comment"># 设置MyBatis-Plus的全局配置</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-comment"># 设置实体类所对应的表的统一前缀</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">t_</span><br></code></pre></td></tr></table></figure><h3 id="Tableld"><a href="#Tableld" class="headerlink" title="@Tableld"></a>@Tableld</h3><p>默认将id作为主键列，并在插入数据时默认基于雪花算法的策略生成id</p><p><strong>表中的主键不是id：</strong></p><p>​在实体类的属性上通过@TableId将其标识为主键</p><p><strong>value属性：</strong></p><p>​指定表中的主键字段，@TableId(value&#x3D;”uid”)</p><p><strong>type属性：</strong></p><p>​type属性用来定义主键策略</p><img src="/2022/03/30/MyBatisPlus/image-20220402230148907.png" alt="image-20220402230148907" style="zoom:80%;"><p><strong>配置全局主键策略：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-comment"># 设置MyBatis-Plus的全局配置</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-comment"># 设置统一的主键生成策略</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span><br></code></pre></td></tr></table></figure><h3 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h3><p>MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格 </p><p>@TableField(“username”)设置属性所对应的字段名</p><h3 id="TableLogic"><a href="#TableLogic" class="headerlink" title="@TableLogic"></a>@TableLogic</h3><p><strong>逻辑删除</strong>：将对应数据中代表是否被删除字段的状态修改为“被删除状态”，在数据库中仍旧能看到此条数据记录</p><p>实现逻辑删除：</p><p>​数据库中创建逻辑删除状态列，设置默认值为0</p><p>​实体类中添加逻辑删除属性</p><h2 id="条件构造器和常用接口"><a href="#条件构造器和常用接口" class="headerlink" title="条件构造器和常用接口"></a>条件构造器和常用接口</h2><h3 id="wrapper"><a href="#wrapper" class="headerlink" title="wrapper"></a>wrapper</h3><img src="/2022/03/30/MyBatisPlus/image-20220402230200934.png" alt="image-20220402230200934" style="zoom:80%;"><p>Wrapper ： <strong>条件构造抽象类</strong></p><p>​AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件 </p><p>​QueryWrapper ： 查询条件封装 </p><p>​UpdateWrapper ： Update 条件封装 </p><p>​AbstractLambdaWrapper ： 使用Lambda 语法 </p><p>​LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper </p><p>​LambdaUpdateWrapper ： Lambda 更新封装Wrapper</p><h3 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h3><h4 id="组装查询条件"><a href="#组装查询条件" class="headerlink" title="组装查询条件"></a>组装查询条件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 查询用户包含a,年龄在20到30之间，邮箱信息不为null的用户信息 **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user</span><br><span class="hljs-comment">        WHERE is_deleted=0 AND (user_name LIKE ?</span><br><span class="hljs-comment">        AND age BETWEEN ? AND ? AND email IS NOT NULL)</span><br><span class="hljs-comment">     */</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.like(<span class="hljs-string">&quot;user_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>            .between(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br>            .isNotNull(<span class="hljs-string">&quot;email&quot;</span>);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组装排序条件"><a href="#组装排序条件" class="headerlink" title="组装排序条件"></a>组装排序条件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 组装排序条件 查询用户信息，按照年龄的降序排序，若年龄相同，则按照id升序排序 **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user</span><br><span class="hljs-comment">        WHERE is_deleted=0 ORDER BY age DESC,uid ASC</span><br><span class="hljs-comment">     */</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.orderByDesc(<span class="hljs-string">&quot;age&quot;</span>)<br>            .orderByAsc(<span class="hljs-string">&quot;uid&quot;</span>);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组装删除条件"><a href="#组装删除条件" class="headerlink" title="组装删除条件"></a>组装删除条件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 组装删除条件 删除邮箱地址为null的用户信息 **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        UPDATE t_user SET is_deleted=1 WHERE is_deleted=0 AND (email IS NOT NULL)</span><br><span class="hljs-comment">     */</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.isNull(<span class="hljs-string">&quot;email&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.delete(queryWrapper);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="条件的优先级"><a href="#条件的优先级" class="headerlink" title="条件的优先级"></a>条件的优先级</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/** 组装修改条件  将(年龄大于20并且用户名中包含有a)或邮箱为null的用户信息修改 **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        UPDATE t_user SET user_name=?, email=?</span><br><span class="hljs-comment">        WHERE is_deleted=0 AND (age &gt; ? AND user_name LIKE ? OR email IS NOT NULL)</span><br><span class="hljs-comment">     */</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>)<br>            .like(<span class="hljs-string">&quot;user_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>            .or()<br>            .isNotNull(<span class="hljs-string">&quot;email&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setName(<span class="hljs-string">&quot;小明&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;test@atguigu.com&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.update(user, queryWrapper);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>&#125;<br><br><span class="hljs-comment">/** 条件优先级  将用户名中包含a并且(年龄大于20或邮箱为null)的用户信息修改 **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// lambda中条件优先级</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        UPDATE t_user SET user_name=?, email=?</span><br><span class="hljs-comment">        WHERE is_deleted=0 AND (user_name LIKE ? AND (age &gt; ? OR email IS NULL))</span><br><span class="hljs-comment">     */</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.like(<span class="hljs-string">&quot;user_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>            .and(i -&gt; i.gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>).or().isNull(<span class="hljs-string">&quot;email&quot;</span>));<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setName(<span class="hljs-string">&quot;小红&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;test@atguigu.com&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.update(user, queryWrapper);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组装select子句"><a href="#组装select子句" class="headerlink" title="组装select子句"></a>组装select子句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 组装select字句 查询用户名的用户名、年龄、邮箱信息 **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test06</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        SELECT user_name,age,email FROM t_user WHERE is_deleted=0</span><br><span class="hljs-comment">     */</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.select(<span class="hljs-string">&quot;user_name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>);<br>    List&lt;Map&lt;String, Object&gt;&gt; users = userMapper.selectMaps(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现子查询"><a href="#实现子查询" class="headerlink" title="实现子查询"></a>实现子查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 组装子查询 查询id小于100的用户信息**/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test07</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user</span><br><span class="hljs-comment">        WHERE is_deleted=0 AND (uid IN (select uid from t_user where uid &lt;= 100))</span><br><span class="hljs-comment">     */</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.inSql(<span class="hljs-string">&quot;uid&quot;</span>, <span class="hljs-string">&quot;select uid from t_user where uid &lt;= 100&quot;</span>);<br>    List&lt;User&gt; list = userMapper.selectList(queryWrapper);<br>    list.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a>UpdateWrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 使用UpdateWrapper实现修改功能 将用户名中包含a并且(年龄大于20或邮箱为null)的用户信息修改 **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test08</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        UPDATE t_user SET user_name=?,email=?</span><br><span class="hljs-comment">        WHERE is_deleted=0 AND (user_name LIKE ? AND (age &gt; ? OR email IS NULL))</span><br><span class="hljs-comment">     */</span><br>    UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;&gt;();<br>    updateWrapper.like(<span class="hljs-string">&quot;user_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>            .and(i -&gt; i.gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>).or().isNull(<span class="hljs-string">&quot;email&quot;</span>));<br>    updateWrapper.set(<span class="hljs-string">&quot;user_name&quot;</span>, <span class="hljs-string">&quot;小黑&quot;</span>).set(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;abc@atguigu.com&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.update(<span class="hljs-literal">null</span>, updateWrapper);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p><strong>而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件</strong>，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 使用condition组装条件 **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user</span><br><span class="hljs-comment">        WHERE is_deleted=0 AND (user_name LIKE ? AND age &lt;= ?)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">ageBegin</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">ageEnd</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.like(StringUtils.isNotBlank(username), <span class="hljs-string">&quot;user_name&quot;</span>, username)<br>            .gt(ageBegin != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;age&quot;</span>, ageBegin)<br>            .le(ageEnd != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;age&quot;</span>, ageEnd);<br>    List&lt;User&gt; list = userMapper.selectList(queryWrapper);<br>    list.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LambdaQueryWrapper"><a href="#LambdaQueryWrapper" class="headerlink" title="LambdaQueryWrapper"></a>LambdaQueryWrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** LambdaQueryWrapper **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user</span><br><span class="hljs-comment">        WHERE is_deleted=0 AND (user_name LIKE ? AND age &lt;= ?)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">ageBegin</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">ageEnd</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>    <span class="hljs-comment">//组装set子句</span><br>    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-comment">//避免使用字符串表示字段，防止运行时错误</span><br>    queryWrapper.like(StringUtils.isNotBlank(username), User::getName, username)<br>            .gt(ageBegin != <span class="hljs-literal">null</span>, User::getAge, ageBegin)<br>            .le(ageEnd != <span class="hljs-literal">null</span>, User::getAge, ageEnd);<br>    List&lt;User&gt; list = userMapper.selectList(queryWrapper);<br>    list.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LambdaUpdateWrapper"><a href="#LambdaUpdateWrapper" class="headerlink" title="LambdaUpdateWrapper"></a>LambdaUpdateWrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** LambdaUpdateWrapper **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test12</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        UPDATE t_user SET user_name=?,email=?</span><br><span class="hljs-comment">        WHERE is_deleted=0 AND (user_name LIKE ? AND (age &gt; ? OR email IS NULL))</span><br><span class="hljs-comment">     */</span><br>    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateWrapper</span>&lt;&gt;();<br>    updateWrapper.like(User::getName, <span class="hljs-string">&quot;a&quot;</span>)<br>            <span class="hljs-comment">//lambda表达式内的逻辑优先运算</span><br>            .and(i -&gt; i.gt(User::getAge, <span class="hljs-number">20</span>).or().isNull(User::getEmail)); <br>    updateWrapper.set(User::getName, <span class="hljs-string">&quot;小黑&quot;</span>).set(User::getEmail, <span class="hljs-string">&quot;abc@atguigu.com&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.update(<span class="hljs-literal">null</span>, updateWrapper);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><h4 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.H2));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置        useDeprecatedExecutor = false 避免缓存出现问题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ConfigurationCustomizer <span class="hljs-title function_">configurationCustomizer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> configuration -&gt; configuration.setUseDeprecatedExecutor(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ProductMapper productMapper;<br><br><span class="hljs-comment">/** MyBatis-Plus分页插件的配置和使用和分页相关数据的获取 **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user</span><br><span class="hljs-comment">        WHERE is_deleted=0 LIMIT ?</span><br><span class="hljs-comment">     */</span><br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    userMapper.selectPage(page, <span class="hljs-literal">null</span>);<br>    System.out.println( page.getRecords());<br>    System.out.println(<span class="hljs-string">&quot;总页数:&quot;</span>  + page.getPages());<br>    System.out.println(<span class="hljs-string">&quot;总记录数&quot;</span> + page.getTotal());<br>    System.out.println(<span class="hljs-string">&quot;是否有上一页&quot;</span> + page.hasNext());<br>    System.out.println(<span class="hljs-string">&quot;是否有下一页:&quot;</span> + page.hasPrevious());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="xml自定义分页"><a href="#xml自定义分页" class="headerlink" title="xml自定义分页"></a>xml自定义分页</h3><h4 id="UserMapper中定义接口方法"><a href="#UserMapper中定义接口方法" class="headerlink" title="UserMapper中定义接口方法"></a>UserMapper中定义接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据年龄查询用户列表，分页显示</span><br><span class="hljs-comment">* page分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位</span><br><span class="hljs-comment">*/</span><br>Page&lt;User&gt; <span class="hljs-title function_">selectPageVo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="hljs-meta">@Param(&quot;age&quot;)</span> Integer age)</span>;<br></code></pre></td></tr></table></figure><h4 id="UserMapper-xml中编写SQL"><a href="#UserMapper-xml中编写SQL" class="headerlink" title="UserMapper.xml中编写SQL"></a>UserMapper.xml中编写SQL</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;selectPageVo&quot;</span> resultType=<span class="hljs-string">&quot;User&quot;</span>&gt;<br>    select uid as `id`,user_name as `name`,age,email from t_user where age &gt; #&#123;age&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectPageVo</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//设置分页参数</span><br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>); <br>    userMapper.selectPageVo(page, <span class="hljs-number">20</span>);<br>    <span class="hljs-comment">//获取分页数据</span><br>    List&lt;User&gt; list = page.getRecords(); <br>    list.forEach(System.out::println); <br>    System.out.println(<span class="hljs-string">&quot;当前页:&quot;</span>+page.getCurrent()); <br>    System.out.println(<span class="hljs-string">&quot;每页显示的条数:&quot;</span>+page.getSize()); <br>    System.out.println(<span class="hljs-string">&quot;总记录数:&quot;</span>+page.getTotal()); <br>    System.out.println(<span class="hljs-string">&quot;总页数:&quot;</span>+page.getPages()); <br>    System.out.println(<span class="hljs-string">&quot;是否有上一页:&quot;</span>+page.hasPrevious()); <br>    System.out.println(<span class="hljs-string">&quot;是否有下一页:&quot;</span>+page.hasNext());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><h4 id="乐观锁实现流程"><a href="#乐观锁实现流程" class="headerlink" title="乐观锁实现流程"></a>乐观锁实现流程</h4><p>数据库中添加version字段</p><p>取出记录时，获取当前version</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id,`name`,price,`version` <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>更新时，version + 1，如果where语句中的version版本不对，则更新失败</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> product <span class="hljs-keyword">SET</span> price<span class="hljs-operator">=</span>price<span class="hljs-operator">+</span><span class="hljs-number">50</span>, `version`<span class="hljs-operator">=</span>`version` <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span><br>`version`<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="MyBatis-Plus实现乐观锁"><a href="#MyBatis-Plus实现乐观锁" class="headerlink" title="MyBatis-Plus实现乐观锁"></a>MyBatis-Plus实现乐观锁</h4><h5 id="修改实体类"><a href="#修改实体类" class="headerlink" title="修改实体类"></a>修改实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-meta">@Version</span> <span class="hljs-comment">// 设置乐观锁版本号字段</span><br>    <span class="hljs-keyword">private</span> Integer version;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="添加乐观锁插件配置"><a href="#添加乐观锁插件配置" class="headerlink" title="添加乐观锁插件配置"></a>添加乐观锁插件配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">myBatisPlusConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">// 添加乐观锁插件</span><br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInnerInterceptor</span>());<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="通过枚举"><a href="#通过枚举" class="headerlink" title="通过枚举"></a>通过枚举</h2><h3 id="创建通过枚举类型"><a href="#创建通过枚举类型" class="headerlink" title="创建通过枚举类型"></a>创建通过枚举类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> <span class="hljs-comment">// 因为枚举里面都是常量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SexEnum</span> &#123;<br>    MALE(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;男&quot;</span>),<br>    FEMALE(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;女&quot;</span>);<br><br>    <span class="hljs-meta">@EnumValue</span> <span class="hljs-comment">// 将注解所标识的属性的值存储到数据库中</span><br>    <span class="hljs-keyword">private</span> Integer sex;<br>    <span class="hljs-keyword">private</span> String sexName;<br><br>    SexEnum(Integer sex, String sexName) &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.sexName = sexName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置扫描通过枚举"><a href="#配置扫描通过枚举" class="headerlink" title="配置扫描通过枚举"></a>配置扫描通过枚举</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-comment"># 配置类型别名所对应的包</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.atguigu.mybatisplus.pojo</span><br>  <span class="hljs-comment"># 扫描枚举的包</span><br>  <span class="hljs-attr">type-enums-package:</span> <span class="hljs-string">com.atguigu.mybatisplus.enums</span><br></code></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisPlusEnumTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;admin&quot;</span>);<br>        user.setAge(<span class="hljs-number">33</span>);<br>        user.setSex(SexEnum.MALE);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insert(user);<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="快速生成"><a href="#快速生成" class="headerlink" title="快速生成"></a>快速生成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastAutoGeneratorTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 设置我们需要创建在哪的路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        FastAutoGenerator.create(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;4213&quot;</span>)<br>                .globalConfig(builder -&gt; &#123;<br>                    builder.author(<span class="hljs-string">&quot;zhq&quot;</span>) <span class="hljs-comment">// 设置作者</span><br>                    <span class="hljs-comment">// .enableSwagger() // 开启 swagger 模式</span><br>                    .fileOverride() <span class="hljs-comment">// 覆盖已生成文件</span><br>                    .outputDir(path); <span class="hljs-comment">// 指定输出目录</span><br>                &#125;)<br>                .packageConfig(builder -&gt; &#123;<br>                    builder.parent(<span class="hljs-string">&quot;com.zhq&quot;</span>) <span class="hljs-comment">// 设置父包名</span><br>                            .moduleName(<span class="hljs-string">&quot;mybatisplus&quot;</span>) <span class="hljs-comment">// 设置父包模块名</span><br>                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, path)); <span class="hljs-comment">// 设置mapperXml生成路径</span><br>                &#125;)<br>                .strategyConfig(builder -&gt; &#123;<br>                    builder.addInclude(<span class="hljs-string">&quot;t_user&quot;</span>) <span class="hljs-comment">// 设置需要生成的表名</span><br>                            .addTablePrefix(<span class="hljs-string">&quot;t_&quot;</span>, <span class="hljs-string">&quot;c_&quot;</span>); <span class="hljs-comment">// 设置过滤表前缀</span><br>                &#125;).templateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerTemplateEngine</span>()) <span class="hljs-comment">// 使用Freemarker 引擎模板，默认的是Velocity引擎模板</span><br>                .execute();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h2><p>适用于多种场景:纯粹多库、 读写分离、 一主多从、 混合模式等</p><h3 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--多数据源依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># 配置数据源信息 datasource:</span><br>    <span class="hljs-attr">dynamic:</span><br>    <span class="hljs-comment"># 设置默认的数据源或者数据源组,默认值即为master</span><br>      <span class="hljs-attr">primary:</span> <span class="hljs-string">master</span><br>      <span class="hljs-comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span><br>      <span class="hljs-attr">strict:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">datasource:</span><br>        <span class="hljs-attr">master:</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-number">4213</span><br>        <span class="hljs-attr">slave_1:</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis_plus_1?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-number">4213</span><br></code></pre></td></tr></table></figure><h3 id="创建用户service"><a href="#创建用户service" class="headerlink" title="创建用户service"></a>创建用户service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@DS(&quot;master&quot;)</span> <span class="hljs-comment">// 指定所操作的数据源</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建商品service"><a href="#创建商品service" class="headerlink" title="创建商品service"></a>创建商品service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Product&gt; &#123;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@DS(&quot;slave_1&quot;)</span> <span class="hljs-comment">// 要操作的数据源</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ProductMapper, Product&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusDatasourceApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductService productService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(userService.getById(<span class="hljs-number">1L</span>));<br>        System.out.println(productService.getById(<span class="hljs-number">1L</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MyBatisX插件"><a href="#MyBatisX插件" class="headerlink" title="MyBatisX插件"></a>MyBatisX插件</h2><img src="/2022/03/30/MyBatisPlus/1646303427004-512acd2e-f903-4f9f-a23b-342497382389.png" alt="img" style="zoom:50%;"><img src="/2022/03/30/MyBatisPlus/1646303471018-0b3f3e51-7b09-48db-a789-9798bcd70063.png" alt="img" style="zoom: 25%;"><img src="/2022/03/30/MyBatisPlus/1646303486690-5b0c7599-10b3-49eb-a8f8-c36ed19750ef.png" alt="img" style="zoom: 25%;">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2022/03/29/RabbitMQ/"/>
    <url>/2022/03/29/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="MQ-的相关概念"><a href="#MQ-的相关概念" class="headerlink" title="MQ 的相关概念"></a>MQ 的相关概念</h2><h3 id="什么是-MQ"><a href="#什么是-MQ" class="headerlink" title="什么是 MQ"></a>什么是 MQ</h3><p>MQ (message queue)，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是 message 而已，还是一种跨进程的通信机制，用于上下游传递消息</p><h3 id="MQ优点"><a href="#MQ优点" class="headerlink" title="MQ优点"></a>MQ优点</h3><p>流量消峰、应用解耦、异步处理</p><h3 id="MQ-的分类"><a href="#MQ-的分类" class="headerlink" title="MQ 的分类"></a>MQ 的分类</h3><h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><p>优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，较低的概率丢失数据</p><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><p>优点：性能卓越，单机写入 TPS 约在百万条 &#x2F; 秒，吞吐量高。时效性 ms 级，可用性非常高，kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用，消费者采用 Pull 方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次；有优秀的第三方 Kafka Web 管理界面 Kafka-Manager；在日志领域比较成熟，被多家公司和多个开源项目使用；功能支持：功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</p><h4 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h4><p>优点：单机吞吐量十万级，可用性非常高，分布式架构，消息可以做到 0 丢失，MQ 功能较为完善，还是分布式的，扩展性好，支持 10 亿级别的消息堆积，不会因为堆积导致性能下降</p><h4 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>优点：由于 erlang 语言的高并发特性，性能较好；吞吐量到万级，MQ 功能比较完备，健壮、稳定、易用、跨平台、支持多种语言。如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用，社区活跃度高；更新频率相当高</p><h2 id="RabbitMQ-2"><a href="#RabbitMQ-2" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="RabbitMQ-的概念"><a href="#RabbitMQ-的概念" class="headerlink" title="RabbitMQ 的概念"></a>RabbitMQ 的概念</h3><p>RabbitMQ 是一个消息中间件，它接受并转发消息， RabbitMQ 是 一个快递站，一个快递员帮你传递快件</p><p>RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收，存储和转发消息数据</p><h3 id="四大核心概念"><a href="#四大核心概念" class="headerlink" title="四大核心概念"></a>四大核心概念</h3><p><strong>生产者</strong>：产生数据发送消息的程序</p><p><strong>交换机</strong>：一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p><p><strong>队列</strong>：队列是 RabbitMQ 内部使用的一种数据结构，消息只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据</p><p><strong>消费者</strong>：大多时候是一个等待接收消息的程序</p><p><strong>Broker</strong>：接收和分发消息的应用，RabbitMQ Server 就是 Message Broker</p><p><strong>Virtual host</strong>：出于多用户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个 vhost，每个用户在自己的 vhost 创建 exchange／queue 等</p><p><strong>Connection</strong>：publisher／consumer 和 broker 之间的 TCP 连接</p><p><strong>Channel</strong>：Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</p><p><strong>Exchange</strong>：message 到达 Broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)</p><p><strong>Queue</strong>：消息最终被送到这里等待 consumer 取走</p><p><strong>Binding</strong>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>上传到 &#x2F;usr&#x2F;local&#x2F;software 目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install erlang  <span class="hljs-comment">#安装Erlang语言环境</span><br>yum install socat -y<br>rpm -ivh rabbitmq-server-3.8.1-1.el8.noarch.rpm<br></code></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动服务</span><br>systemctl start rabbitmq-server<br><span class="hljs-comment"># 查看服务状态</span><br>systemctl status rabbitmq-server<br><span class="hljs-comment"># 开机自启动</span><br>systemctl <span class="hljs-built_in">enable</span> rabbitmq-server<br><span class="hljs-comment"># 停止服务</span><br>systemctl stop rabbitmq-server<br><span class="hljs-comment"># 重启服务</span><br>systemctl restart rabbitmq-server<br></code></pre></td></tr></table></figure><h3 id="Web-管理界面及授权操作"><a href="#Web-管理界面及授权操作" class="headerlink" title="Web 管理界面及授权操作"></a>Web 管理界面及授权操作</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>默认情况下，是没有安装 web 端的客户端插件，需要安装才可以生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure><p>访问 <a href="http://192.168.197.130:15672/">http://192.168.197.130:15672</a> ，用默认账号密码 (guest) 登录，出现权限问题。默认情况只能在 localhost 本机下访问，所以需要添加一个远程登录的用户</p><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建账号和密码</span><br>rabbitmqctl add_user root 4213<br><span class="hljs-comment"># 设置用户角色</span><br>rabbitmqctl set_user_tags root administrator<br><span class="hljs-comment"># 为用户添加资源权限</span><br><span class="hljs-comment"># set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;read&gt;</span><br><span class="hljs-comment"># 添加配置、写、读权限</span><br>rabbitmqctl set_permissions -p <span class="hljs-string">&quot;/&quot;</span> root <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span><br><br><span class="hljs-comment">#启动web</span><br>rabbitmqctl start_app<br><span class="hljs-comment">#关闭web应用</span><br>rabbitmqctl stop_app<br><span class="hljs-comment">#清除</span><br>rabbitmqctl reset<br></code></pre></td></tr></table></figure><h5 id="用户级别"><a href="#用户级别" class="headerlink" title="用户级别"></a>用户级别</h5><p><strong>administrator</strong>：可以登录控制台、查看所有信息、可以对 rabbitmq 进行管理</p><p><strong>monitoring</strong>：监控者 登录控制台，查看所有信息</p><p><strong>policymaker</strong>：策略制定者 登录控制台，指定策略</p><p><strong>managment</strong>：普通管理员 登录控制台</p><h2 id="Hello-World（简单模式）"><a href="#Hello-World（简单模式）" class="headerlink" title="Hello World（简单模式）"></a>Hello World（简单模式）</h2><p>需要开启 5672 端口</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--rabbitmq客户端--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--操作文件流--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建一个连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;192.168.197.130&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;4213&quot;</span>);<br>        <span class="hljs-comment">//channel 实现了自动 close 接口 自动关闭 不需要显示关闭</span><br>        <span class="hljs-comment">//创建连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-comment">//获取信道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         生成一个队列:</span><br><span class="hljs-comment">            1.队列名称</span><br><span class="hljs-comment">            2.队列里面的消息是否持久化 是否用完就删除</span><br><span class="hljs-comment">            3.该队列是否只供一个消费者进行消费  是否进行共享  true可以多个消费者消费</span><br><span class="hljs-comment">            4.是否自动删除 最后一个消费者断开连接以后该队列是否自动删除  true自动删除</span><br><span class="hljs-comment">            5.其他参数</span><br><span class="hljs-comment">        */</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         发送一个消息:</span><br><span class="hljs-comment">             1.发送到那个交换机</span><br><span class="hljs-comment">             2.路由的 key 是哪个</span><br><span class="hljs-comment">             3.其他的参数信息</span><br><span class="hljs-comment">             4.发送消息的消息体</span><br><span class="hljs-comment">        */</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-literal">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;消息发送完毕&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><p>获取 “生产者” 发出的消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;192.168.197.130&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;4213&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">//推送的消息如何进行消费的接口回调</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody());<br>            System.out.println(message);<br>        &#125;;<br>        <span class="hljs-comment">//取消消费的一个回调接口</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> (consumerTag) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息消费被中断&quot;</span>);<br>        &#125;;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         消费者消费消息 - 接受消息</span><br><span class="hljs-comment">             1.消费哪个队列</span><br><span class="hljs-comment">             2.消费成功之后是否要自动应答   true代表自动应答  false手动应答</span><br><span class="hljs-comment">             3.消费者成功消费的回调</span><br><span class="hljs-comment">             4.消息被取消时的回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(QUEUE_NAME, <span class="hljs-literal">true</span>, deliverCallback, cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Work-Queues（工作模式）"><a href="#Work-Queues（工作模式）" class="headerlink" title="Work Queues（工作模式）"></a>Work Queues（工作模式）</h2><p>工作队列 (又称任务队列) 的主要思想是避免立即执行资源密集型任务，而不得不等待它完成</p><p>任务封装为消息并将其发送到队列，在后台运行的工作进程将弹出任务并最终执行作业,当有多个工作线程时，这些工作线程将一起处理这些任务</p><h3 id="轮训分发消息"><a href="#轮训分发消息" class="headerlink" title="轮训分发消息"></a>轮训分发消息</h3><p>一个消息只能被处理一次，不能被处理多次，多个线程轮流处理消息</p><h4 id="抽取工具类"><a href="#抽取工具类" class="headerlink" title="抽取工具类"></a>抽取工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMqUtils</span> &#123;<br>    <span class="hljs-comment">//得到一个连接的 channel</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Channel <span class="hljs-title function_">getChannel</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建一个连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;192.168.197.130&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;4213&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-keyword">return</span> channel;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="工作线程"><a href="#工作线程" class="headerlink" title="工作线程"></a>工作线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker01</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//消息接受</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">receivedMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody());<br>            System.out.println(<span class="hljs-string">&quot;接收到消息:&quot;</span> + receivedMessage);<br>        &#125;;<br>        <span class="hljs-comment">//消息被取消</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> (consumerTag) -&gt; &#123;<br>            System.out.println(consumerTag + <span class="hljs-string">&quot;消费者取消消费接口回调逻辑&quot;</span>);<br><br>        &#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;C1 消费者启动等待消费.................. &quot;</span>);<br>        channel.basicConsume(QUEUE_NAME, <span class="hljs-literal">true</span>, deliverCallback, cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>选中 Allow multiple instances，可以实现多线程（启动多次）</p><h4 id="一个生产者"><a href="#一个生产者" class="headerlink" title="一个生产者"></a>一个生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (scanner.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> scanner.next();<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-literal">null</span>, message.getBytes());<br>            System.out.println(<span class="hljs-string">&quot;消息发送完成：&quot;</span> + message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不公平分发"><a href="#不公平分发" class="headerlink" title="不公平分发"></a>不公平分发</h3><p>为了避免处理速度快的消费者很大一部分时间处于空闲状态，而处理慢的消费者一直在干活的情况，在消费者中消费之前，我们可以设置参数 channel.basicQos(1);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不公平分发</span><br><span class="hljs-type">int</span> <span class="hljs-variable">prefetchCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>channel.basicQos(prefetchCount);<br></code></pre></td></tr></table></figure><h3 id="预取值分发"><a href="#预取值分发" class="headerlink" title="预取值分发"></a>预取值分发</h3><p>消息的发送是异步发送的，channel 上肯定不止只有一个消息，消费者的手动确认本质上也是异步的。因此就存在一个未确认的消息缓冲区，开发人员能限制此缓冲区的大小以避免缓冲区里面无限制的未确认消息问题，可以通过使用 channel.basicQos(值)方法设 置 “预取计数” 值来完成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置预取值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">prefetchCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>channel.basicQos(prefetchCount);<br></code></pre></td></tr></table></figure><p>该值定义通道上允许的未确认消息的最大数量。一旦数量达到配置的数量， RabbitMQ 将停止在通道上传递更多消息，除非至少有一个未处理的消息被确认</p><h2 id="消息应答"><a href="#消息应答" class="headerlink" title="消息应答"></a>消息应答</h2><p>RabbitMQ 一旦向消费者传递了一条消息，便立即将该消息标记为删除</p><p>为了保证消息在发送过程中不丢失，引入消息应答机制</p><p>消息应答：消费者在接收到消息并且处理该消息之后，告诉RabbitMQ已经处理，RabbitMQ可以把该消息删除</p><h3 id="自动应答"><a href="#自动应答" class="headerlink" title="自动应答"></a>自动应答</h3><p>消息发送后立即被认为已经传送成功</p><p>需要在高吞吐量和数据传输安全性方面做权衡，因为这种模式如果消息在接收到之前，消费者那边出现连接或者 channel 关闭，那么消息就丢失了</p><p>消费者那边可以传递过载的消息，没有对传递的消息数量进行限制，有可能使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，使得内存耗尽，最终这些消费者线程被操作系统杀死</p><h3 id="手动应答"><a href="#手动应答" class="headerlink" title="手动应答"></a>手动应答</h3><p><strong>Channel.basicAck</strong> (用于肯定确认)：RabbitMQ 已知道该消息成功被处理，可以将其丢弃</p><p>Channel.basicReject (用于否定确认)：不处理该消息了直接拒绝，可以将其丢弃（<strong>Channel.basicNack</strong>不能批量处理）</p><h4 id="消息手动应答代码"><a href="#消息手动应答代码" class="headerlink" title="消息手动应答代码"></a>消息手动应答代码</h4><p>默认消息采用的是自动应答，所以我们要想实现消息消费过程中不丢失，需要把自动应答改为手动应答</p><p>消费者在deliverCallback中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>消费者 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Work03</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TASK_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ack_queue&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody());<br>          <br>            System.out.println(<span class="hljs-string">&quot;接收到消息:&quot;</span> + message);<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             消息手动应答</span><br><span class="hljs-comment">             1.消息标记 tag</span><br><span class="hljs-comment">                 2.是否批量应答未应答消息</span><br><span class="hljs-comment">     */</span><br>            channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>        &#125;;<br><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> (s) -&gt; &#123;<br>            System.out.println(s + <span class="hljs-string">&quot;消费者取消消费接口回调逻辑&quot;</span>);<br>        &#125;;<br><br>        <span class="hljs-comment">//采用手动应答false</span><br>        channel.basicConsume(TASK_QUEUE_NAME, <span class="hljs-literal">false</span>, deliverCallback, cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消息自动重新入队"><a href="#消息自动重新入队" class="headerlink" title="消息自动重新入队"></a>消息自动重新入队</h3><p>消费者由于某些原因失去连接 (其通道，连接已关闭或 TCP 连接丢失)，导致消息未发送 ACK 确认，RabbitMQ 将了解到消息未完全处理，并将对其重新排队。如果此时其他消费者可以处理，会很快将其重新分发给另一个消费者</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>默认情况下 RabbitMQ 退出或由于某种原因崩溃时，它忽视队列和消息，为确保消息不会丢失需要将队列和消息都标记为持久化</p><h3 id="队列持久化"><a href="#队列持久化" class="headerlink" title="队列持久化"></a>队列持久化</h3><p>队列非持久化rabbitmq 如果重启，该队列就会被删除掉</p><p>要队列实现持久化需要在声明队列的时候把 durable 参数设置为持久化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//让队列持久化</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">durable</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//声明队列</span><br>channel.queueDeclare(TASK_QUEUE_NAME, durable, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p>消息生产者中MessageProperties.PERSISTENT_TEXT_PLAIN 添加这个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());<br></code></pre></td></tr></table></figure><p>将消息标记为持久化并不能完全保证不会丢失消息，依然存在当消息刚准备存储在磁盘的时候，消息还在缓存的一个间隔点</p><h2 id="发布确认模式"><a href="#发布确认模式" class="headerlink" title="发布确认模式"></a>发布确认模式</h2><h3 id="发布确认逻辑"><a href="#发布确认逻辑" class="headerlink" title="发布确认逻辑"></a>发布确认逻辑</h3><p>开启发布确认在该信道上面发布的消息都将会被指派一个唯一的 ID (从 1 开始)，一旦消息被投递到所有匹配的队列之后，broker 就会发送一个确认给生产者 (包含消息的唯一 ID)，这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker 回传给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置 basic.ack 的 multiple 域，表示到这个序列号之前的所有消息都已经得到了处理</p><p>confirm 模式最大的好处在于它是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果 RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 nack 消息， 生产者应用程序同样可以在回调方法中处理该 nack 消息</p><h3 id="发布确认的策略"><a href="#发布确认的策略" class="headerlink" title="发布确认的策略"></a>发布确认的策略</h3><p>发布确认默认是没有开启的，需要在生产者中调用方法 confirmSelect开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//开启发布确认</span><br>channel.confirmSelect();<br></code></pre></td></tr></table></figure><h3 id="单个确认发布"><a href="#单个确认发布" class="headerlink" title="单个确认发布"></a>单个确认发布</h3><p>同步确认发布方式，发布一个消息只有它被确认发布，后续的消息才能继续发布，waitForConfirmsOrDie(long) 方法只有在消息被确认的时候才返回，如果在指定时间范围内这个消息没有被确认那么它将抛出异常</p><p>缺点：发布速度特别的慢，因为如果没有确认发布的消息就会阻塞所有后续消息的发布</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishMessageIndividually</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>    <span class="hljs-comment">//队列声明</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    channel.queueDeclare(queueName, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//开启发布确认</span><br>    channel.confirmSelect();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> i + <span class="hljs-string">&quot;&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, queueName, <span class="hljs-literal">null</span>, message.getBytes());<br>        <span class="hljs-comment">//服务端返回 false 或超时时间内未返回，生产者可以消息重发</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> channel.waitForConfirms();<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息发送成功&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="批量确认发布"><a href="#批量确认发布" class="headerlink" title="批量确认发布"></a>批量确认发布</h3><p>先发布一批消息然后一起确认</p><p>缺点：当发生故障导致发布出现问题时，不知道是哪个消息出问题了，我们必须将整个批处理保存在内存中，以记录重要的信息而后重新发布消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishMessageBatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>    <span class="hljs-comment">//队列声明</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    channel.queueDeclare(queueName, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//开启发布确认</span><br>    channel.confirmSelect();<br>    <span class="hljs-comment">//批量确认消息大小</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">batchSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//未确认消息个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">outstandingMessageCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> i + <span class="hljs-string">&quot;&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, queueName, <span class="hljs-literal">null</span>, message.getBytes());<br>        outstandingMessageCount++;<br>        <span class="hljs-comment">//当有100个消息没有确认时，进行消息批量确认</span><br>        <span class="hljs-keyword">if</span> (outstandingMessageCount == batchSize) &#123;<br>            channel.waitForConfirms();<br>            outstandingMessageCount = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//为了确保还有剩余没有确认消息 再次确认</span><br>    <span class="hljs-keyword">if</span> (outstandingMessageCount &gt; <span class="hljs-number">0</span>) &#123;<br>        channel.waitForConfirms();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异步确认发布"><a href="#异步确认发布" class="headerlink" title="异步确认发布"></a>异步确认发布</h3><p>利用回调函数来达到消息可靠性传递，这个中间件也是通过函数回调来保证是否投递成功</p><p>把未确认的消息放到一个基于内存的能被发布线程访问的队列， 比如说用 ConcurrentLinkedQueue 这个队列在 confirm callbacks 与发布线程之间进行消息的传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishMessageAsync</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>    <span class="hljs-comment">// 生成消息队列</span><br>    channel.queueDeclare(Producer.QUEUE_NAME,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// 发布确认</span><br>    channel.confirmSelect();<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     线程安全有序的一个哈希表适用于高并发的情况</span><br><span class="hljs-comment">     1.轻松的将序号与消息进行关联 key value储存</span><br><span class="hljs-comment">     2.轻松批量删除条目 只要给到key</span><br><span class="hljs-comment">    3.支持高并发（多线程）</span><br><span class="hljs-comment">     */</span><br>    ConcurrentSkipListMap&lt;Long,String&gt; concurrentSkipListMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentSkipListMap</span>();<br><br>    <span class="hljs-comment">// 消息确认成功回调</span><br>    <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">ackCallback</span> <span class="hljs-operator">=</span> (deliveryTag, multiple) -&gt; &#123;<br>        ConcurrentNavigableMap&lt;Long, String&gt; confirmed<br>            = concurrentSkipListMap.headMap(deliveryTag);<br>        <span class="hljs-comment">// 是否批量</span><br>        <span class="hljs-keyword">if</span>(multiple)&#123;<br>            <span class="hljs-comment">// 删除掉已近确认的消息，剩下的就是未确认的消息</span><br>            confirmed.clear();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 删除掉已经确认的消息，剩下的就是未确认的消息</span><br>            confirmed.remove(deliveryTag);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;确认的消息: &quot;</span> + deliveryTag);<br>    &#125;;<br>    <br>    <span class="hljs-comment">// 消息确认失败回调</span><br>    <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">nackCallback</span> <span class="hljs-operator">=</span> (deliveryTag, multiple) -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;未确认的消息: &quot;</span> + deliveryTag);<br>    &#125;;<br>    <br>    <span class="hljs-comment">// 消息的监听器，异步执行的</span><br>    channel.addConfirmListener(ackCallback,nackCallback);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;MESSAGE_COUNT;i++)&#123;<br>        String message=i+<span class="hljs-string">&quot;消息&quot;</span>;<br>        <span class="hljs-comment">// 记录所有要发送的消息到concurrentSkipListMap中，实现两个线程的信息传递</span><br>        concurrentSkipListMap.put(channel.getNextPublishSeqNo(),message);<br>        <span class="hljs-comment">// 发送消息</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,Producer.QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN,message.getBytes());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上 3 种发布确认速度对比 </p><p>​<strong>单独发布消息</strong>：同步等待确认，简单，但吞吐量非常有限</p><p>​<strong>批量发布消息</strong>：批量同步等待确认，简单，合理的吞吐量，一旦出现问题但很难推断出是哪条消息出现了问题</p><p>​<strong>异步处理</strong>：最佳性能和资源使用，在出现错误的情况下可以很好地控制，但是实现起来稍微难些</p><h2 id="Exchanges"><a href="#Exchanges" class="headerlink" title="Exchanges"></a>Exchanges</h2><p>生产者生产的消息从不会直接发送到队列，通常生产者甚至都不知道这些消息传递传递到了哪些队列中</p><p>生产者只能将消息发送到交换机 (exchange)，交换机接收来自生产者的消息，并将它们推入队列</p><p>交换机必须确切知道如何处理收到的消息，是应该把这些消息放到特定队列还是说把他们放到许多队列中还是说应该丢弃它们，这就的由交换机的类型来决定</p><h3 id="绑定-bindings"><a href="#绑定-bindings" class="headerlink" title="绑定 bindings"></a>绑定 bindings</h3><p>binding是 exchange 和 queue 之间的桥梁，它告诉我们 exchange 和哪个队列进行了绑定关系</p><h3 id="Exchanges-的类型"><a href="#Exchanges-的类型" class="headerlink" title="Exchanges 的类型"></a>Exchanges 的类型</h3><p>直接 (direct)（路由模式）<br>主题 (topic) （主题模式）<br>标题 (headers) （头模式）<br>扇出 (fanout)（发布订阅模式）</p><h3 id="Fanout-exchange（发布订阅模式）"><a href="#Fanout-exchange（发布订阅模式）" class="headerlink" title="Fanout exchange（发布订阅模式）"></a>Fanout exchange（发布订阅模式）</h3><p>Fanout是将接收到的所有消息广播到它知道的所有队列中</p><p>ReceiveLogs01 将接收到的消息打印在控制台：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogs01</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//获取信道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, <span class="hljs-string">&quot;fanout&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">  生成一个临时的队列 队列的名称是随机的</span><br><span class="hljs-comment">   当消费者断开和该队列的连接时 队列自动删除</span><br><span class="hljs-comment">  */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br>        <span class="hljs-comment">//把该临时队列绑定我们的 exchange 其中 routingkey(也称之为 binding key)为空字符串</span><br>        channel.queueBind(queueName, EXCHANGE_NAME, <span class="hljs-string">&quot;&quot;</span>);<br>       <br>        <span class="hljs-comment">//发送回调</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;控制台打印接收到的消息&quot;</span> + message);<br>        &#125;;<br>        channel.basicConsume(queueName, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>EmitLog 发送消息给两个消费者接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmitLog</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logs&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">       声明一个 exchange</span><br><span class="hljs-comment">       1.exchange 的名称</span><br><span class="hljs-comment">       2.exchange 的类型</span><br><span class="hljs-comment">    */</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, <span class="hljs-string">&quot;fanout&quot;</span>);<br>        <br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入信息&quot;</span>);<br>        <span class="hljs-keyword">while</span> (sc.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;生产者发出消息&quot;</span> + message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Direct-exchange（路由模式）"><a href="#Direct-exchange（路由模式）" class="headerlink" title="Direct exchange（路由模式）"></a>Direct exchange（路由模式）</h3><p>direct 工作方式是，消息只去到它绑定的 routingKey 队列中去</p><p>在这种绑定情况下，生产者发布消息到 exchange 上，绑定键为 orange 的消息会被发布到队列 Q1。绑定键为 black和green 的消息会被发布到队列 Q2，其他消息类型的消息将被丢弃</p><p>c2：绑定 disk，routingKey 为 error</p><p>c1：绑定 console，routingKey 为 info、warning</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsDirect01</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;direct_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;disk&quot;</span>;<br>        <span class="hljs-comment">//队列声明</span><br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//队列绑定</span><br>        channel.queueBind(queueName, EXCHANGE_NAME, <span class="hljs-string">&quot;error&quot;</span>);<br><br>        <span class="hljs-comment">//发送回调</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;error 消息已经接收：\n&quot;</span> + message);<br>        &#125;;<br>        <br>        channel.basicConsume(queueName, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsDirect02</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;direct_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;console&quot;</span>;<br>        <span class="hljs-comment">//队列声明</span><br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//队列绑定</span><br>        channel.queueBind(queueName, EXCHANGE_NAME, <span class="hljs-string">&quot;info&quot;</span>);<br>        channel.queueBind(queueName, EXCHANGE_NAME, <span class="hljs-string">&quot;warning&quot;</span>);<br><br>        <span class="hljs-comment">//发送回调</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;info和warning 消息已经接收：\n&quot;</span> + message);<br>        &#125;;<br>        <br>        channel.basicConsume(queueName, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmitLogDirect</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;direct_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);<br>        <span class="hljs-comment">//创建多个 bindingKey</span><br>        Map&lt;String, String&gt; bindingKeyMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        bindingKeyMap.put(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;普通 info 信息&quot;</span>);<br>        bindingKeyMap.put(<span class="hljs-string">&quot;warning&quot;</span>, <span class="hljs-string">&quot;警告 warning 信息&quot;</span>);<br>        bindingKeyMap.put(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;错误 error 信息&quot;</span>);<br>        <span class="hljs-comment">//debug 没有消费这接收这个消息 所有就丢失了</span><br>        bindingKeyMap.put(<span class="hljs-string">&quot;debug&quot;</span>, <span class="hljs-string">&quot;调试 debug 信息&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; bindingKeyEntry : bindingKeyMap.entrySet()) &#123;<br>            <span class="hljs-comment">//获取 key value</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">bindingKey</span> <span class="hljs-operator">=</span> bindingKeyEntry.getKey();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> bindingKeyEntry.getValue();<br><br>            channel.basicPublish(EXCHANGE_NAME, bindingKey, <span class="hljs-literal">null</span>, message.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;生产者发出消息:&quot;</span> + message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Topics-exchange（主题模式）"><a href="#Topics-exchange（主题模式）" class="headerlink" title="Topics exchange（主题模式）"></a>Topics exchange（主题模式）</h3><p>发送到类型是 topic 交换机的消息的 routing_key 不能随意写，必须是一个单词列表，以点号分隔开</p><p>比如：”stock.usd.nyse”, “nyse.vmw”, “quick.orange.rabbit”（单词列表最多不能超过 255 字节）</p><p>在这个规则列表中，两个替换符：</p><p>​*****可以代替一个单词<br>​**#**可以替代零个或多个单词</p><p>​当一个队列绑定键是 #，那么这个队列将接收所有数据，该队列绑定类型就是 fanout</p><p>​如果队列绑定键当中没有 #和 * 出现，那么该队列绑定类型就是 direct </p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmitLogTopic</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">  Q1--&gt;绑定的是</span><br><span class="hljs-comment">  中间带 orange 带 3 个单词的字符串(*.orange.*)</span><br><span class="hljs-comment"> Q2--&gt;绑定的是</span><br><span class="hljs-comment"> 最后一个单词是 rabbit 的 3 个单词(*.*.rabbit)</span><br><span class="hljs-comment"> 第一个单词是 lazy 的多个单词(lazy.#)</span><br><span class="hljs-comment"> */</span><br>        Map&lt;String, String&gt; bindingKeyMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        bindingKeyMap.put(<span class="hljs-string">&quot;quick.orange.rabbit&quot;</span>, <span class="hljs-string">&quot;被队列 Q1Q2 接收到&quot;</span>);<br>        bindingKeyMap.put(<span class="hljs-string">&quot;lazy.orange.elephant&quot;</span>, <span class="hljs-string">&quot;被队列 Q1Q2 接收到&quot;</span>);<br>        bindingKeyMap.put(<span class="hljs-string">&quot;quick.orange.fox&quot;</span>, <span class="hljs-string">&quot;被队列 Q1 接收到&quot;</span>);<br>        bindingKeyMap.put(<span class="hljs-string">&quot;lazy.brown.fox&quot;</span>, <span class="hljs-string">&quot;被队列 Q2 接收到&quot;</span>);<br>        bindingKeyMap.put(<span class="hljs-string">&quot;lazy.pink.rabbit&quot;</span>, <span class="hljs-string">&quot;虽然满足两个绑定但只被队列 Q2 接收一次&quot;</span>);<br>        bindingKeyMap.put(<span class="hljs-string">&quot;quick.brown.fox&quot;</span>, <span class="hljs-string">&quot;不匹配任何绑定不会被任何队列接收到会被丢弃&quot;</span>);<br>        bindingKeyMap.put(<span class="hljs-string">&quot;quick.orange.male.rabbit&quot;</span>, <span class="hljs-string">&quot;是四个单词不匹配任何绑定会被丢弃&quot;</span>);<br>        bindingKeyMap.put(<span class="hljs-string">&quot;lazy.orange.male.rabbit&quot;</span>, <span class="hljs-string">&quot;是四个单词但匹配 Q2&quot;</span>);<br>        <br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; bindingKeyEntry : bindingKeyMap.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">bindingKey</span> <span class="hljs-operator">=</span> bindingKeyEntry.getKey();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> bindingKeyEntry.getValue();<br><br>            channel.basicPublish(EXCHANGE_NAME, bindingKey, <span class="hljs-literal">null</span>, message.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;生产者发出消息：&quot;</span> + message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsTopic01</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);<br>        <span class="hljs-comment">//声明 Q1 队列与绑定关系</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Q1&quot;</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueBind(queueName, EXCHANGE_NAME, <span class="hljs-string">&quot;*.orange.*&quot;</span>);<br>        <br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot; 接收队列:&quot;</span> + queueName + <span class="hljs-string">&quot; 绑定键:&quot;</span> + delivery.getEnvelope().getRoutingKey() + <span class="hljs-string">&quot;,消息:&quot;</span> + message);<br>        &#125;;<br>        <br>        channel.basicConsume(queueName, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsTopic02</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);<br>        <span class="hljs-comment">//声明 Q2 队列与绑定关系</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Q2&quot;</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueBind(queueName, EXCHANGE_NAME, <span class="hljs-string">&quot;*.*.rabbit&quot;</span>);<br>        channel.queueBind(queueName, EXCHANGE_NAME, <span class="hljs-string">&quot;lazy.#&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot; 接收队列:&quot;</span> + queueName + <span class="hljs-string">&quot; 绑定键:&quot;</span> + delivery.getEnvelope().getRoutingKey() + <span class="hljs-string">&quot;,消息:&quot;</span> + message);<br>        &#125;;<br>        <br>        channel.basicConsume(queueName, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><p>死信就是无法被消费的消息，由于特定的原因导致 queue 中的某些消息无法被消费，这样的消息如果没有后续的处理，就变成了死信，有死信自然就有了死信队列</p><p>应用场景：为了保证订单业务的消息数据不丢失，需要使用到 RabbitMQ 的死信队列机制，当消息消费发生异常时，将消息投入死信队列中。用户在商城下单成功并点击去支付后在指定时间未支付时自动失效</p><h3 id="死信的来源"><a href="#死信的来源" class="headerlink" title="死信的来源"></a>死信的来源</h3><p>消息 TTL 过期：TTL 是 Time To Live 的缩写，也就是生存时间</p><p>队列达到最大长度：队列满了，无法再添加数据到 mq 中</p><p>消息被拒绝：(basic.reject 或 basic.nack) 并且 requeue&#x3D;false</p><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);<br>        <span class="hljs-comment">//设置消息的 TTL 时间 10s</span><br>        AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="hljs-string">&quot;10000&quot;</span>).build();<br>        <span class="hljs-comment">//该信息是用作演示队列个数限制</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;info&quot;</span> + i;<br>            channel.basicPublish(NORMAL_EXCHANGE, <span class="hljs-string">&quot;zhangsan&quot;</span>, properties, message.getBytes());<br>            System.out.println(<span class="hljs-string">&quot;生产者发送消息:&quot;</span> + message);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者 C2，消费死信队列里面的消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer02</span> &#123;<br>    <span class="hljs-comment">//死信交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);<br>        <span class="hljs-comment">//声明队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">deadQueue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead-queue&quot;</span>;<br>        channel.queueDeclare(deadQueue, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueBind(deadQueue, DEAD_EXCHANGE, <span class="hljs-string">&quot;lisi&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Consumer02 接收到消息&quot;</span> + message);<br>        &#125;;<br>        <br>        channel.basicConsume(deadQueue, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="死信之TTL"><a href="#死信之TTL" class="headerlink" title="死信之TTL"></a>死信之TTL</h3><p>生产者设置消息TTL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置消息的 TTL 时间 10s</span><br>        AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="hljs-string">&quot;10000&quot;</span>).build();<br></code></pre></td></tr></table></figure><p>消费者 C1 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer01</span> &#123;<br><br>    <span class="hljs-comment">//普通交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br>    <span class="hljs-comment">//死信交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br>        <span class="hljs-comment">//声明死信和普通交换机 类型为 direct</span><br>        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);<br>        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-comment">//声明死信队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">deadQueue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead-queue&quot;</span>;<br>        channel.queueDeclare(deadQueue, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//死信队列绑定：队列、交换机、路由键（routingKey）</span><br>        channel.queueBind(deadQueue, DEAD_EXCHANGE, <span class="hljs-string">&quot;lisi&quot;</span>);<br><br>        <span class="hljs-comment">//正常队列绑定死信队列信息</span><br>        Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//正常队列设置死信交换机 参数 key 是固定值</span><br>        params.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE);<br>        <span class="hljs-comment">//正常队列设置死信 routing-key 参数 key 是固定值</span><br>        params.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>);<br><br>        <span class="hljs-comment">//正常队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">normalQueue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal-queue&quot;</span>;<br>        channel.queueDeclare(normalQueue, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, params);<br>        channel.queueBind(normalQueue, NORMAL_EXCHANGE, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;等待接收消息........... &quot;</span>);<br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Consumer01 接收到消息&quot;</span> + message);<br>        &#125;;<br>        channel.basicConsume(normalQueue, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动 C1之后关闭，模拟其接收不到消息，再启动 Producer</p><h3 id="死信之最大长度"><a href="#死信之最大长度" class="headerlink" title="死信之最大长度"></a>死信之最大长度</h3><p>消息生产者代码去掉 TTL 属性</p><p>C1 消费者修改以下代码 (启动之后关闭该消费者 模拟其接收不到消息):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置正常队列的长度限制，例如发10个，4个则为死信</span><br>params.put(<span class="hljs-string">&quot;x-max-length&quot;</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><h3 id="死信之消息被拒"><a href="#死信之消息被拒" class="headerlink" title="死信之消息被拒"></a>死信之消息被拒</h3><p>拒收消息 “info5” </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer01</span> &#123;<br>    <span class="hljs-comment">//普通交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br>    <span class="hljs-comment">//死信交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//声明死信和普通交换机 类型为 direct</span><br>        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);<br>        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-comment">//声明死信队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">deadQueue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead-queue&quot;</span>;<br>        channel.queueDeclare(deadQueue, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//死信队列绑定：队列、交换机、路由键（routingKey）</span><br>        channel.queueBind(deadQueue, DEAD_EXCHANGE, <span class="hljs-string">&quot;lisi&quot;</span>);<br><br>        <span class="hljs-comment">//正常队列绑定死信队列信息</span><br>        Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//正常队列设置死信交换机 参数 key 是固定值</span><br>        params.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE);<br>        <span class="hljs-comment">//正常队列设置死信 routing-key 参数 key 是固定值</span><br>        params.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>);<br>        <span class="hljs-comment">//设置正常队列的长度限制，例如发10个，4个则为死信</span><br>        <span class="hljs-comment">//params.put(&quot;x-max-length&quot;,6);</span><br>        <span class="hljs-comment">//正常队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">normalQueue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal-queue&quot;</span>;<br>        channel.queueDeclare(normalQueue, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, params);<br>        channel.queueBind(normalQueue, NORMAL_EXCHANGE, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-keyword">if</span> (message.equals(<span class="hljs-string">&quot;info5&quot;</span>)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Consumer01 接收到消息&quot;</span> + message + <span class="hljs-string">&quot;并拒绝签收该消息&quot;</span>);<br>                <span class="hljs-comment">//requeue设置为false 代表拒绝重新入队 该队列如果配置了死信交换机将发送到死信队列中</span><br>                channel.basicReject(delivery.getEnvelope().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Consumer01 接收到消息&quot;</span> + message);<br>                channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>            &#125;<br><br>        &#125;;<br>        <span class="hljs-comment">//开启手动应答</span><br>        channel.basicConsume(normalQueue, <span class="hljs-literal">false</span>, deliverCallback, consumerTag -&gt; &#123;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p>延时队列内部是有序的，最重要的特性就体现在它的延时属性上，延时队列中的元素是希望在指定时间到了以后或之前取出和处理</p><h3 id="延迟队列使用场景"><a href="#延迟队列使用场景" class="headerlink" title="延迟队列使用场景"></a>延迟队列使用场景</h3><p>订单在十分钟之内未支付则自动取消<br>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒<br>用户注册成功后，如果三天内没有登陆则进行短信提醒<br>用户发起退款，如果三天内没有得到处理则通知相关运营人员<br>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议</p><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>TTL表明一条消息或者该队列中的所有消息的最大存活时间，单位是毫秒</p><p>队列设置 TTL：在创建队列的时候设置队列的 “x-message-ttl” 属性</p><p>消息设置 TTL：是针对每条消息设置 TTL</p><p>两者的区别</p><p>队列的 TTL 属性，一旦消息过期，就会被队列丢弃 (如果配置了死信队列被丢到死信队列中)</p><p>消息即使过期，也不一定会被马上丢弃，因为消息是否过期是在即将投递到消费者之前判定的，如果当前队列有严重的消息积压情况，则已过期的消息也许还能存活较长时间</p><p>不设置 TTL，表示消息永远不会过期</p><p>将 TTL 设置为 0，则表示除非此时可以直接投递该消息到消费者，否则该消息将会被丢弃</p><h4 id="队列-TTL"><a href="#队列-TTL" class="headerlink" title="队列 TTL"></a>队列 TTL</h4><p>配置文件类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TtlQueueConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">X_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;X&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_A</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QA&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_B</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QB&quot;</span>;<br>    <span class="hljs-comment">//死信交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">Y_DEAD_LETTER_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Y&quot;</span>;<br>    <span class="hljs-comment">//死信队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_LETTER_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QD&quot;</span>;<br><br>    <span class="hljs-comment">//声明xExchange</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">xExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(X_EXCHANGE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明死信队列交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">yExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(Y_DEAD_LETTER_EXCHANGE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列 A TTL 为 10s 并绑定到对应的死信交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueA</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//声明当前队列绑定的死信交换机</span><br>        args.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_LETTER_EXCHANGE);<br>        <span class="hljs-comment">//声明当前队列的死信路由 key</span><br>        args.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="hljs-string">&quot;YD&quot;</span>);<br>        <span class="hljs-comment">//声明队列的 TTL</span><br>        args.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>, <span class="hljs-number">10000</span>);<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_A).withArguments(args).build();<br>    &#125;<br><br>    <span class="hljs-comment">// 声明队列 A 绑定 X 交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueaBindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueA&quot;)</span> Queue queueA,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueA).to(xExchange).with(<span class="hljs-string">&quot;XA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列 B TTL 为 40s 并绑定到对应的死信交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueB</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//声明当前队列绑定的死信交换机</span><br>        args.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_LETTER_EXCHANGE);<br>        <span class="hljs-comment">//声明当前队列的死信路由 key</span><br>        args.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="hljs-string">&quot;YD&quot;</span>);<br>        <span class="hljs-comment">//声明队列的 TTL</span><br>        args.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>, <span class="hljs-number">40000</span>);<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_B).withArguments(args).build();<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列 B 绑定 X 交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queuebBindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueB&quot;)</span> Queue queue1B,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue1B).to(xExchange).with(<span class="hljs-string">&quot;XB&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//声明死信队列 QD</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueD</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(DEAD_LETTER_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明死信队列 QD 绑定关系</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">deadLetterBindingQAD</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueD&quot;)</span> Queue queueD,</span><br><span class="hljs-params">                                        <span class="hljs-meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueD).to(yExchange).with(<span class="hljs-string">&quot;YD&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RequestMapping(&quot;ttl&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMsgController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;sendMsg/&#123;message&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;,发送一条信息给两个 TTL 队列:&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), message);<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;XA&quot;</span>, <span class="hljs-string">&quot;消息来自 ttl 为 10S 的队列: &quot;</span> + message);<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;XB&quot;</span>, <span class="hljs-string">&quot;消息来自 ttl 为 40S 的队列: &quot;</span> + message);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>消息消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RequestMapping(&quot;ttl&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMsgController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;sendMsg/&#123;message&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;,发送一条信息给两个 TTL 队列:&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), message);<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;XA&quot;</span>, <span class="hljs-string">&quot;消息来自 ttl 为 10S 的队列: &quot;</span> + message);<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;XB&quot;</span>, <span class="hljs-string">&quot;消息来自 ttl 为 40S 的队列: &quot;</span> + message);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="延时队列-TTL-优化"><a href="#延时队列-TTL-优化" class="headerlink" title="延时队列 TTL 优化"></a>延时队列 TTL 优化</h4><p>配置文件类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MsgTtlQueueConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">Y_DEAD_LETTER_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Y&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_C</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QC&quot;</span>;<br>    <span class="hljs-comment">//声明队列 C 死信交换机</span><br>    <span class="hljs-meta">@Bean(&quot;queueC&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueB</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//声明当前队列绑定的死信交换机</span><br>        args.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_LETTER_EXCHANGE);<br>        <span class="hljs-comment">//声明当前队列的死信路由 key</span><br>        args.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="hljs-string">&quot;YD&quot;</span>);<br>        <span class="hljs-comment">//没有声明 TTL 属性</span><br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_C).withArguments(args).build();<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列 B 绑定 X 交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queuecBindingX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueC&quot;)</span> Queue queueC,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueC).to(xExchange).with(<span class="hljs-string">&quot;XC&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;sendExpirationMsg/&#123;message&#125;/&#123;ttlTime&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message, <span class="hljs-meta">@PathVariable</span> String ttlTime)</span> &#123;<br>rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;XC&quot;</span>, message, correlationData -&gt; &#123;<br>    correlationData.getMessageProperties().setExpiration(ttlTime);<br>    <span class="hljs-keyword">return</span> correlationData;<br>&#125;);<br>log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;,发送一条时长&#123;&#125;毫秒 TTL 信息给队列 C:&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), ttlTime, message);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用TTL实现延迟队列，当有两个以上的消息时会进行排队，导致后边延迟时间段的消息不会优先执行</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>下载rabbitmq_delayed_message_exchange 插件解压到 RabbitMQ 的plugins目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#进入RabbitMQ 的目录下的 plgins 目录，执行下面命令让该插件生效，然后重启 RabbitMQ</span><br>rabbitmq<span class="hljs-literal">-plugins</span> enable rabbitmq_delayed_message_exchange<br></code></pre></td></tr></table></figure><p>该类型消息支持延迟投递机制消息传递后并不会立即投递到目标队列中，而是存储在 mnesia(一个分布式数据系统)表中，当达到投递时间时才投递到目标队列中</p><p>配置文件类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayedQueueConfig</span> &#123;<br>    <span class="hljs-comment">//交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAYED_EXCHANGE</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;delayed_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAYED_QUEUE</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;delayed_queue&quot;</span>;<br>    <span class="hljs-comment">//routeingKey</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAYED_ROUTINGKEY</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;delayed_routingKey&quot;</span>;<br><br>    <span class="hljs-comment">//声明延迟交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CustomExchange <span class="hljs-title function_">delayedExchange</span><span class="hljs-params">()</span>&#123;<br>        HashMap&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//自定义交换机的类型</span><br>        arguments.put(<span class="hljs-string">&quot;x-delayed-type&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">             交换机名</span><br><span class="hljs-comment">             交换机类型</span><br><span class="hljs-comment">             持久化</span><br><span class="hljs-comment">             自动删除</span><br><span class="hljs-comment">      */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomExchange</span>(DELAYED_EXCHANGE,<span class="hljs-string">&quot;x-delayed-message&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,arguments);<br>    &#125;<br><br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">delayedQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(DELAYED_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//延迟交换机和队列绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">delayedQueueBindingDelayedExchange</span><span class="hljs-params">(Queue delayedQueue,CustomExchange delayedExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(delayedQueue).to(delayedExchange).with(DELAYED_ROUTINGKEY).noargs();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/delay/&#123;message&#125;/&#123;delayedTime&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delayedTimeMessage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message,<span class="hljs-meta">@PathVariable</span> Integer delayedTime)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125; 发送一条信息给delayed交换机&#123;&#125;,delayedTime：&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString(),message,delayedTime);<br>    rabbitTemplate.convertAndSend(DelayedQueueConfig.DELAYED_EXCHANGE,DelayedQueueConfig.DELAYED_ROUTINGKEY,message,(msg -&gt; &#123;<br>        <span class="hljs-comment">//发送消息 并设置delayedTime</span><br>        msg.getMessageProperties().setDelay(delayedTime);<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;));<br>&#125;<br></code></pre></td></tr></table></figure><p>消息消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">delayedConsumer</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(queues = DelayedQueueConfig.DELAYED_QUEUE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(Message message, Channel channel)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());<br>        log.info(<span class="hljs-string">&quot;当前时间&#123;&#125;，收到延迟队列的消息：&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString(),msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="整合-springboot"><a href="#整合-springboot" class="headerlink" title="整合 springboot"></a>整合 springboot</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--RabbitMQ 依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--swagger用于编写文档--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--RabbitMQ 测试依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.amqp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-rabbit-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.rabbitmq.host</span>=<span class="hljs-string">42.192.149.71</span><br><span class="hljs-attr">spring.rabbitmq.port</span>=<span class="hljs-string">5672</span><br><span class="hljs-attr">spring.rabbitmq.username</span>=<span class="hljs-string">admin</span><br><span class="hljs-attr">spring.rabbitmq.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>添加 Swagger 配置类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">webApiConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>            .groupName(<span class="hljs-string">&quot;webApi&quot;</span>)<br>            .apiInfo(webApiInfo())<br>            .select()<br>            .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">webApiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>            .title(<span class="hljs-string">&quot;rabbitmq 接口文档&quot;</span>)<br>            .description(<span class="hljs-string">&quot;本文档描述了 rabbitmq 微服务接口定义&quot;</span>)<br>            .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>            .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;zhiyuan&quot;</span>, <span class="hljs-string">&quot;http://oddfar.com&quot;</span>, <span class="hljs-string">&quot;test@qq.com&quot;</span>))<br>            .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在controller中发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) rabbitTemplate.convertSendAndReceive(RabbitMQConfig.USER_EXCEPTION, <span class="hljs-string">&quot;user-login&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(username, password));<br></code></pre></td></tr></table></figure><p>生产者配置交换机，并设置消息序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_EXCEPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user-exception&quot;</span>;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title function_">getExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicExchange</span>(USER_EXCEPTION);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">messageConverter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在service中接收消息，进行业务操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitHandler</span><br><span class="hljs-meta">@RabbitListener(queues = &quot;user-queue&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">loginUser</span><span class="hljs-params">(User user)</span>&#123;<br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;username&quot;</span>, user.getUsername());<br>    wrapper.eq(<span class="hljs-string">&quot;password&quot;</span>, user.getPassword());<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br><br>    <span class="hljs-keyword">return</span> user1;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者配置交换机和队列，并将交换机和队列绑定，将消息反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_EXCEPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user-exception&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user-queue&quot;</span>;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title function_">getExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicExchange</span>(USER_EXCEPTION);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(USER_QUEUE);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">getBinding</span><span class="hljs-params">(TopicExchange getExchange, Queue getQueue)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(getQueue).to(getExchange).with(<span class="hljs-string">&quot;user-login&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory)&#123;<br>        <span class="hljs-type">SimpleRabbitListenerContainerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleRabbitListenerContainerFactory</span>();<br>        factory.setConnectionFactory(connectionFactory);<br>        factory.setMessageConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>());<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发布确认高级"><a href="#发布确认高级" class="headerlink" title="发布确认高级"></a>发布确认高级</h2><p>在配置文件当中需要添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#NONE：禁用发布确认模式，是默认值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#CORRELATED：发布消息成功到交换器后会触发回调方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#SIMPLE： 1.和CORRELATED 值一样会触发回调方法 2.发布消息成功后使用 rabbitTemplate 调用 waitForConfirms 或 waitForConfirmsOrDie 方法等待 broker 节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是 waitForConfirmsOrDie 方法如果返回 false 则会关闭 channel，则接下来无法发送消息到 broker</span><br><br><span class="hljs-attr">spring.rabbitmq.publisher-confirm-type</span>=<span class="hljs-string">correlated</span><br></code></pre></td></tr></table></figure><p>添加配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm.exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm.queue&quot;</span>;<br>    <span class="hljs-comment">//声明业务 Exchange</span><br>    <span class="hljs-meta">@Bean(&quot;confirmExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">confirmExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(CONFIRM_EXCHANGE_NAME);<br>    &#125;<br><br>    <span class="hljs-comment">// 声明确认队列</span><br>    <span class="hljs-meta">@Bean(&quot;confirmQueue&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">confirmQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-comment">// 声明确认队列绑定关系</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueBinding</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue queue,</span><br><span class="hljs-params">                                <span class="hljs-meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange exchange)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;key1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回调接口"><a href="#回调接口" class="headerlink" title="回调接口"></a>回调接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>    <span class="hljs-comment">//依赖注入 rabbitTemplate 之后再设置它的回调对象</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        rabbitTemplate.setConfirmCallback(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     交换机不管是否收到消息的一个回调方法</span><br><span class="hljs-comment">         correlationData 消息相关数据</span><br><span class="hljs-comment">      ack             交换机是否收到消息（true/false）</span><br><span class="hljs-comment">      cause           未收到消息的原因</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> correlationData != <span class="hljs-literal">null</span> ? correlationData.getId() : <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (ack) &#123;<br>            log.info(<span class="hljs-string">&quot;交换机已经收到 id 为:&#123;&#125;的消息&quot;</span>, id);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;交换机还未收到 id 为:&#123;&#125;消息，原因:&#123;&#125;&quot;</span>, id, cause);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/confirm&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm.exchange&quot;</span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;sendMessage/&#123;message&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String message)</span> &#123;<br><br>        <span class="hljs-comment">//指定消息 id 为 1，并将消息相关信息发送给回调接口</span><br>        <span class="hljs-type">CorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(<span class="hljs-string">&quot;1&quot;</span>, message);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">routingKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;key1&quot;</span>;<br>        rabbitTemplate.convertAndSend(CONFIRM_EXCHANGE_NAME, routingKey, message, correlationData);<br>        log.info(routingKey + <span class="hljs-string">&quot;发送消息内容:&#123;&#125;&quot;</span>, message + routingKey);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmConsumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm.queue&quot;</span>;<br>    <span class="hljs-meta">@RabbitListener(queues = CONFIRM_QUEUE_NAME)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMsg</span><span class="hljs-params">(Message message)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());<br>        log.info(<span class="hljs-string">&quot;接受到队列 confirm.queue 消息:&#123;&#125;&quot;</span>, msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回退消息"><a href="#回退消息" class="headerlink" title="回退消息"></a>回退消息</h3><p>通过设置 mandatory 参数可以在当消息传递过程中不可达目的地时将消息返回给生产者</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#消息退回</span><br><span class="hljs-attr">spring.rabbitmq.publisher-returns</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>在仅开启了生产者确认机制的情况下，交换机接收到消息后，会直接给消息生产者发送确认消息，如果发现该消息不可路由，那么消息会被直接丢弃，此时生产者是不知道消息被丢弃这个事件的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ReturnCallback &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>    <span class="hljs-comment">//依赖注入 rabbitTemplate 之后再设置它的回调对象</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        rabbitTemplate.setReturnCallback(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     只有在不可达的时候才会调用，退回消息</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(Message message, <span class="hljs-type">int</span> replyCode, String replyText, String exchange String routingKey)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;消息:&#123;&#125;，被交换机：&#123;&#125;退回，退回原因：&#123;&#125;，路由Key：&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()), exchange, replyText, routingKey);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="备份交换机"><a href="#备份交换机" class="headerlink" title="备份交换机"></a>备份交换机</h3><p>当交换机接收到一条不可路由消息时，将会把这条消息转发到备份交换机中，由备份交换机来进行转发和处理，通常备份交换机的类型为 Fanout（能把所有消息都投递到与其绑定的队列中）</p><p>还可以建立一个报警队列，用独立的消费者来进行监测和报警</p><h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><h3 id="消息重复消费"><a href="#消息重复消费" class="headerlink" title="消息重复消费"></a>消息重复消费</h3><p>消费者在消费 MQ 中的消息时，MQ 已把消息发送给消费者，消费者在给 MQ 返回 ack 时网络中断， 故 MQ 未收到确认信息，该条消息会重新发给其他的消费者，或者在网络重连后再次发送给该消费者，但实际上该消费者已成功消费了该条消息，造成消费者消费了重复的消息</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>MQ 消费者的幂等性的解决一般使用全局 ID 或者写个唯一标识，比如时间戳或者 UUID ，订单消费者消费 MQ 中的消息也可利用 MQ 的该 id 来判断，或者可按自己的规则生成一个全局唯一 id，每次消费消息时用该 id 先判断该消息是否已消费过。</p><p>业界主流的幂等性有两种操作:</p><p>​唯一 ID + 指纹码机制，用数据库主键去重：利用查询语句进行判断这个 id 是否存在数据库中</p><p>​利用 redis 的原子性去实现：利用 redis 执行 setnx 命令，天然具有幂等性</p><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p>队列中代码添加优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-comment">//设置队列中消息的最大优先级</span><br>params.put(<span class="hljs-string">&quot;x-max-priority&quot;</span>, <span class="hljs-number">10</span>);<br>channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, params);<br></code></pre></td></tr></table></figure><p>消息中代码添加优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置消息的优先级</span><br>AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().priority(<span class="hljs-number">5</span>).build();<br></code></pre></td></tr></table></figure><p>注意事项：</p><p>要让队列实现优先级需要做的事情有如下事情：队列需要设置为优先级队列，消息需要设置消息的优先级，消费者需要等待消息已经发送到队列中才去消费因为，这样才有机会对消息进行排序</p><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityProducer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//给消息赋予一个 priority 属性</span><br>        AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().priority(<span class="hljs-number">5</span>).build();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;info&quot;</span> + i;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) &#123;<br>                channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, properties, message.getBytes());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-literal">null</span>, message.getBytes());<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;发送消息完成:&quot;</span> + message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityConsumer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMqUtils.getChannel();<br><br>        <span class="hljs-comment">//设置队列的最大优先级 最大可以设置到 255</span><br>        Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        params.put(<span class="hljs-string">&quot;x-max-priority&quot;</span>, <span class="hljs-number">10</span>);<br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, params);<br><br>        <span class="hljs-comment">//推送的消息如何进行消费的接口回调</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody());<br>            System.out.println(message);<br>        &#125;;<br>        <span class="hljs-comment">//取消消费的一个回调接口</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> (consumerTag) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息消费被中断&quot;</span>);<br>        &#125;;<br><br>        channel.basicConsume(QUEUE_NAME, <span class="hljs-literal">true</span>, deliverCallback, cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列</h2><p>正常情况：消息保存在内存中</p><p>惰性队列：消息保存在磁盘中</p><h3 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h3><p>default模式和 lazy模式</p><p>默认为 default 模式，在 3.6.0 之前的版本无需做任何变更</p><p>lazy 模式即为惰性队列的模式 </p><ol><li><p>调用 channel.queueDeclare 方法的时候在参数中设置</p><pre><code class="hljs">                                             2. Policy 的方式设置                          3. 队列同时使用两种方式设置， Policy 的方式具备更高的优先级</code></pre></li></ol><p>在队列声明的时候可以通过 “x-queue-mode” 参数来设置队列的模式，取值为 “default” 和 “lazy”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>args.put(<span class="hljs-string">&quot;x-queue-mode&quot;</span>, <span class="hljs-string">&quot;lazy&quot;</span>);<br>channel.queueDeclare(<span class="hljs-string">&quot;myqueue&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, args);<br></code></pre></td></tr></table></figure><h2 id="RabbitMQ-集群搭建"><a href="#RabbitMQ-集群搭建" class="headerlink" title="RabbitMQ 集群搭建"></a>RabbitMQ 集群搭建</h2><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><p>分别修改主机名</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hostnamectl <span class="hljs-built_in">set-hostname</span> rabbit<span class="hljs-literal">-node1</span><br></code></pre></td></tr></table></figure><p>修改每台机器的 &#x2F;etc&#x2F;hosts 文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#添加集群中的的主机ip和主机名</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">0.12</span> rabbit<span class="hljs-literal">-node1</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">0.14</span> rabbit<span class="hljs-literal">-node2</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">0.15</span> rabbit<span class="hljs-literal">-node3</span><br></code></pre></td></tr></table></figure><h4 id="配置-Erlang-Cookie"><a href="#配置-Erlang-Cookie" class="headerlink" title="配置 Erlang Cookie"></a>配置 Erlang Cookie</h4><p>将 rabbit-node1 上的 .erlang.cookie 文件拷贝到其他两台主机上</p><p>该 cookie 文件相当于密钥令牌，集群中的 RabbitMQ 节点需要通过交换密钥令牌以获得相互认证，因此处于同一集群的所有节点需要具有相同的密钥令牌，否则在搭建过程中会出现 Authentication Fail 错误</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#停止所有服务，构建Erlang的集群环境</span><br>systemctl stop rabbitmq<span class="hljs-literal">-server</span><br><span class="hljs-comment">#将第1台的cookie赋值给第2、3台</span><br>scp /var/lib/rabbitmq/.erlang.cookie root@rabbit<span class="hljs-literal">-node2</span>:/var/lib/rabbitmq/<br>scp /var/lib/rabbitmq/.erlang.cookie root@rabbit<span class="hljs-literal">-node3</span>:/var/lib/rabbitmq/<br></code></pre></td></tr></table></figure><p>由于你可能在三台主机上使用不同的账户进行操作，为避免后面出现权限不足的问题，这里建议将 cookie 文件原来的 400 权限改为 600，命令如下：</p><p>注：cookie 中的内容就是一行随机字符串，可以使用 cat 命令查看。</p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>启动 RabbitMQ 服务和Erlang</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1.停止服务">rabbitmq-server -detached<br></code></pre></td></tr></table></figure><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p>RabbitMQ 集群的搭建需要选择其中任意一个节点为基准，将其它节点逐步加入。这里我们以 rabbit-node1 为基准节点，将 rabbit-node2 和 rabbit-node3 加入集群。在 rabbit-node2 和rabbit-node3 上执行以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#停止服务</span><br>rabbitmqctl stop_app<br><span class="hljs-comment">#重置状态</span><br>rabbitmqctl reset<br><span class="hljs-comment">#节点加入, 在一个node加入cluster之前，必须先停止该node的rabbitmq应用，即先执行stop_app</span><br><span class="hljs-comment">#rabbit-node2加入node1</span><br>rabbitmqctl join_cluster rabbit@rabbit<span class="hljs-literal">-node1</span><br><span class="hljs-comment">#启动服务</span><br>rabbitmqctl start_app<br></code></pre></td></tr></table></figure><h4 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rabbitmqctl cluster_status<br></code></pre></td></tr></table></figure><h4 id="剔除集群中的结点"><a href="#剔除集群中的结点" class="headerlink" title="剔除集群中的结点"></a>剔除集群中的结点</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rabbitmqctl forget_cluster_node rabbit@node1 <span class="hljs-literal">--offline</span><br></code></pre></td></tr></table></figure><p>此时需要加上 -offline 参数，它允许节点在自身没有启动的情况下将其他节点剔除</p><h3 id="配置镜像队列"><a href="#配置镜像队列" class="headerlink" title="配置镜像队列"></a>配置镜像队列</h3><p>开启镜像队列</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rabbitmqctl set_policy ha<span class="hljs-literal">-all</span> <span class="hljs-string">&quot;^&quot;</span> <span class="hljs-string">&#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>复制系数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rabbitmqctl set_policy ha<span class="hljs-literal">-two</span> <span class="hljs-string">&quot;^&quot;</span> <span class="hljs-string">&#x27;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo</title>
    <link href="/2022/03/16/Dubbo/"/>
    <url>/2022/03/16/Dubbo/</url>
    
    <content type="html"><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><p>进入zookeeper目录 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/zhq/apache-zookeeper-3.6.3-bin/<br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zkServer.sh start <br></code></pre></td></tr></table></figure><p>停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zkServer.sh stop<br></code></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zkServer.sh status <span class="hljs-comment">#查看状态Mode: standalone表示服务启动了</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastdfs启动<br><br>fdfs_trackerd /etc/fdfs/tracker.conf start<br>fdfs_storaged /etc/fdfs/storage.conf start<br></code></pre></td></tr></table></figure><p><strong>RPC</strong>：远程过程调用协议</p><p><strong>分布式</strong>：多台计算机位于网络系统中，形成一个整体对外界提供服务，将一个系统拆分为多个不同的服务</p><p><strong>Dubbo</strong>： 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，服务自动注册和发现</p><img src="/2022/03/16/Dubbo/225022.jpg" style="zoom: 80%;"><p><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务<br><strong>服务消费者（Consumer）</strong>: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用<br><strong>注册中心（Registry）</strong>：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者<br><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">配置服务名称<br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:aplication</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>配置注册中心<br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;ip:prot&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;协议&quot;</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>配置访问服务提供者的协议信息<br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">prot</span>=<span class="hljs-string">&quot;20880&quot;</span>/&gt;</span><br>暴露服务<br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">registry</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>指定使用的远程服务<br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>Multicast注册中心：组播方式</p><p>Redis注册中心：使用Redis作为注册中心</p><p>Simple注册中心：就是一个Dubbo服务</p><p>Zookeeper注册中心：是一个树形的目录服务（推荐），需要安装Zookeeper</p><h2 id="监控中心"><a href="#监控中心" class="headerlink" title="监控中心"></a>监控中心</h2><p>下载监控中心，部署到项目中</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置的优先级：JVM虚拟机 -&gt; XML文件 -&gt; properties配置文件</p><h3 id="启动时检查"><a href="#启动时检查" class="headerlink" title="启动时检查"></a>启动时检查</h3><p>关闭某个服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>关闭所有服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:consumer</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>关闭注册中心启动时检查 (注册订阅失败时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多版本"><a href="#多版本" class="headerlink" title="多版本"></a>多版本</h3><p>设置版本，调用时只会调用相同版本的服务</p><p>版本服务提供者配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>版本服务消费者配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;barService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">config-center:</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">100000</span><br><span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">100000</span>   <span class="hljs-comment">#要一起设置才会生效</span><br>    <br><span class="hljs-comment">#consumer: 设置全部服务的配置</span><br></code></pre></td></tr></table></figure><h3 id="本地存根"><a href="#本地存根" class="headerlink" title="本地存根"></a>本地存根</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.zhq.service.invokeService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userServiceImpl&quot;</span> <span class="hljs-attr">stub</span>=<span class="hljs-string">&quot;com.foo.BarServiceStub&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>提供 Stub 的实现 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BarServiceStub</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BarService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BarService barService;<br>    <br>    <span class="hljs-comment">// 构造函数传入真正的远程代理对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BarServiceStub</span><span class="hljs-params">(BarService barService)</span>&#123;<br>        <span class="hljs-built_in">this</span>.barService = barService;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">// 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> barService.sayHello(name);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 你可以容错，可以做任何AOP拦截事项</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;容错数据&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="直连方式"><a href="#直连方式" class="headerlink" title="直连方式"></a>直连方式</h3><p>直连方式，没有注册中心</p><h4 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h4><p><strong>定义实体类并实现序列化接口</strong></p><p><strong>定义服务的接口</strong></p><p><strong>导出接口和实现类为一个jar文件，提供给服务提供者和消费者</strong></p><h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p><strong>引入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入dubbo依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--服务接口的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zhq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>invokeService<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>定义服务的接口的实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">userServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">invokeService</span> &#123; <span class="hljs-comment">//实现序列化</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryService</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(username);<br>        user.setPassword(<span class="hljs-string">&quot;1234&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义spring配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        dubbo:application：声明服务的名称</span><br><span class="hljs-comment">        name：自定义的服务名称，一般使用项目名（由框架内部使用）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;provide&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        声明服务的接口信息，暴露服务给消费者调用</span><br><span class="hljs-comment">        interface：服务接口的全限定名称</span><br><span class="hljs-comment">        protocol：访问dubbo服务使用的协议，推荐使用dubbo协议</span><br><span class="hljs-comment">        registry：指定是否使用注册中心（N/A表示不使用）</span><br><span class="hljs-comment">        ref：指定接口的实现类的bean的id</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.zhq.service.invokeService&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">registry</span>=<span class="hljs-string">&quot;N/A&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userServiceImpl&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--声明接口的实现类对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhq.serviceImpl.userServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注册spring监听器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:provide.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span><br>        org.springframework.web.context.ContextLoaderListener<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p><strong>引入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入dubbo依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--服务接口的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zhq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>invokeService<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>定义服务接口类，对远程获取远程服务对象并进行操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokeServiceImpl</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">query</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.queryService(<span class="hljs-string">&quot;狗子&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义spring配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        dubbo:application：声明服务的名称</span><br><span class="hljs-comment">        name：自定义的服务名称，一般使用项目名（由框架内部使用）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consum&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        声明要使用的dubbo服务（远程服务）</span><br><span class="hljs-comment">        interface：dubbo服务接口的全限定名称</span><br><span class="hljs-comment">        id：dubbo创建的代理对象的id，使用该id访问代理对象</span><br><span class="hljs-comment">        url：使用直接方式，访问远程服务的地址</span><br><span class="hljs-comment">check：false关闭服务启动时检查</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.zhq.service.invokeService&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remoteuserService&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;dubbo://localhost:20880&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--声明服务接口类对象，获取远程服务对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;invokeServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhq.service.InvokeServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;remoteuserService&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="注册中心方式"><a href="#注册中心方式" class="headerlink" title="注册中心方式"></a>注册中心方式</h3><p><strong>导入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--dubbo2.6以前导入zkclient客户端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.sgroschupf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--dubbo2.6以后导入curator-framework客户端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-framework<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>服务提供者</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        dubbo:application：声明服务的名称</span><br><span class="hljs-comment">        name：自定义的服务名称，一般使用项目名（由框架内部使用）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;provide&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--声明zookeeper注册中心地址      check：false关闭注册中心启动时检查--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://localhost:2181&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--声明协议和端口--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;20880&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        声明服务的接口信息，暴露服务给消费者调用</span><br><span class="hljs-comment">        interface：服务接口的全限定名称</span><br><span class="hljs-comment">        ref：指定接口的实现类的bean的id</span><br><span class="hljs-comment">loadbalance：使用负载均衡（random随机数方式）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.zhq.service.invokeService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userServiceImpl&quot;</span> <span class="hljs-attr">loadbalance</span>=<span class="hljs-string">&quot;random&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--声明接口的实现类对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhq.serviceImpl.userServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        dubbo:application：声明服务的名称</span><br><span class="hljs-comment">        name：自定义的服务名称，一般使用项目名（由框架内部使用）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consum&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--声明zookeeper注册中心地址     check：false关闭注册中心启动时检查--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://localhost:2181&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        声明要使用的dubbo服务（远程服务）</span><br><span class="hljs-comment">        interface：dubbo服务接口的全限定名称</span><br><span class="hljs-comment">        id：dubbo创建的代理对象的id，使用该id访问代理对象</span><br><span class="hljs-comment">loadbalance：使用负载均衡（random随机数方式）</span><br><span class="hljs-comment">check：false关闭服务启动时检查</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.zhq.service.invokeService&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remoteuserService&quot;</span> <span class="hljs-attr">loadbalance</span>=<span class="hljs-string">&quot;random&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--声明服务接口类对象，获取远程服务对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;invokeServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhq.service.InvokeServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;remoteuserService&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，默认为 random 随机调用</p><p><strong>Random LoadBalance 基于权重的随机负载均衡机制</strong></p><p>随机，按权重设置随机概率。 在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重</p><p><strong>RoundRobin LoadBalance 基于权重的轮询负载均衡机制</strong></p><p>轮循，按公约后的权重设置轮循比率。 存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上</p><p><strong>LeastActive LoadBalance最少活跃数负载均衡机制</strong></p><p>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。 使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大</p><p><strong>ConsistentHash LoadBalance一致性hash 负载均衡机制</strong></p><p>一致性 Hash，相同参数的请求总是发到同一提供者。 当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2022/03/03/Git/"/>
    <url>/2022/03/03/Git/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>一般来说，团队合作开发的话，每个人都需要在自己的功能分支 feat&#x2F;XXX 上开发，最后一起合并到总的开发分支 dev 上，然后将开发分支 dev 合并到测试分支上，最后将测试分支合并到正式发布分支上</p><p>其中总的开发分支一般叫做 dev 分支，正式发布分支一般是叫 main&#x2F;master&#x2F;release 分支</p><p><strong>Git GUI</strong>：Git提供的图形界面工具</p><p><strong>Git Bash</strong>：Git提供的命令行工具</p><p><strong>签名的作用是区分不同操作者身份</strong>。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。 <strong>Git 首次安装必须设置一下用户签名，否则无法提交代码</strong></p><p><strong>设置用户信息</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;XXX&quot;<br>git config --global user.email &quot;XXXX&quot;<br></code></pre></td></tr></table></figure><p><strong>查看配置信息</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name<br>git config --global user.email<br></code></pre></td></tr></table></figure><h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><img src="/2022/03/03/Git/image-20220402225215944.png" alt="image-20220402225215944" style="zoom:80%;"><p>命令如下：</p><p><strong>clone（克隆）</strong>: 从远程仓库中克隆代码到本地仓库</p><p><strong>checkout （检出）</strong>：从本地仓库中检出一个仓库分支然后进行修订</p><p><strong>add（添加）</strong>: 在提交前先将代码提交到暂存区</p><p><strong>commit（提交）</strong>: 提交到本地仓库。本地仓库中保存修改的各个历史版本</p><p><strong>fetch (抓取)</strong> ： 从远程库抓取到本地仓库，不进行任何的合并动作，一般操作比较少</p><p><strong>pull (拉取)</strong> ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge</p><p><strong>push（推送）</strong> : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</p><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p>打开用户目录，创建 .bashrc 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch ~/.bashrc<br></code></pre></td></tr></table></figure><p>在 .bashrc文件中进行起别名，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27; <br></code></pre></td></tr></table></figure><p>打开Git Bash，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库</p><p>在电脑的任意位置创建一个空目录作为我们的本地Git仓库，进入这个目录中，点击右键打开Git bash窗口，执行命令git init（在该目录中看到隐藏的.git目录表示仓库创建成功）</p><h3 id="添加文件至忽略列表"><a href="#添加文件至忽略列表" class="headerlink" title="添加文件至忽略列表"></a>添加文件至忽略列表</h3><p>有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等</p><p>在工作目录中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件模式</p><h2 id="基础操作指令"><a href="#基础操作指令" class="headerlink" title="基础操作指令"></a>基础操作指令</h2><p>Git工作目录下对于文件的修改(增加、删除、更新)会存在几个状态，这些修改的状态会随着我们执行Git的命令而</p><p>发生变化</p><img src="/2022/03/03/Git/03/03/Git/image-20220402225233919.png" class title="image-20220402225233919"><p>使用命令来控制这些状态之间的转换：</p><p>​git add (工作区 —&gt; 暂存区)</p><p>​git commit (暂存区 —&gt; 本地仓库)</p><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><p>作用：查看修改的状态（暂存区、工作区）</p><p>命令形式：<code>git status</code></p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>作用：添加工作区一个或多个文件的修改到暂存区</p><p>命令形式：<code>git add file.txt </code>  # 添加单个文件</p><p>​<code>git add . </code> # 将所有修改加入暂存区</p><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>作用：提交暂存区内容到本地仓库的当前分支</p><p>命令形式：<code>git commit -m &quot;注释内容&quot;</code></p><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><p>作用:查看提交记录</p><p>命令形式：<code>git log [option]</code></p><p>​—all 显示所有分支</p><p>​—pretty&#x3D;oneline 将提交信息显示为一行</p><p>​—abbrev-commit 使得输出的commitId更简短</p><p>​—graph 以图的形式显示</p><p>配置的别名git-log就包含了这些参数，所以后续可以直接使用指令 git-log</p><h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><p>作用：版本切换</p><p>命令形式：<code>git reset --hard commitID</code> # commitID 可以使用 git-log 或 git log 指令查看</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>使用分支可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线</p><p><strong>每个分支提交到仓库的数据只在本分支中存在（没commit到仓库时本仓库的分支都能进行查看并提交）</strong></p><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><p><code>git branch</code></p><h3 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h3><p><code>git branch 分支名</code></p><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p><code>git checkout 分支名</code></p><p><code>git checkout -b 分支名</code> # 创建并切换</p><p><code>git checkout -b 分支名 远程仓库名/分支名</code>    #在本地创建分支并与远程分支对应</p><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>一个分支上的提交可以合并到另一个分支</p><p><code>git merge 分支名 </code>      # 将其他分支合并到当前分支</p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>不能删除当前分支，只能删除其他分支</p><p><code>git branch -d 分支名 </code># 删除分支时，需要做各种检查</p><p><code>git branch -D 分支名</code> # 不做任何检查，强制删除</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><ol><li><p>处理文件中冲突的地方</p></li><li><p>将解决完冲突的文件加入暂存区(add)</p></li><li><p>提交到仓库(commit)</p></li></ol><h3 id="开发中分支使用原则与流程"><a href="#开发中分支使用原则与流程" class="headerlink" title="开发中分支使用原则与流程"></a>开发中分支使用原则与流程</h3><p><strong>master （生产） 分支</strong>：线上分支，主分支，中小规模项目作为线上运行的应用对应的分支</p><p><strong>develop（开发）分支</strong>：是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支，准备上线</p><p><strong>feature&#x2F;xxxx分支</strong>：从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支，之后该分支可以删除</p><p><strong>hotfix&#x2F;xxxx分支</strong>：从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支</p><p>test分支（用于代码测试）、pre分支（预上线分支）等等</p><img src="/2022/03/03/Git/03/03/Git/image-20220402225248223.png" class title="image-20220402225248223"><h2 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h2><h3 id="常用的托管服务"><a href="#常用的托管服务" class="headerlink" title="常用的托管服务"></a>常用的托管服务</h3><p><strong>GitHub</strong>（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名GitHub</p><p><strong>码云</strong>（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快</p><p><strong>GitLab</strong> （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务，一般用于在企业、学校等内部网络搭建git私服</p><h3 id="操作远程仓库"><a href="#操作远程仓库" class="headerlink" title="操作远程仓库"></a>操作远程仓库</h3><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p>此操作是先初始化本地库，然后与已创建的远程库进行对接</p><p>命令：<code>git remote add &lt;远端名称&gt; &lt;仓库地址&gt;</code></p><p>​远端名称：默认是origin，取决于远端服务器设置</p><p>​仓库地址：从远端服务器获取此url（SSH地址）</p><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><p>命令：<code>git remote</code></p><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>将本地仓库中commit的文件推送到远程仓库，远程仓库之前的文件会被覆盖掉</p><p><code>git push [-f] [--set-upstream] [远端名称] [本地分支名][:远端分支名]</code></p><p>​ -f：表示强制推送，一般在公司内没有这个的使用权限，否则容易冲掉远程仓库的所有代码</p><p>​ –set-upstream：推送到远端的同时，建立起和远端分支的关联关系。用于第一次推送时。</p><p>远程分支名和本地分支名相同，则可以只写本地分支名：<code>git push origin master</code></p><p>当前分支已经和远端分支关联，则可以省略分支名和远端名：<code>git push</code> 将master分支推送到已关联的远端分支</p><h4 id="查看本地分支与远程分支的关联关系"><a href="#查看本地分支与远程分支的关联关系" class="headerlink" title="查看本地分支与远程分支的关联关系"></a>查看本地分支与远程分支的关联关系</h4><p>命令：<code>git branch -vv</code></p><h4 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h4><p>已经有一个远端仓库，我们可以直接clone到本地。</p><p>命令：<code>git clone &lt;仓库地址(SSH)&gt; [本地目录]</code></p><p>本地目录可以省略，会自动生成一个目录</p><h4 id="从远程仓库中抓取和拉取"><a href="#从远程仓库中抓取和拉取" class="headerlink" title="从远程仓库中抓取和拉取"></a>从远程仓库中抓取和拉取</h4><p>远程分支可以进行merge操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。</p><p>抓取命令：抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</p><p>​<code>git fetch [remote name] [branch name]</code></p><p>​如果不指定远端名称和分支名，则抓取所有分支。</p><p>拉取命令：拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</p><p>​<code>git pull [remote name] [branch name]</code></p><p>​如果不指定远端名称和分支名，则抓取所有并更新当前分支。</p><h4 id="解决合并冲突"><a href="#解决合并冲突" class="headerlink" title="解决合并冲突"></a>解决合并冲突</h4><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突</p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户，故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支，如下图所示</p><img src="/2022/03/03/Git/03/03/Git/image-20220402225258838.png" class title="image-20220402225258838"><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突</p><p>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同。</p><h4 id="强制拉取到本地仓库"><a href="#强制拉取到本地仓库" class="headerlink" title="强制拉取到本地仓库"></a>强制拉取到本地仓库</h4><p>有些时候本地仓库提交管理混乱，需要从远程仓库强制拉取，以刷新本地仓库，覆盖所有add和commit操作。</p><p>​<code>git fetch --all</code> </p><p>​<code>git reset --hard origin/master</code> </p><p>​<code>git pull</code></p><h2 id="IDEA中的Git使用"><a href="#IDEA中的Git使用" class="headerlink" title="IDEA中的Git使用"></a>IDEA中的Git使用</h2><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><h3 id="在IDEA中操作Git"><a href="#在IDEA中操作Git" class="headerlink" title="在IDEA中操作Git"></a>在IDEA中操作Git</h3><p>初始化本地仓库，选择本项目</p><img src="/2022/03/03/Git/image-20220402225314500.png" alt="image-20220402225314500" style="zoom: 67%;"><p>设置远程仓库 </p><img src="/2022/03/03/Git/image-20220402225328255.png" alt="image-20220402225328255" style="zoom: 67%;"><p>输入远程仓库地址</p><img src="/2022/03/03/Git/image-20220402225341811.png" alt="image-20220402225341811" style="zoom: 67%;"><p>提交到本地仓库</p><img src="/2022/03/03/Git/image-20220402225355509.png" alt="image-20220402225355509" style="zoom: 60%;"><img src="/2022/03/03/Git/image-20220402225407915.png" alt="image-20220402225407915" style="zoom: 60%;"><p>推送到远程仓库</p><img src="/2022/03/03/Git/image-20220402225421883.png" alt="image-20220402225421883" style="zoom:60%;"><p>创建分支<br>    最常规的方式</p><img src="/2022/03/03/Git/image-20220402225437341.png" alt="image-20220402225437341" style="zoom: 80%;"><p>​最强大的方式</p><img src="/2022/03/03/Git/image-20220402225447641.png" alt="image-20220402225447641" style="zoom: 67%;"> <h1 id="Git-1"><a href="#Git-1" class="headerlink" title="Git"></a>Git</h1><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><strong>安装与配置</strong></td><td></td></tr><tr><td>sudo apt-get install git</td><td>Ubuntu上安装Git命令</td></tr><tr><td>git config –global user.name 用户名</td><td>设置用户签名 （安装Git后务必设置）</td></tr><tr><td>git config –global user.email email地址</td><td>设置用户email地址 （安装Git后务必设置）</td></tr><tr><td><strong>获取与创建项目</strong></td><td></td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git clone 远程库地址</td><td>从远程库克隆到本地</td></tr><tr><td><strong>基本快照</strong></td><td></td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加变动文件到暂存区</td></tr><tr><td>git add .</td><td>添加当前目录下所有变动文件到暂存区</td></tr><tr><td>git restore –staged 文件名</td><td>复位在暂存区的文件（add反悔药）</td></tr><tr><td>git rm –cached 文件名</td><td>移除在暂存区的文件（add反悔药）（同上一条）</td></tr><tr><td>git commit -m “备注文本” 文件名</td><td>提交暂存区文件到本地库 （文件名缺省时，将暂存区所有文件提交）</td></tr><tr><td>git commit –amend</td><td>修改上次提交的备注文本</td></tr><tr><td>git revert 版本号(7位)</td><td>撤销指定的提交（commit反悔药）(慎用)</td></tr><tr><td>git reset –hard 版本号(7位)</td><td>版本间穿梭（配合git reflog使用）</td></tr><tr><td>git reset –hard HEAD^</td><td>穿梭到上一个版本</td></tr><tr><td><strong>分支与合并</strong></td><td></td></tr><tr><td>git branch</td><td>列出所有分支</td></tr><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名B</td><td>分支B合并到A （A为当前工作目录所处分支）</td></tr><tr><td>git branch -d 分支名</td><td>删除分支</td></tr><tr><td>git tag</td><td>列出所有本地标签</td></tr><tr><td>git tag -l 通配模式文本(*)</td><td>根据符合通配模式文本，列出所有本地标签</td></tr><tr><td>git tag 标签名</td><td>为最新提交创建<strong>轻量</strong>标签</td></tr><tr><td>git tag 标签名 版本号(7位)</td><td>为对应版本号提交创建<strong>轻量</strong>标签（在后期打标签）</td></tr><tr><td>git tag -a 标签名 -m 备注文本</td><td>为最新提交创建<strong>附注</strong>标签</td></tr><tr><td>git tag -d 标签名</td><td>删除指定标签</td></tr><tr><td><strong>共享与更新项目</strong></td><td></td></tr><tr><td>git remote add 别名 远程仓库地址</td><td>添加远程库</td></tr><tr><td>git remote -v</td><td>查看添加过的远程库</td></tr><tr><td>git push 远程库地址或其别名 分支名</td><td>推送到远程库</td></tr><tr><td>git push 远程库地址或其别名 –tags</td><td>推送所有标签到远程库</td></tr><tr><td>git fetch</td><td>将远程库的最新内容拉到本地</td></tr><tr><td>git pull 远程库地址或其别名 分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并， 相当于git fetch + git merge，这样可能会产生冲突，需要手动解决</td></tr><tr><td><strong>检查与比较</strong></td><td></td></tr><tr><td>git show 标签名</td><td>显示标签信息和与之对应的提交信息</td></tr><tr><td>git show 版本号(7位)</td><td>显示对应版本对应的提交信息</td></tr><tr><td>git log</td><td>显示当前分支所有提交过的版本信息</td></tr><tr><td>git log –follow 文件名</td><td>显示当前分支所有提交过的关于指定文件版本信息</td></tr><tr><td>git log –pretty&#x3D;oneline</td><td>显示当前分支所有提交过的版本信息（精简）</td></tr><tr><td>git log –graph</td><td>显示当前分支所有提交过的版本信息（附有分支合并图）</td></tr><tr><td>git diff 分支一 分支二</td><td>显示两分支差异</td></tr><tr><td>git diff 版本号一(7位) 版本号二(7位)</td><td>显示同一分支两版本差异</td></tr><tr><td><strong>管理</strong></td><td></td></tr><tr><td>git reflog</td><td>可以查看所有分支的所有操作记录 （包括已被删除的commit记录和reset的操作，git log所不能）</td></tr></tbody></table><h2 id="分支-1"><a href="#分支-1" class="headerlink" title="分支"></a>分支</h2><img src="/2022/03/03/Git/03/03/Git/bcad650a512a72097b3391e00ecb8bbe.png" class title="img"><h3 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h3><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来， 开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</p><img src="/2022/03/03/Git/03/03/Git/f1d0659ed000e9dfa295fc696a58cf74.png" class title="某项目有四条分支"><h3 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a>分支的好处</h3><p>同时并行推进多个功能开发，提高开发效率。</p><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</p><h2 id="16-分支-查看-amp-创建-amp-切换"><a href="#16-分支-查看-amp-创建-amp-切换" class="headerlink" title="16_分支_查看&amp;创建&amp;切换"></a>16_分支_查看&amp;创建&amp;切换</h2><h3 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="20-GitHub-创建远程库-amp-创建别名"><a href="#20-GitHub-创建远程库-amp-创建别名" class="headerlink" title="20_GitHub_创建远程库&amp;创建别名"></a>20_GitHub_创建远程库&amp;创建别名</h2><p><a href="https://github.com/">GitHub网址</a></p><h3 id="创建远程库"><a href="#创建远程库" class="headerlink" title="创建远程库"></a>创建远程库</h3><p>登陆后，点击在网页右上角的“+” –&gt; “New repository”，创建远程库。</p><img src="/2022/03/03/Git/03/03/Git/3dfd6ad9419bfcef2635e08a5c02e86c.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/fba2c7ad888d2aeeea3a6f4a28c7fb03.png" class title="img"><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并</td></tr></tbody></table><h3 id="创建别名"><a href="#创建别名" class="headerlink" title="创建别名"></a>创建别名</h3><p><strong>基本语法</strong>：</p><ul><li><code>git remote -v</code> 查看当前所有远程地址别名</li><li><code>git remote add 别名 远程地址</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ git remote -v<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ git remote add hellogit https://github.com/abc/HelloGit.git<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ git remote -v<br>hellogit        https://github.com/abc/HelloGit.git (fetch)<br>hellogit        https://github.com/abc/HelloGit.git (push)<br><br>1234567891011<br></code></pre></td></tr></table></figure><p><a href="https://github.com/abc/HelloGit.git%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%9C%A8%E5%88%9B%E5%BB%BA%E5%AE%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%90%8E%E7%94%9F%E6%88%90%E7%9A%84%E8%BF%9E%E6%8E%A5">https://github.com/abc/HelloGit.git，这个地址在创建完远程仓库后生成的连接</a> ，如图所示</p><img src="/2022/03/03/Git/03/03/Git/d9ee95e5b293a176efbfe8afefc3e632.png" class title="img"><h2 id="21-GitHub-推送本地库到远程库"><a href="#21-GitHub-推送本地库到远程库" class="headerlink" title="21_GitHub_推送本地库到远程库"></a>21_GitHub_推送本地库到远程库</h2><p>基本语法：<code>git push 别名 分支</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将master分支推送到别名为hellogit远程地址，</span><br><span class="hljs-comment"># 也就推送到https://github.com/abc/HelloGit.git（具体看前一节）</span><br><span class="hljs-comment"># 这里需要授权认证操作（输入账号密码）</span><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ git push hellogit master<br>fatal: unable to access <span class="hljs-string">&#x27;https://github.com/abc/HelloGit.git/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno 10054<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ git push hellogit master<br>Enumerating objects: 13, <span class="hljs-keyword">done</span>.<br>Counting objects: 100% (13/13), <span class="hljs-keyword">done</span>.<br>Delta compression using up to 8 threads<br>Compressing objects: 100% (9/9), <span class="hljs-keyword">done</span>.<br>Writing objects: 100% (13/13), 1.02 KiB | 523.00 KiB/s, <span class="hljs-keyword">done</span>.<br>Total 13 (delta 4), reused 0 (delta 0), pack-reused 0<br>remote: Resolving deltas: 100% (4/4), <span class="hljs-keyword">done</span>.<br>To https://github.com/abc/HelloGit.git<br> * [new branch]      master -&gt; master<br><br>12345678910111213141516171819<br></code></pre></td></tr></table></figure><p>推送成功后，刷新<a href="https://github.com/abc/HelloGit%EF%BC%9A">https://github.com/abc/HelloGit：</a></p><img src="/2022/03/03/Git/03/03/Git/84e90e7cd9e5cda112179e28facb2c2e.png" class title="img"><h2 id="22-GitHub-拉取远程库到本地库"><a href="#22-GitHub-拉取远程库到本地库" class="headerlink" title="22_GitHub_拉取远程库到本地库"></a>22_GitHub_拉取远程库到本地库</h2><p>基本语法：<code>git push 别名 分支</code></p><p>在Github上修改hello.txt文件，并提交。</p><img src="/2022/03/03/Git/03/03/Git/bfe5dcc2d0362f94437bf09b16986ee5.png" class title="img"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从hellogit拉取到master分支上</span><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ git pull hellogit master<br>remote: Enumerating objects: 5, <span class="hljs-keyword">done</span>.<br>remote: Counting objects: 100% (5/5), <span class="hljs-keyword">done</span>.<br>remote: Compressing objects: 100% (2/2), <span class="hljs-keyword">done</span>.<br>remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0<br>Unpacking objects: 100% (3/3), 672 bytes | 168.00 KiB/s, <span class="hljs-keyword">done</span>.<br>From https://github.com/JallenKwong/HelloGit<br> * branch            master     -&gt; FETCH_HEAD<br>   785ab46..47e257f  master     -&gt; hellogit/master<br>Updating 785ab46..47e257f<br>Fast-forward<br> hello.txt | 2 +-<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br><br><span class="hljs-comment"># 可看到从Github上修改后痕迹</span><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ <span class="hljs-built_in">cat</span> hello.txt<br>hello, git!hot-fix<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!modify from Github editor<br>hello, git!hot-fix <span class="hljs-built_in">test</span><br>hello, git!master <span class="hljs-built_in">test</span><br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ git status<br>On branch master<br>nothing to commit, working tree clean<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ git reflog<br>47e257f (HEAD -&gt; master, hellogit/master) HEAD@&#123;0&#125;: pull hellogit master: Fast-forward<br>785ab46 HEAD@&#123;1&#125;: commit (merge): conflict solved<br>fb0e30b HEAD@&#123;2&#125;: checkout: moving from hot-fix to master<br>47d2d8f (hot-fix) HEAD@&#123;3&#125;: commit: hot-fix <span class="hljs-built_in">test</span><br>25f62d6 HEAD@&#123;4&#125;: checkout: moving from master to hot-fix<br>fb0e30b HEAD@&#123;5&#125;: commit: master <span class="hljs-built_in">test</span><br>25f62d6 HEAD@&#123;6&#125;: checkout: moving from hot-fix to master<br>25f62d6 HEAD@&#123;7&#125;: checkout: moving from master to hot-fix<br>25f62d6 HEAD@&#123;8&#125;: checkout: moving from hot-fix to master<br>25f62d6 HEAD@&#123;9&#125;: checkout: moving from master to hot-fix<br>25f62d6 HEAD@&#123;10&#125;: merge hot-fix: Fast-forward<br>b0006bc HEAD@&#123;11&#125;: checkout: moving from hot-fix to master<br>25f62d6 HEAD@&#123;12&#125;: commit: hot-fix first commit<br>b0006bc HEAD@&#123;13&#125;: checkout: moving from master to hot-fix<br>b0006bc HEAD@&#123;14&#125;: reset: moving to b0006bc<br>5f8dbf6 HEAD@&#123;15&#125;: commit: forth commit<br>b0006bc HEAD@&#123;16&#125;: reset: moving to b0006bc<br>41f776b HEAD@&#123;17&#125;: commit: third commit<br>6967bf0 HEAD@&#123;18&#125;: commit: second commit<br>b0006bc HEAD@&#123;19&#125;: commit (initial): first commit<br>123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566<br></code></pre></td></tr></table></figure><h2 id="23-GitHub-克隆远程库到本地"><a href="#23-GitHub-克隆远程库到本地" class="headerlink" title="23_GitHub_克隆远程库到本地"></a>23_GitHub_克隆远程库到本地</h2><p>基本语法：<code>git clone 远程地址</code></p><p>在远程库获取地址URL</p><img src="/2022/03/03/Git/03/03/Git/ff23330d5eab8f2a681c6f91727a37ca.png" class title="img"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)<br>$ <span class="hljs-built_in">cd</span> ..<br><br><span class="hljs-comment"># 创建一个新文件夹</span><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">mkdir</span> HelloGit-<span class="hljs-built_in">clone</span><br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">cd</span> HelloGit-<span class="hljs-built_in">clone</span>/<br><br><span class="hljs-comment"># 在新的文件夹内，克隆远程库到本地</span><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span><br>$ git <span class="hljs-built_in">clone</span> https://github.com/abc/HelloGit.git<br>Cloning into <span class="hljs-string">&#x27;HelloGit&#x27;</span>...<br>remote: Enumerating objects: 16, <span class="hljs-keyword">done</span>.<br>remote: Counting objects: 100% (16/16), <span class="hljs-keyword">done</span>.<br>remote: Compressing objects: 100% (7/7), <span class="hljs-keyword">done</span>.<br>remote: Total 16 (delta 5), reused 12 (delta 4), pack-reused 0<br>Receiving objects: 100% (16/16), <span class="hljs-keyword">done</span>.<br>Resolving deltas: 100% (5/5), <span class="hljs-keyword">done</span>.<br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span><br><br>$ git remote -v<br>fatal: not a git repository (or any of the parent directories): .git<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span><br>$ <span class="hljs-built_in">ls</span><br>HelloGit/<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span><br>$ <span class="hljs-built_in">cd</span> HelloGit/<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ git remote -v<br>origin  https://github.com/abc/HelloGit.git (fetch)<br>origin  https://github.com/abc/HelloGit.git (push)<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ git reflog<br>47e257f (HEAD -&gt; master, origin/master, origin/HEAD) HEAD@&#123;0&#125;: <span class="hljs-built_in">clone</span>: from https://github.com/JallenKwong/HelloGit.git<br><br>1234567891011121314151617181920212223242526272829303132333435363738394041<br></code></pre></td></tr></table></figure><p>clone 会做如下操作：</p><ol><li>拉取代码。</li><li>初始化本地仓库。</li><li>创建别名。</li></ol><h2 id="24-GitHub-团队内协作"><a href="#24-GitHub-团队内协作" class="headerlink" title="24_GitHub_团队内协作"></a>24_GitHub_团队内协作</h2><p>一、选择邀请合作者。（在仓库设置里操作）</p><img src="/2022/03/03/Git/03/03/Git/945f1ba6e29fb725ee0d852ff59c3851.png" class title="img"><p>二、填入目标合作者。</p><img src="/2022/03/03/Git/03/03/Git/ee1b6a6656efe2adbb740b38954529b9.png" class title="img"><p>三、复制网址发送给你目标合作者 ， 复制内容如下：<a href="https://github.com/atguiguyueyue/git-shTest/invitations%E3%80%82">https://github.com/atguiguyueyue/git-shTest/invitations。</a></p><img src="/2022/03/03/Git/03/03/Git/0f5ec0155e64421d315594aa537fd187.png" class title="img"><p>四、目标合作者接收到网址，用浏览器打开它，点击接受邀请。</p><img src="/2022/03/03/Git/03/03/Git/295a2398e0a3150d50530d5db21103aa.png" class title="img"><p>五、接受邀请成功之后，可以在目标合作者Github账号上看到将来共同开发远程仓库。</p><img src="/2022/03/03/Git/03/03/Git/ddca26e11277016e10eb610195567dac.png" class title="img"><p>六、目标合作者可以修改内容并 push 到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 clone 下来的文件</span><br>Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest(master)<br>$ vim hello.txt<br>Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest(master)<br>$ <span class="hljs-built_in">cat</span> hello.txt<br>hello git! hello atguigu! 2222222222222<br>hello git! hello atguigu! 33333333333333<br>hello git! hello atguigu!<br>hello git! hello atguigu!<br>hello git! hello atguigu! 我是最帅的， 比岳不群还帅<br>hello git! hello atguigu!<br>hello git! hello atguigu!<br>hello git! hello atguigu!<br>hello git! hello atguigu!<br>hello git! hello atguigu!<br>hello git! hello atguigu!<br>hello git! hello atguigu!<br>hello git! hello atguigu!<br>hello git! hello atguigu!<br>hello git! hello atguigu! master <span class="hljs-built_in">test</span><br>hello git! hello atguigu! hot-fix <span class="hljs-built_in">test</span><br><br><span class="hljs-comment"># 将编辑好的文件添加到暂存区</span><br>Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest(master)<br>$ git add hello.txt<br><br><span class="hljs-comment"># 将暂存区的文件上传到本地库</span><br>Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest(master)<br>$ git commit -m <span class="hljs-string">&quot;lhc commit&quot;</span> hello.txt<br>[master 5dabe6b] lhc commit<br>1 file changed, 1 insertion(+), 1 deletion(-)<br><br><span class="hljs-comment"># 将本地库的内容 push 到远程仓库</span><br>Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest<br>(master)<br>$ git push origin master<br>Logon failed, use ctrl+c to cancel basic credential prompt.<br>Username <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;https://github.com&#x27;</span>: atguigulinghuchong<br>Counting objects: 3, <span class="hljs-keyword">done</span>.<br>Delta compression using up to 12 threads.<br>Compressing objects: 100% (2/2), <span class="hljs-keyword">done</span>.<br>Writing objects: 100% (3/3), 309 bytes | 309.00 KiB/s, <span class="hljs-keyword">done</span>.<br>Total 3 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), completed with 1 <span class="hljs-built_in">local</span> object.<br>To https://github.com/atguiguyueyue/git-shTest.git<br>7cb4d02..5dabe6b master -&gt; master<br>12345678910111213141516171819202122232425262728293031323334353637383940414243444546<br></code></pre></td></tr></table></figure><p>七、回到发送合作邀请者的 GitHub 远程仓库中可以看到，最后一次是目标合作者提交的。</p><img src="/2022/03/03/Git/03/03/Git/b1a36bdb929e5dcb8cc03744e8806221.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/2bb7de5f45f0a6b692d18806f976a932.png" class title="img"><h2 id="25-GitHub-跨团队协作"><a href="#25-GitHub-跨团队协作" class="headerlink" title="25_GitHub_跨团队协作"></a>25_GitHub_跨团队协作</h2><img src="/2022/03/03/Git/03/03/Git/e3069f865cc2d9760801b7a06c9d213b.png" class title="跨团队协作"><p>一、将远程仓库的地址复制发给邀请跨团队协作的人，比如东方不败。</p><p>二、在东方不败的 GitHub 账号里的地址栏复制收到的链接，然后点击 网页右上方的Fork按钮，将项目叉到自己的本地仓库。</p><img src="/2022/03/03/Git/03/03/Git/4856e4845a7f0dbb54c79bd804892f5e.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/c641d9ba65f20ba58d3f98ec792ae0e5.png" class title="img"><p>叉成功后可以看到当前仓库信息。</p><img src="/2022/03/03/Git/03/03/Git/3078d75badb2fd393dbe172327dc094c.png" class title="img"><p>三、东方不败就可以在线编辑叉取过来的文件。</p><img src="/2022/03/03/Git/03/03/Git/40aa522895eb04a6c203a9bcbca25005.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/eb19249416069d158e2b4280a679063f.png" class title="img"><p>四、编辑完毕后，填写描述信息并点击左下角绿色按钮提交。</p><img src="/2022/03/03/Git/03/03/Git/c87379a8a91eb65e2961475129362da4.png" class title="img"><p>五、接下来点击上方的 Pull 请求，并创建一个新的请求。</p><img src="/2022/03/03/Git/03/03/Git/8bdb52dc24df07d8d846a4fe19985908.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/9c2f07c7ba5586e3923ba870a37c856d.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/996007e8e9fee91ef37af6818e164139.png" class title="img"><p>六、回到岳岳 GitHub 账号可以看到有一个 Pull request 请求。</p><img src="/2022/03/03/Git/03/03/Git/c634b139396001cb2fcb64b8e2a078e1.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/d666e1f3544c07821e85b602d0beffc5.png" class title="img"><p>进入到聊天室，可以讨论代码相关内容。</p><img src="/2022/03/03/Git/03/03/Git/3d97452ea50fffca42ec29308c842692.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/9c477d95ea98448b966264bdae235b64.png" class title="img"><p>七、如果代码没有问题，可以点击 Merge pull reque 合并代码。</p><img src="/2022/03/03/Git/03/03/Git/894bdb75678d7793e92f1099e5c1d080.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/2964db9c2239859ee59c4bfb9fb25513.png" class title="img"><h2 id="26-GitHub-SSH免密登录"><a href="#26-GitHub-SSH免密登录" class="headerlink" title="26_GitHub_SSH免密登录"></a>26_GitHub_SSH免密登录</h2><p>我们可以看到远程仓库中还有一个 SSH 的地址，因此我们也可以使用 SSH 进行访问。</p><img src="/2022/03/03/Git/03/03/Git/197d6964ccfb06f1eaf22f795061826d.png" class title="img"><p>先到用户的主页目录，删除.ssh文件夹（如果没有.ssh文件夹，忽略此步）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">abc@DESKTOP-R85C9HV MINGW64 ~<br>$ <span class="hljs-built_in">cd</span> ~<br><br>abc@DESKTOP-R85C9HV MINGW64 ~<br>$ <span class="hljs-built_in">pwd</span><br>/c/Users/abc<br><br>abc@DESKTOP-R85C9HV MINGW64 ~<br>$ <span class="hljs-built_in">ls</span> -a .ssh<br>./  ../  id_rsa  id_rsa.pub<br><br>abc@DESKTOP-R85C9HV MINGW64 ~<br>$ <span class="hljs-built_in">rm</span> -rf .ssh<br><br>abc@DESKTOP-R85C9HV MINGW64 ~<br>$ <span class="hljs-built_in">ls</span> -a .ssh<br><span class="hljs-built_in">ls</span>: cannot access <span class="hljs-string">&#x27;.ssh&#x27;</span>: No such file or directory<br><br>123456789101112131415161718<br></code></pre></td></tr></table></figure><p>运行命令ssh-keygen生成.ssh目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ ssh-keygen -t rsa -C abc@123.com<br>Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/c/Users/abc/.ssh/id_rsa):<br>Created directory <span class="hljs-string">&#x27;/c/Users/abc/.ssh&#x27;</span>.<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved <span class="hljs-keyword">in</span> /c/Users/abc/.ssh/id_rsa<br>Your public key has been saved <span class="hljs-keyword">in</span> /c/Users/abc/.ssh/id_rsa.pub<br>The key fingerprint is:<br>SHA256:aeNMB/hP2yiH/Dka2jK9BJciSgA8yKKLlKXX8oei7J0 jallenkwong@163.com<br>The key<span class="hljs-string">&#x27;s randomart image is:</span><br><span class="hljs-string">+---[RSA 3072]----+</span><br><span class="hljs-string">|=                |</span><br><span class="hljs-string">|++ .   .         |</span><br><span class="hljs-string">|+ = . . .        |</span><br><span class="hljs-string">|.= o . . +       |</span><br><span class="hljs-string">|o.o + + S o      |</span><br><span class="hljs-string">|o. o + @ * +     |</span><br><span class="hljs-string">|. o . ..O = .    |</span><br><span class="hljs-string">| o. . o+.=..     |</span><br><span class="hljs-string">|.. E  .o+oo.     |</span><br><span class="hljs-string">+----[SHA256]-----+</span><br><span class="hljs-string"></span><br><span class="hljs-string">abc@DESKTOP-R85C9HV MINGW64 ~</span><br><span class="hljs-string">$ ls -a .ssh</span><br><span class="hljs-string">./  ../  id_rsa  id_rsa.pub</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 生成公钥</span><br><span class="hljs-string">abc@DESKTOP-R85C9HV MINGW64 ~</span><br><span class="hljs-string">$ cat .ssh/id_rsa.pub</span><br><span class="hljs-string">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQChXy8I20br9nu4GCNeZSDkozfHvlRFpXiImYnVlHVvyvFgjct1/zMeJgot1J6+yArSJbA4TMlS9nG8owCE6C9yqhPceDlKtQbARKS2pW7IyP5OhIbcqVmWmvvd+IMmsWrWgK9S6jqp0xSqv3Z3mlcHWOAK18oOe6wF6b3SyGgCP/EcwwUGX4NG7jukhK+In9joSuAxchEg/Ba2/LVjqtfBn3hXZx/SEt+rJ0UVPIT/eEe32HflrzokNcO7l0IgyLntv5QEAsSC2hiGxrM6vF5tQpb12MVZnt1/01ytP0ruQn2TVTI96vsOAa3Cj98dAH2Z0JdqZUSVBw+o3AqXP5oeF1JWkDHZzHQjLgu741wnUZn+vVXFBu1xQyApbvH7y7cNbq8PaxU+SyZbVXbq3RwTywJsyFQvsIOM5l0tG7jUD0QAd6dP3rcNODjFTaafJaBsR9aMwvKQd/d7H+BdwFPYOFp8HB2JAzhRpvlS4Av9MCIe0474wZ0T2QOJmcs7mns= abc@123.com</span><br><span class="hljs-string"></span><br><span class="hljs-string">123456789101112131415161718192021222324252627282930313233</span><br></code></pre></td></tr></table></figure><p>然后，将生成的公钥添加至Github账号SSH设置</p><img src="/2022/03/03/Git/03/03/Git/2d213036d44d57f07ad75b23d20871ea.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/0a6a75ce73adad73a535947dce7fa525.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/0c2f4dd9ef30bdc8c47ae59e50b8851b.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/1f54c4dccd3d8a17e909042c28181fb6.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/0ad893fd8447ac90ed0ee7ceafdf582e.png" class title="img"><p>添加公钥后，可不用输入Github账号密码便可推送。</p><p>接下来通过SSH方式提交hello.txt。</p><img src="/2022/03/03/Git/03/03/Git/b2391f3377179188499d33c3ee517d53.png" class title="img"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs bash">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ <span class="hljs-built_in">cat</span> hello.txt<br>hello, git!hot-fix<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!modify from Github editor<br>hello, git!hot-fix <span class="hljs-built_in">test</span><br>hello, git!master <span class="hljs-built_in">test</span><br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ vim hello.txt<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ <span class="hljs-built_in">cat</span> hello.txt<br>hello, git!hot-fix<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!ssh <span class="hljs-built_in">test</span><br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!<br>hello, git!modify from Github editor<br>hello, git!hot-fix <span class="hljs-built_in">test</span><br>hello, git!master <span class="hljs-built_in">test</span><br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ git add .<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ git status<br>On branch master<br>Your branch is up to <span class="hljs-built_in">date</span> with <span class="hljs-string">&#x27;origin/master&#x27;</span>.<br><br>Changes to be committed:<br>  (use <span class="hljs-string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)<br>        modified:   hello.txt<br><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ git commit -m <span class="hljs-string">&quot;ssh test&quot;</span><br>[master 9602a37] ssh <span class="hljs-built_in">test</span><br> 1 file changed, 1 insertion(+), 1 deletion(-)<br><br><span class="hljs-comment"># 通过SSH推送</span><br>abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-<span class="hljs-built_in">clone</span>/HelloGit (master)<br>$ git push git@github.com:abc/HelloGit.git master<br>The authenticity of host <span class="hljs-string">&#x27;github.com (13.250.177.223)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="hljs-string">Warning: Permanently added &#x27;</span>github.com,13.250.177.223<span class="hljs-string">&#x27; (RSA) to the list of known hosts.</span><br><span class="hljs-string">Enumerating objects: 5, done.</span><br><span class="hljs-string">Counting objects: 100% (5/5), done.</span><br><span class="hljs-string">Delta compression using up to 8 threads</span><br><span class="hljs-string">Compressing objects: 100% (2/2), done.</span><br><span class="hljs-string">Writing objects: 100% (3/3), 283 bytes | 283.00 KiB/s, done.</span><br><span class="hljs-string">Total 3 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="hljs-string">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</span><br><span class="hljs-string">To github.com:JallenKwong/HelloGit.git</span><br><span class="hljs-string">   47e257f..9602a37  master -&gt; master</span><br><span class="hljs-string"></span><br><span class="hljs-string">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081</span><br></code></pre></td></tr></table></figure><p>推送成功。</p><img src="/2022/03/03/Git/03/03/Git/92d174f42df3162c15b5d2824dc06e28.png" class title="img"><h2 id="27-IDEA集成Git-环境准备"><a href="#27-IDEA集成Git-环境准备" class="headerlink" title="27_IDEA集成Git_环境准备"></a>27_IDEA集成Git_环境准备</h2><p>实操的IDEA版本为ultimate 2020.1。</p><h3 id="配置-Git-忽略文件"><a href="#配置-Git-忽略文件" class="headerlink" title="配置 Git 忽略文件"></a>配置 Git 忽略文件</h3><p>与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽 IDE 工具之<br>间的差异。例如，Maven工程根据src生成的target。</p><p>创建忽略规则文件 xxxx.ignore（前缀名随便起，建议是 git.ignore），这个文件的存放位置原则上在哪里都可以，为了便于让~&#x2F;.gitconfig 文件引用，<strong>建议</strong>也放在用户家目录下。</p><p>git.ignore 文件模版内容如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Compiled class file</span><br>*<span class="hljs-string">.class</span><br><br><span class="hljs-comment"># Log file</span><br>*<span class="hljs-string">.log</span><br><br><span class="hljs-comment"># BlueJ files</span><br>*<span class="hljs-string">.ctxt</span><br><br><span class="hljs-comment"># Mobile Tools for Java (J2ME)</span><br><span class="hljs-string">.mtj.tmp/</span><br><br><span class="hljs-comment"># Package Files #</span><br>*<span class="hljs-string">.jar</span><br>*<span class="hljs-string">.war</span><br>*<span class="hljs-string">.nar</span><br>*<span class="hljs-string">.ear</span><br>*<span class="hljs-string">.zip</span><br>*<span class="hljs-string">.tar.gz</span><br>*<span class="hljs-string">.rar</span><br><br><span class="hljs-comment"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span><br>hs_err_pid*<br><span class="hljs-string">.classpath</span><br><span class="hljs-string">.project</span><br><span class="hljs-string">.settings</span><br>target<br><span class="hljs-string">.idea</span><br>*<span class="hljs-string">.iml</span><br>1234567891011121314151617181920212223242526272829<br></code></pre></td></tr></table></figure><p>在.gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[user]</span><br>    name = Layne<br>    email = Layne@atguigu<span class="hljs-selector-class">.com</span><br><span class="hljs-selector-attr">[core]</span><br>excludesfile = C:/Users/asus/git<span class="hljs-selector-class">.ignore</span><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>注意：这里要使用“正斜线（&#x2F;）”，不要使用“反斜线（\）”</p><h3 id="在IDEA配置Git程序"><a href="#在IDEA配置Git程序" class="headerlink" title="在IDEA配置Git程序"></a>在IDEA配置Git程序</h3><p>在菜单栏File-&gt;Setting-&gt;搜索栏搜Git，配置Git的安装路径。</p><img src="/2022/03/03/Git/03/03/Git/d86ae18c01b9a08bc73f02aa6c1b3708.png" class title="img"><h2 id="28-IDEA集成Git-初始化-amp-添加-amp-提交"><a href="#28-IDEA集成Git-初始化-amp-添加-amp-提交" class="headerlink" title="28_IDEA集成Git_初始化&amp;添加&amp;提交"></a>28_IDEA集成Git_初始化&amp;添加&amp;提交</h2><p>先创建一个名叫HelloGit的Maven工程。</p><h3 id="初始化Git"><a href="#初始化Git" class="headerlink" title="初始化Git"></a>初始化Git</h3><p>在菜单栏VCS -&gt; Import into Version Control -&gt; Create Git Repository</p><img src="/2022/03/03/Git/03/03/Git/4bbfb1e76fb25655b3fe6900bb29ea47.png" class title="img"><p>选择要创建 Git 本地仓库的工程，也就是HelloGit工程，然后添加OK。</p><img src="/2022/03/03/Git/03/03/Git/5dc609978787f3e5a83dbdf954a3e039.png" class title="img"><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><p>创建一个HelloGit类，将其添加Git暂存区。</p><p>右键点击HelloGit类，选择Git-&gt;Add。可以右键点击HelloGit，更大范围地添加文件到暂存区。</p><img src="/2022/03/03/Git/03/03/Git/42d316f8c5058311afc83779b0c13551.png" class title="img"><p>添加成功后，文件名会从红色变成绿色。</p><img src="/2022/03/03/Git/03/03/Git/ec95c2b0b99d1f3a0ac8ad3291fdde50.png" class title="img"><h3 id="提交至本地库"><a href="#提交至本地库" class="headerlink" title="提交至本地库"></a>提交至本地库</h3><p>右键点击HelloGit，选择Git-&gt;Commit Directory。</p><img src="/2022/03/03/Git/03/03/Git/9a73d7bbac024bfe61951662f5bf6ded.png" class title="img"><p>添加注释后提交：</p><img src="/2022/03/03/Git/03/03/Git/281c7f26319b59e7584103c2a3ee88dd.png" class title="img"><p>添加成功后，后台打印相关信息。</p><img src="/2022/03/03/Git/03/03/Git/3bdf7a9135d3ae80b9aad4d678626491.png" class title="img"><h2 id="29-IDEA集成Git-切换版本"><a href="#29-IDEA集成Git-切换版本" class="headerlink" title="29_IDEA集成Git_切换版本"></a>29_IDEA集成Git_切换版本</h2><p>在 IDEA 的左下角，点击 Git，然后点击 Log 查看版本</p><img src="/2022/03/03/Git/03/03/Git/69e6670ea5681781c173f1c86864ae1e.png" class title="img"><p>右键选择要切换的版本，然后在菜单里点击 Checkout Revision。</p><img src="/2022/03/03/Git/03/03/Git/5530ac3d829954cebd23ed15a681769f.png" class title="img"><h2 id="30-IDEA集成Git-创建分支-amp-切换分支"><a href="#30-IDEA集成Git-创建分支-amp-切换分支" class="headerlink" title="30_IDEA集成Git_创建分支&amp;切换分支"></a>30_IDEA集成Git_创建分支&amp;切换分支</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>右键点击HelloGit，Git -&gt; Repository -&gt; Branches，或者点击IDEA的右下角，如图红圈所示部位：</p><img src="/2022/03/03/Git/03/03/Git/3e31e84cd2f7b5b95bb2639abcb1804f.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/c7544c1bade118b3177907ad903a8082.png" class title="img"><p>选择点击New Branch：</p><img src="/2022/03/03/Git/03/03/Git/b9c18ec9924788adfa432b7b924308ce.png" class title="img"><p>创建新分支：</p><img src="/2022/03/03/Git/03/03/Git/8a4a5e7cf7511d086ddac0be704e850f.png" class title="img"><h3 id="切换分支-1"><a href="#切换分支-1" class="headerlink" title="切换分支"></a>切换分支</h3><p>跟<strong>创建分支</strong>步骤相似，如点击IDEA的右下角（它显示项目正处在那条分支），如图红圈所示部位，选择你想要切换的分支，然后checkout：</p><img src="/2022/03/03/Git/03/03/Git/c7544c1bade118b3177907ad903a8082.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/afbbe9a835629f522d0b02024fe2c11b.png" class title="img"><p>或者在log窗口，右键点击分支，选择checkout：</p><img src="/2022/03/03/Git/03/03/Git/7ab6ab48e9b5a42009757b8b17b901f0.png" class title="img"><h2 id="31-IDEA集成Git-合并分支-正常合并"><a href="#31-IDEA集成Git-合并分支-正常合并" class="headerlink" title="31_IDEA集成Git_合并分支(正常合并)"></a>31_IDEA集成Git_合并分支(正常合并)</h2><p>先在hot-fix分支修改HelloGit类，并将其提交：</p><img src="/2022/03/03/Git/03/03/Git/41667203b7e067b59d1310cce4d92b15.png" class title="img"><p>然后切换到master分支，右下角的hot-fix会变为master：</p><img src="/2022/03/03/Git/03/03/Git/f183b86164b0e00e9d6e8c8c9a4a17da.png" class title="img"><p>然后，点击IDEA 窗口的右下角的master，将 hot-fix 分支合并到当前 master 分支。选择hot-fix-&gt;Merge into Current</p><img src="/2022/03/03/Git/03/03/Git/fff1d4e014223aa2cc70f0fdc237f350.png" class title="img"><p>如果代码没有冲突， 分支直接合并成功，分支合并成功以后，代码自动提交，无需手动<br>提交本地库。</p><img src="/2022/03/03/Git/03/03/Git/271421c28750e86e69accd6ac687490c.png" class title="img"><h2 id="32-IDEA集成Git-合并分支-冲突合并"><a href="#32-IDEA集成Git-合并分支-冲突合并" class="headerlink" title="32_IDEA集成Git_合并分支(冲突合并)"></a>32_IDEA集成Git_合并分支(冲突合并)</h2><p>分别在master，hot-fix分支修改HelloGit类同一行，并提交，故意制作冲突：</p><img src="/2022/03/03/Git/03/03/Git/53daad680bc796069dc1ce61682d4abc.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/f8fcf275169cdec742d31ce85ce20d7f.png" class title="img"><p>切换到master分支，将hot-fix的合并到master分支：</p><img src="/2022/03/03/Git/03/03/Git/fff1d4e014223aa2cc70f0fdc237f350.png" class title="img"><p>冲突产生，需要人工解决：</p><img src="/2022/03/03/Git/03/03/Git/eb3804e00dccfa2658aa33c972d8996e.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/a73d642f285f171eeff7ae0c9bb6111b.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/eafebea94008b4f1f0ae15f8b2092919.png" class title="img"><p>代码冲突解决，将代码提交本地库后，如图所示：</p><img src="/2022/03/03/Git/03/03/Git/15a9058f7f35112b8605cd69aaf42e35.png" class title="img"><h2 id="33-IDEA集成GitHub-设置GitHub账号"><a href="#33-IDEA集成GitHub-设置GitHub账号" class="headerlink" title="33_IDEA集成GitHub_设置GitHub账号"></a>33_IDEA集成GitHub_设置GitHub账号</h2><p>在菜单栏File-&gt;Setting-&gt;搜索栏搜GitHub，添加GitHub账号：</p><img src="/2022/03/03/Git/03/03/Git/00572764f1ed257dbc2d0f668434e6a0.png" class title="img"><p>由于网络问题，会时常登陆不了：</p><img src="/2022/03/03/Git/03/03/Git/3084475acd640b1adf621688462a1504.png" class title="img"><p>解决方法：可通过Token登陆。</p><img src="/2022/03/03/Git/03/03/Git/f3a64a809fa56624a997073836139140.png" class title="img"><p>登陆Github网站，<strong>获取Token</strong>，操作步骤看下图：</p><img src="/2022/03/03/Git/03/03/Git/2d213036d44d57f07ad75b23d20871ea.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/9b2489e068b004bee03a227760248edb.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/200c556f6f0b6d44c442b58d6e8bb7ea.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/81a82fb47421c0a802cd1cfad7297e43.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/3f596f2f68d50d277eefe1a4e6035d2d.png" class title="img"><p>将生成的token用来IDEA登录。</p><img src="/2022/03/03/Git/03/03/Git/704eafd9157658a0be35b081c3530ced.png" class title="img"><h2 id="34-IDEA集成GitHub-分享项目到GitHub"><a href="#34-IDEA集成GitHub-分享项目到GitHub" class="headerlink" title="34_IDEA集成GitHub_分享项目到GitHub"></a>34_IDEA集成GitHub_分享项目到GitHub</h2><img src="/2022/03/03/Git/03/03/Git/e057d2e660c2033ef9eae0c638aee2bc.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/a5ba3e09a890113b94420c3939dac239.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/44b2419dd2eebc2c053fb642188e8909.png" class title="img"><h2 id="35-IDEA集成GitHub-推送代码到远程库"><a href="#35-IDEA集成GitHub-推送代码到远程库" class="headerlink" title="35_IDEA集成GitHub_推送代码到远程库"></a>35_IDEA集成GitHub_推送代码到远程库</h2><img src="/2022/03/03/Git/03/03/Git/84baeaa175c6faa3ff538e0313187eff.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/1ee51e1ed781404a93655f1ad10bd9ca.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/bb9689e1fc2e1167e68ef39f73f28af7.png" class title="img"><p>注意： push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，<br>push 的操作是会被拒绝的。也就是说， 要想 push 成功，一定要保证本地库的版本要比远程库的版本高！ <strong>因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别！如果本地的代码版本已经落后，切记要先 pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送！</strong></p><h2 id="36-IDEA集成GitHub-拉取远程库代码合并本地库"><a href="#36-IDEA集成GitHub-拉取远程库代码合并本地库" class="headerlink" title="36_IDEA集成GitHub_拉取远程库代码合并本地库"></a>36_IDEA集成GitHub_拉取远程库代码合并本地库</h2><p>右键点击项目，可以将远程仓库的内容 pull 到本地仓库。</p><img src="/2022/03/03/Git/03/03/Git/193d00830bc1636e2ae2640b749b9899.png" class title="img"><p>注意： pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动<br>合并，如果自动合并失败，还会涉及到手动解决冲突的问题。</p><h2 id="37-IDEA集成GitHub-克隆代码到本地"><a href="#37-IDEA集成GitHub-克隆代码到本地" class="headerlink" title="37_IDEA集成GitHub_克隆代码到本地"></a>37_IDEA集成GitHub_克隆代码到本地</h2><p>在菜单栏的File-&gt;Close Project-&gt;Get from Version Control。</p><img src="/2022/03/03/Git/03/03/Git/f436b8f9156e5e5ce8c0e2b3b5fe3639.png" class title="img"><p>或者在菜单栏VCS-&gt;Get from Version Control。</p><img src="/2022/03/03/Git/03/03/Git/63f9691dd0a7627bd44a125942be7f31.png" class title="img"><h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><h2 id="38-码云-账号注册登录-amp-创建远程库"><a href="#38-码云-账号注册登录-amp-创建远程库" class="headerlink" title="38_码云_账号注册登录&amp;创建远程库"></a>38_码云_账号注册登录&amp;创建远程库</h2><h3 id="码云简介"><a href="#码云简介" class="headerlink" title="码云简介"></a>码云简介</h3><p>众所周知， GitHub 服务器在国外， 使用 GitHub 作为项目托管网站，如果网速不好的话，严重影响使用体验，甚至会出现登录不上的情况。针对这个情况， 大家也可以使用国内的项目托管网站-码云。</p><p>码云是开源中国推出的基于 Git 的代码托管服务中心， 网址是 <a href="https://gitee.com/">https://gitee.com/</a> ，使用<br>方式跟 GitHub 一样，而且它还是一个中文网站，如果你英文不是很好，它是最好的选择。</p><h3 id="账号注册登录"><a href="#账号注册登录" class="headerlink" title="账号注册登录"></a>账号注册登录</h3><p>略</p><h3 id="创建远程库-1"><a href="#创建远程库-1" class="headerlink" title="创建远程库"></a>创建远程库</h3><p>跟Github的类似。</p><img src="/2022/03/03/Git/03/03/Git/c8c01b7813e8578423ee2d790a580ee4.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/16341a72fa521e904f7b5a5489d4c693.png" class title="img"><p>另外，可以从GitHub与GitLab中导入仓库。</p><img src="/2022/03/03/Git/03/03/Git/c5daf945afdd2f2836c1e9e20e8e389b.png" class title="img"><h2 id="39-码云-IDEA集成Gitee码云"><a href="#39-码云-IDEA集成Gitee码云" class="headerlink" title="39_码云_IDEA集成Gitee码云"></a>39_码云_IDEA集成Gitee码云</h2><p>首先，要在IDEA安装Gitee插件。</p><p>在菜单栏选File-&gt;Settings-&gt;Plugins，搜Gitee。</p><img src="/2022/03/03/Git/03/03/Git/0241b8536ebed6fb08dcf04804c62cb0.png" class title="img"><p>安装插件成功后，重启IDEA。</p><p>功能跟在IDEA的Github插件，功能类似，如添加Gitee账号等，可参考前文IDEA的Github插件，触类旁通。</p><img src="/2022/03/03/Git/03/03/Git/87e35b8ee0fd1fd4136f2b2727cbf02a.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/89e7174170b4ecc1c4ba896e3f1c9ad9.png" class title="img"><h2 id="40-码云-导入GitHub项目"><a href="#40-码云-导入GitHub项目" class="headerlink" title="40_码云_导入GitHub项目"></a>40_码云_导入GitHub项目</h2><p>略</p><h1 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h1><h2 id="41-GitLab-简介和安装环境准备"><a href="#41-GitLab-简介和安装环境准备" class="headerlink" title="41_GitLab_简介和安装环境准备"></a>41_GitLab_简介和安装环境准备</h2><h3 id="GitLab简介"><a href="#GitLab简介" class="headerlink" title="GitLab简介"></a>GitLab简介</h3><p>GitLab 是由 GitLab Inc.开发，使用 MIT 许可证的基于网络的 Git 仓库管理工具，且具有wiki 和 issue 跟踪功能。使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务。（可搭建局域网Git仓库）。</p><p>GitLab 由乌克兰程序员 DmitriyZaporozhets 和 ValerySizov 开发，它使用 Ruby 语言写成。后来，一些部分用 Go 语言重写。截止 2018 年 5 月，该公司约有 290 名团队成员，以及 2000 多名开源贡献者。 GitLab 被 IBM， Sony， JülichResearchCenter， NASA， Alibaba，Invincea， O’ReillyMedia， Leibniz-Rechenzentrum(LRZ)， CERN， SpaceX 等组织使用。</p><h3 id="GitLab官网地址"><a href="#GitLab官网地址" class="headerlink" title="GitLab官网地址"></a>GitLab官网地址</h3><p><a href="https://about.gitlab.com/">官网地址</a></p><p><a href="https://about.gitlab.com/installation/">安装说明</a></p><h3 id="GitLab安装准备"><a href="#GitLab安装准备" class="headerlink" title="GitLab安装准备"></a>GitLab安装准备</h3><ol><li>准备一个系统为 CentOS7 以上版本的服务器， 要求内存 4G，磁盘 50G。</li><li>关闭防火墙， 并且配置好主机名和 IP，保证服务器可以上网。</li><li>此教程使用虚拟机：主机名： gitlab-server IP 地址： 192.168.6.200</li><li>Yum 在线安装 gitlab- ce 时，需要下载几百 M 的安装文件，非常耗时，所以最好提前把所需 RPM 包下载到本地，然后使用离线 rpm 的方式安装。<a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm">下载地址</a>。注：资料里提供了此 rpm 包，直接将此包上传到服务器&#x2F;opt&#x2F;module 目录下即可。</li></ol><h2 id="42-GitLab-安装-amp-初始化服务-amp-启动服务"><a href="#42-GitLab-安装-amp-初始化服务-amp-启动服务" class="headerlink" title="42_GitLab_安装&amp;初始化服务&amp;启动服务"></a>42_GitLab_安装&amp;初始化服务&amp;启动服务</h2><h3 id="编写安装脚本"><a href="#编写安装脚本" class="headerlink" title="编写安装脚本"></a>编写安装脚本</h3><p>安装 gitlab 步骤比较繁琐，因此我们可以参考<a href="https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh">官网编写 gitlab 的安装脚本</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@gitlab-server module]<span class="hljs-comment"># vim gitlab-install.sh</span><br>sudo rpm -ivh /opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm<br><br>sudo yum install -y curl policycoreutils-python openssh-server cronie<br><br>sudo lokkit -s http -s ssh<br><br>sudo yum install -y postfix<br><br>sudo service postfix start<br><br>sudo chkconfig postfix on<br><br>curl https://packages.gitlab.com/install/repositories/gitlab/gitlabce/script.rpm.sh | sudo bash<br><br>sudo EXTERNAL_URL=<span class="hljs-string">&quot;http://gitlab.example.com&quot;</span> yum -y install gitlabce<br>12345678910111213141516<br></code></pre></td></tr></table></figure><p>给脚本增加执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@gitlab-server module]<span class="hljs-comment"># chmod +x gitlab-install.sh</span><br>[root@gitlab-server module]<span class="hljs-comment"># ll</span><br>总用量 403104<br>-rw-r--r--. 1 root root 412774002 4 月 7 15:47 gitlab-ce-13.10.2-<br>ce.0.el7.x86_64.rpm<br>-rwxr-xr-x. 1 root root 416 4 月 7 15:49 gitlab-install.sh<br>123456<br></code></pre></td></tr></table></figure><p>然后执行该脚本，开始安装 gitlab-ce。注意一定要保证服务器可以上网。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@gitlab-server module]<span class="hljs-comment"># ./gitlab-install.sh</span><br>警告： /opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm: 头 V4<br>RSA/SHA1 Signature, 密钥 ID f27eab47: NOKEY<br>准备中... <span class="hljs-comment">#################################</span><br>[100%]<br>正在升级/安装...<br>1:gitlab-ce-13.10.2-ce.0.el7<br><span class="hljs-comment">################################# [100%]</span><br>。 。 。 。 。 。<br>123456789<br></code></pre></td></tr></table></figure><h3 id="初始化GitLab服务"><a href="#初始化GitLab服务" class="headerlink" title="初始化GitLab服务"></a>初始化GitLab服务</h3><p>执行以下命令初始化 GitLab 服务，过程大概需要几分钟，耐心等待…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@gitlab-server module]<span class="hljs-comment"># gitlab-ctl reconfigure</span><br>。 。 。 。 。 。<br>Running handlers:<br>Running handlers complete<br>Chef Client finished, 425/608 resources updated <span class="hljs-keyword">in</span> 03 minutes 08<br>seconds<br>gitlab Reconfigured!<br>1234567<br></code></pre></td></tr></table></figure><h3 id="启动GitLab服务"><a href="#启动GitLab服务" class="headerlink" title="启动GitLab服务"></a>启动GitLab服务</h3><p>执行以下命令启动 GitLab 服务，如需停止，执行 gitlab-ctl stop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@gitlab-server module]<span class="hljs-comment"># gitlab-ctl start</span><br>ok: run: alertmanager: (pid 6812) 134s<br>ok: run: gitaly: (pid 6740) 135s<br>ok: run: gitlab-monitor: (pid 6765) 135s<br>ok: run: gitlab-workhorse: (pid 6722) 136s<br>ok: run: logrotate: (pid 5994) 197s<br>ok: run: nginx: (pid 5930) 203s<br>ok: run: node-exporter: (pid 6234) 185s<br>ok: run: postgres-exporter: (pid 6834) 133s<br>ok: run: postgresql: (pid 5456) 257s<br>ok: run: prometheus: (pid 6777) 134s<br>ok: run: redis: (pid 5327) 263s<br>ok: run: redis-exporter: (pid 6391) 173s<br>ok: run: sidekiq: (pid 5797) 215s<br>ok: run: unicorn: (pid 5728) 221s<br>123456789101112131415<br></code></pre></td></tr></table></figure><h2 id="43-GitLab-登录GitLab并创建远程库"><a href="#43-GitLab-登录GitLab并创建远程库" class="headerlink" title="43_GitLab_登录GitLab并创建远程库"></a>43_GitLab_登录GitLab并创建远程库</h2><h3 id="登录GitLab"><a href="#登录GitLab" class="headerlink" title="登录GitLab"></a>登录GitLab</h3><p>使用主机名或者 IP 地址即可访问 GitLab 服务。可配一下 windows 的 hosts 文件（C:\Windows\System32\drivers\etc）。</p><img src="/2022/03/03/Git/03/03/Git/048956890f1e644fb77e8d58092a8b6d.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/1870c658dcabcf08fbc3b5b9fa6b2243.png" class title="img"><p>首次登陆之前，需要修改下 GitLab 提供的 root 账户的密码，要求 8 位以上，包含大小写子母和特殊符号。</p><p>然后使用修改后的密码登录 GitLab。</p><img src="/2022/03/03/Git/03/03/Git/5608650ec5e913d5ab549f30fbb477d3.png" class title="img"><p>GitLab 登录成功。</p><img src="/2022/03/03/Git/03/03/Git/3231f6dd1a07f90326ec0506eaae747f.png" class title="img"><h3 id="创建远程库-2"><a href="#创建远程库-2" class="headerlink" title="创建远程库"></a>创建远程库</h3><img src="/2022/03/03/Git/03/03/Git/2ab639dfaa57cd499133c2c4cde1222a.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/f135a7b76c745c3aeef9034a82c8afaf.png" class title="img"><img src="/2022/03/03/Git/03/03/Git/5ff82d173fe047244945c8cd255a4b33.png" class title="img"><h2 id="44-GitLab-IDEA集成GitLab"><a href="#44-GitLab-IDEA集成GitLab" class="headerlink" title="44_GitLab_IDEA集成GitLab"></a>44_GitLab_IDEA集成GitLab</h2><img src="/2022/03/03/Git/03/03/Git/1f34175126922c56c158f466dd4d665c.png" class title="img">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch</title>
    <link href="/2022/01/30/Elasticsearch/"/>
    <url>/2022/01/30/Elasticsearch/</url>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p>Elaticsearch，简称为 ES，是一个<strong>开源的高扩展的分布式全文搜索引擎</strong>， 是整个 ElasticStack 技术栈的核心</p><p>可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据</p><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>正排索引（传统）</p><table><thead><tr><th>id</th><th>content</th></tr></thead><tbody><tr><td>1001</td><td>my name is zhang san</td></tr><tr><td>1002</td><td>my name is li si</td></tr></tbody></table><p>倒排索引</p><table><thead><tr><th>keyword</th><th>id</th></tr></thead><tbody><tr><td>name</td><td>1001, 1002</td></tr><tr><td>zhang</td><td>1001</td></tr></tbody></table><p>Elasticsearch 是<strong>面向文档型数据库</strong>，一条数据就是一个文档</p><p>![img](设计模式 - 副本&#x2F;146a779da01f53e7f7a8d53132d3c7cf.png)</p><p>Elasticsearch 6.X 中，一个 index 下已经只能包含一个type， Elasticsearch 7.X 中, Type 的概念已经被删除了</p><p>Index（索引） ————–&gt; Database（数据库）</p><p>Types（类型） ————–&gt; Table（表）</p><p>Documents（文档） ————–&gt; Row（行）</p><p>Fieldes（字段） ————–&gt; Column（列）</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>对比关系型数据库，创建索引就等同于创建数据库</p><p>向 ES 服务器发 <strong>PUT</strong> 请求 ：<code>http://127.0.0.1:9200/索引名称</code></p><p>如果重复发 PUT 请求添加索引，会返回错误信息 </p><h3 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h3><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/_cat/索引名称?v</code></p><p>请求路径中的_cat 表示查看，v表示详细显示</p><table><thead><tr><th>表头</th><th>含义</th></tr></thead><tbody><tr><td>health</td><td>当前服务器健康状态： green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)</td></tr><tr><td>status</td><td>索引打开、关闭状态</td></tr><tr><td>index</td><td>索引名</td></tr><tr><td>uuid</td><td>索引统一编号</td></tr><tr><td>pri</td><td>主分片数量</td></tr><tr><td>rep</td><td>副本数量</td></tr><tr><td>docs.count</td><td>可用文档数量</td></tr><tr><td>docs.deleted</td><td>文档删除状态（逻辑删除）</td></tr><tr><td>store.size</td><td>主分片和副分片整体占空间大小</td></tr><tr><td>pri.store.size</td><td>主分片占空间大小</td></tr></tbody></table><h3 id="查看单个索引"><a href="#查看单个索引" class="headerlink" title="查看单个索引"></a>查看单个索引</h3><p>向 ES 服务器发 <strong>GET</strong> 请求 ：<code> http://127.0.0.1:9200/索引名称</code></p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>向 ES 服务器发 <strong>DELETE</strong> 请求 ：<code> http://127.0.0.1:9200/索引名称</code></p><h2 id="映射关系"><a href="#映射关系" class="headerlink" title="映射关系"></a>映射关系</h2><p>创建数据库表需要设置字段名称，类型，长度，约束等</p><p>索引库也需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)</p><p>先创建一个索引：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"># PUT http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/索引名称</span><br></code></pre></td></tr></table></figure><p>若不创建映射关系，创建文档时自动创建</p><p><strong>创建映射</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"># PUT http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/索引名称/_mapping</span><br><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>查询映射</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">#GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/索引名称/_mapping</span><br></code></pre></td></tr></table></figure><p>增加数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">#PUT http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/索引名称/_create/1001</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小米&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;男的&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;tel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1111&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查找name含有”小“数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">#GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/索引名称/_search</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查找sex含有”男“数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">#GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/索引名称/_search</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;男&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>找不想要的结果，只因创建映射时”sex”的类型为”keyword”</p><p>查询电话</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"># GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/索引名称/_search</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;tel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;11&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>报错只因创建映射时”tel”的”index”为false</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h3 id="创建（Put-amp-Post）"><a href="#创建（Put-amp-Post）" class="headerlink" title="创建（Put &amp; Post）"></a>创建（Put &amp; Post）</h3><p>文档可以类比为关系型数据库中的表数据，添加的数据格式为 JSON 格式</p><p>向 ES 服务器发 <strong>POST</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_doc</code>，需要发送请求体JSON</p><img src="/2022/01/30/Elasticsearch/20d54cba223bd9d70ea356d3e40a8161.png" style="zoom: 80%;"><p>数据创建后，由于没有指定数据唯一性标识（ID），默认ES会随机生成id</p><p>在创建时指定id： <code>http://127.0.0.1:9200/索引名称/_doc/1</code></p><p><strong>此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT</strong></p><h3 id="主键查询"><a href="#主键查询" class="headerlink" title="主键查询"></a>主键查询</h3><p>查看文档时，需要指明文档的唯一性标识，类似于 MySQL 中数据的主键查询</p><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_doc/1</code> </p><h3 id="全查询"><a href="#全查询" class="headerlink" title="全查询"></a>全查询</h3><p>查看索引下所有数据，向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><h3 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h3><p>和新增文档一样，输入相同的 URL 地址请求，如果请求体变化，会将原有的数据内容覆盖</p><h3 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h3><p>修改数据时，也可以只修改某一条数据的局部信息</p><p>向 ES 服务器发 <strong>POST</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_update/1</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//发送的结构体内容</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为手机&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）</p><p>向 ES 服务器发 <strong>DELETE</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_doc/1</code></p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="URL带参查询"><a href="#URL带参查询" class="headerlink" title="URL带参查询"></a>URL带参查询</h4><p>向 ES 服务器发 <strong>GET</strong>请求 ： <code>http://127.0.0.1:9200/索引名称/_search?q=category:小米</code></p><h4 id="请求体带参查询"><a href="#请求体带参查询" class="headerlink" title="请求体带参查询"></a>请求体带参查询</h4><p>向 ES 服务器发 <strong>GET</strong>请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小米&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="带请求体方式的查找所有内容"><a href="#带请求体方式的查找所有内容" class="headerlink" title="带请求体方式的查找所有内容"></a>带请求体方式的查找所有内容</h4><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h4><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;desc&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-comment">//must相当于数据库的&amp;&amp;</span><br><span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小米&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3999.00</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-comment">//should相当于数据库的||</span><br><span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小米&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;华为&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;gt&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2000</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小米&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;华为&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;gt&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2000</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//品牌输入“小华”，返回结果带回品牌有“小米”和华为</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小华&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="完全匹配"><a href="#完全匹配" class="headerlink" title="完全匹配"></a>完全匹配</h3><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_phrase&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;为&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h3><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_phrase&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;为&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-comment">//高亮这字段</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by&#x2F;取最大值max、平均值avg等等</p><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//按price字段进行分组</span><br><span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//聚合操作</span><br><span class="hljs-attr">&quot;price_group&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//名称，随意起名</span><br><span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//分组</span><br><span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;price&quot;</span><span class="hljs-comment">//分组字段</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面返回结果会附带原始数据，若不想要不附带原始数据的结果，向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;price_group&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;price&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>向 ES 服务器发 <strong>GET</strong> 请求 ： <code>http://127.0.0.1:9200/索引名称/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//对所有手机价格求平均值</span><br><span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;price_avg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//名称，随意起名</span><br><span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//求平均</span><br><span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;price&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Linux单节点部署"><a href="#Linux单节点部署" class="headerlink" title="Linux单节点部署"></a>Linux单节点部署</h2><p><strong>创建用户</strong></p><p>因为安全问题， Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown -R zhq:zhq /opt/elasticsearch-8.0.0/ #文件夹所有者<br></code></pre></td></tr></table></figure><p><strong>启动软件</strong></p><p>使用 ES 用户启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt/module/elasticsearch-8.0.0/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动</span><br>bin/elasticsearch<br><span class="hljs-meta prompt_">#</span><span class="language-bash">后台启动</span><br>bin/elasticsearch -d  <br></code></pre></td></tr></table></figure><p>启动时，会动态生成文件，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组</p><h2 id="Linux集群部署"><a href="#Linux集群部署" class="headerlink" title="Linux集群部署"></a>Linux集群部署</h2><p>修改配置文件</p><p>修改&#x2F;opt&#x2F;module&#x2F;es&#x2F;config&#x2F;elasticsearch.yml 文件，分发文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 加入如下配置</span><br><span class="hljs-comment">#集群名称</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">cluster-es</span><br><span class="hljs-comment">#节点名称， 每个节点的名称不能重复</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span><br><span class="hljs-comment">#ip 地址， 每个节点的地址不能重复</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-string">linux1</span><br><span class="hljs-comment">#是不是有资格主节点</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><span class="hljs-comment"># head 插件需要这打开这两个配置</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.max_content_length:</span> <span class="hljs-string">200mb</span><br><span class="hljs-comment">#es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举 master</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>]<br><span class="hljs-comment">#es7.x 之后新增的配置，节点发现</span><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;linux1:9300&quot;</span>,<span class="hljs-string">&quot;linux2:9300&quot;</span>,<span class="hljs-string">&quot;linux3:9300&quot;</span>]<br><span class="hljs-attr">gateway.recover_after_nodes:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">network.tcp.keep_alive:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">network.tcp.no_delay:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">transport.tcp.compress:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#集群内同时启动的数据任务个数，默认是 2 个</span><br><span class="hljs-attr">cluster.routing.allocation.cluster_concurrent_rebalance:</span> <span class="hljs-number">16</span><br><span class="hljs-comment">#添加或删除节点及负载均衡时并发恢复的线程个数，默认 4 个</span><br><span class="hljs-attr">cluster.routing.allocation.node_concurrent_recoveries:</span> <span class="hljs-number">16</span><br><span class="hljs-comment">#初始化数据恢复时，并发恢复线程的个数，默认 4 个</span><br><span class="hljs-attr">cluster.routing.allocation.node_initial_primaries_recoveries:</span> <span class="hljs-number">16</span><br><span class="hljs-number">1234567891011121314151617181920212223242526272829</span><br></code></pre></td></tr></table></figure><p>修改&#x2F;etc&#x2F;security&#x2F;limits.conf ，分发文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 在文件末尾中增加下面内容</span><br><span class="hljs-attribute">es</span> soft nofile <span class="hljs-number">65536</span><br><span class="hljs-attribute">es</span> hard nofile <span class="hljs-number">65536</span><br></code></pre></td></tr></table></figure><p>修改&#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf，分发文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在文件末尾中增加下面内容</span><br>es soft nofile 65536<br>es hard nofile 65536<br>* hard <span class="hljs-built_in">nproc</span> 4096<br><span class="hljs-comment"># 注： * 带表 Linux 所有用户名称</span><br></code></pre></td></tr></table></figure><p>修改&#x2F;etc&#x2F;sysctl.conf</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 在文件中增加下面内容</span><br><span class="hljs-attr">vm.max_map_count</span>=<span class="hljs-number">655360</span><br></code></pre></td></tr></table></figure><p>重新加载</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sysctl -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>访问local：9200&#x2F;_cat&#x2F;nodes</p><h2 id="Elasticsearch进阶"><a href="#Elasticsearch进阶" class="headerlink" title="Elasticsearch进阶"></a>Elasticsearch进阶</h2><h4 id="索引Index"><a href="#索引Index" class="headerlink" title="索引Index"></a>索引Index</h4><p>一个索引就是一个拥有几分相似特征的文档的集合，一个索引由一个名字来标识（必须全部是小写字母），在一个集群中，可以定义任意多的索引</p><h4 id="文档Document"><a href="#文档Document" class="headerlink" title="文档Document"></a>文档Document</h4><p>一个文档是一个可被索引的基础信息单元，也就是一条数据，文档以 JSON格式来表示</p><p>在一个 index里面，你可以存储任意多的文档</p><h4 id="字段Field"><a href="#字段Field" class="headerlink" title="字段Field"></a>字段Field</h4><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识</p><h4 id="映射Mapping"><a href="#映射Mapping" class="headerlink" title="映射Mapping"></a>映射Mapping</h4><p>mapping 是处理数据的方式和规则方面做一些限制，如：某个字段的数据类型、默认值、分析器、是否被索引等等</p><h4 id="分片Shards"><a href="#分片Shards" class="headerlink" title="分片Shards"></a>分片Shards</h4><p>一个索引可以存储超出单个节点硬件限制的大量数据，<strong>Elasticsearch 提供了将索引划分成多份的能力，每一份就称之为分片。</strong>当你创建一个索引的时候，你可以指定你想要的分片的数量。<strong>每个分片本身也是一个功能完善并且独立的“索引”</strong></p><p>分片很重要，主要有两方面的原因：</p><ol><li>允许你水平分割 &#x2F; 扩展你的内容容量。</li><li>允许你在分片之上进行分布式的、并行的操作，进而提高性能&#x2F;吞吐量。</li></ol><h4 id="副本Replicas"><a href="#副本Replicas" class="headerlink" title="副本Replicas"></a>副本Replicas</h4><p>Elasticsearch 允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片(副本)</p><p>复制分片之所以重要，有两个主要原因：</p><ul><li>在分片&#x2F;节点失败的情况下，<strong>提供了高可用性</strong>。因为这个原因，注意到复制分片从不与原&#x2F;主要（original&#x2F;primary）分片置于同一节点上是非常重要的</li><li>扩展你的搜索量&#x2F;吞吐量，因为搜索可以在所有的副本上并行运行</li></ul><h4 id="分配Allocation"><a href="#分配Allocation" class="headerlink" title="分配Allocation"></a>分配Allocation</h4><p>将分片分配给某个节点的过程，包括分配主分片或者副本。如果是副本，还包含从主分片复制数据的过程。这个过程是由 master 节点完成的</p><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p>![img](设计模式 - 副本&#x2F;e4d13427545dc174eb9ccface85c1f0c.png)</p><p>一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同cluster.name 配置的节点组成。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据</p><p>当一个节点被选举成为主节点时， 它将负责管理集群范围内的所有变更。 而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点</p><h3 id="路由计算"><a href="#路由计算" class="headerlink" title="路由计算"></a>路由计算</h3><p>当索引一个文档的时候，文档会被存储到一个主分片中。 当我们创建文档时，根据下面公式决定到哪个主片：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">shard</span> <span class="hljs-operator">=</span> hash(routing) % number_of_primary_shards<br></code></pre></td></tr></table></figure><p>routing 是一个可变值，默认是文档的 _id 。 routing 通过hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量）后得到余数 </p><h3 id="分片控制"><a href="#分片控制" class="headerlink" title="分片控制"></a>分片控制</h3><p>每个节点都有能力处理任意请求。每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上</p><img src="/2022/01/30/Elasticsearch/3940d6cdb197259368542b86384911a4.png" alt="img" style="zoom: 50%;"><p>当发送请求的时候， 为了扩展负载，更好的做法是轮询集群中所有的节点</p><h3 id="数据写流程"><a href="#数据写流程" class="headerlink" title="数据写流程"></a>数据写流程</h3><p>新建、索引和删除请求都是写操作， 必须在主分片上面完成之后才能被复制到相关的副本分片。</p><p>![img](设计模式 - 副本&#x2F;418356a32516c222a8d366df021276c2.png)</p><p>在客户端收到成功响应时，文档变更已经在主分片和所有副本分片执行完成，变更是安全的。有一些可选的<strong>请求参数</strong>允许您影响这个过程，可能以数据安全为代价提升性能。这些选项很少使用，因为 Elasticsearch 已经很快，但是为了完整起见， 请参考下文：</p><ol><li>consistency</li></ol><ul><li>即一致性。在默认设置下，即使仅仅是在试图执行一个写操作之前，主分片都会要求必须要有规定数量quorum（或者换种说法，也即必须要有大多数）的分片副本处于活跃可用状态，才会去执行写操作（其中分片副本 可以是主分片或者副本分片）。这是为了避免在发生网络分区故障（network partition）的时候进行写操作，进而导致数据不一致。 规定数量即： <strong>int((primary + number_of_replicas) &#x2F; 2 ) + 1</strong></li><li>consistency 参数的值可以设为：<ul><li>one ：只要主分片状态 ok 就允许执行写操作。</li><li>all：必须要主分片和所有副本分片的状态没问题才允许执行写操作。</li><li>quorum：默认值为quorum , 即大多数的分片副本状态没问题就允许执行写操作。</li></ul></li><li>注意，规定数量的计算公式中number_of_replicas指的是在索引设置中的设定副本分片数，而不是指当前处理活动状态的副本分片数。如果你的索引设置中指定了当前索引拥有3个副本分片，那规定数量的计算结果即：<strong>int((1 primary + 3 replicas) &#x2F; 2) + 1 &#x3D; 3</strong>，如果此时你只启动两个节点，那么处于活跃状态的分片副本数量就达不到规定数量，也因此您将无法索引和删除任何文档。</li></ul><ol><li>timeout<ul><li>如果没有足够的副本分片会发生什么？Elasticsearch 会等待，希望更多的分片出现。默认情况下，它最多等待 1 分钟。 如果你需要，你可以使用timeout参数使它更早终止：100是100 毫秒，30s是30秒。</li></ul></li></ol><p>新索引默认有1个副本分片，这意味着为满足规定数量应该需要两个活动的分片副本。 但是，这些默认的设置会阻止我们在单一节点上做任何事情。为了避免这个问题，要求只有当number_of_replicas 大于1的时候，规定数量才会执行。</p><h3 id="数据读流程"><a href="#数据读流程" class="headerlink" title="数据读流程"></a>数据读流程</h3><p>![img](设计模式 - 副本&#x2F;7139df83ee6f7a59c5d3252d34cc8762.png)</p><p>在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。</p><h3 id="更新流程-amp-批量操作流程"><a href="#更新流程-amp-批量操作流程" class="headerlink" title="更新流程 &amp; 批量操作流程"></a>更新流程 &amp; 批量操作流程</h3><h4 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h4><p>部分更新一个文档结合了先前说明的读取和写入流程：</p><p>![img](设计模式 - 副本&#x2F;ca41993144aee98311671278725437cd.png)</p><p>部分更新一个文档的步骤如下：</p><ol><li>客户端向Node 1发送更新请求。</li><li>它将请求转发到主分片所在的Node 3 。</li><li>Node 3从主分片检索文档，修改_source字段中的JSON，并且尝试重新索引主分片的文档。如果文档已经被另一个进程修改,它会重试步骤3 ,超过retry_on_conflict次后放弃。</li><li>如果 Node 3成功地更新文档，它将新版本的文档并行转发到Node 1和 Node 2上的副本分片，重新建立索引。一旦所有副本分片都返回成功，Node 3向协调节点也返回成功，协调节点向客户端返回成功。</li></ol><p>当主分片把更改转发到副本分片时， 它不会转发更新请求。 相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。 如果 Elasticsearch 仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。</p><h4 id="批量操作流程"><a href="#批量操作流程" class="headerlink" title="批量操作流程"></a>批量操作流程</h4><p><strong>mget和 bulk API的模式类似于单文档模式。</strong>区别在于协调节点知道每个文档存在于哪个分片中。它将整个多文档请求分解成每个分片的多文档请求，并且将这些请求并行转发到每个参与节点。</p><p>协调节点一旦收到来自每个节点的应答，就将每个节点的响应收集整理成单个响应，返回给客户端。</p><p>![img](设计模式 - 副本&#x2F;b90ea9c79138d8361ca339cff205fdb0.png)</p><p><strong>用单个 mget 请求取回多个文档所需的步骤顺序:</strong></p><ol><li>客户端向 Node 1 发送 mget 请求。</li><li>Node 1为每个分片构建多文档获取请求，然后并行转发这些请求到托管在每个所需的主分片或者副本分片的节点上。一旦收到所有答复，Node 1 构建响应并将其返回给客户端。</li></ol><p>可以对docs数组中每个文档设置routing参数。</p><p>bulk API， 允许在单个批量请求中执行多个创建、索引、删除和更新请求。</p><p>![img](设计模式 - 副本&#x2F;83499315a7b8ab81471a88f3e142f0a8.png)</p><p><strong>bulk API 按如下步骤顺序执行：</strong></p><ol><li>客户端向Node 1 发送 bulk请求。</li><li>Node 1为每个节点创建一个批量请求，并将这些请求并行转发到每个包含主分片的节点主机。</li><li>主分片一个接一个按顺序执行每个操作。当每个操作成功时,主分片并行转发新文档（或删除）到副本分片，然后执行下一个操作。一旦所有的副本分片报告所有操作成功，该节点将向协调节点报告成功，协调节点将这些响应收集整理并返回给客户端。</li></ol><h3 id="倒排索引-1"><a href="#倒排索引-1" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>分片是Elasticsearch最小的工作单元。但是究竟什么是一个分片，它是如何工作的？</p><p>传统的数据库每个字段存储单个值，但这对全文检索并不够。文本字段中的每个单词需要被搜索，对数据库意味着需要单个字段有索引多值的能力。最好的支持是一个字段多个值需求的数据结构是<strong>倒排索引</strong>。</p><h4 id="倒排索引原理"><a href="#倒排索引原理" class="headerlink" title="倒排索引原理"></a>倒排索引原理</h4><p>Elasticsearch使用一种称为倒排索引的结构，它适用于快速的全文搜索。</p><p>见其名，知其意，有倒排索引，肯定会对应有正向索引。正向索引（forward index），反向索引（inverted index）更熟悉的名字是<strong>倒排索引</strong>。</p><p>所谓的<strong>正向索引</strong>，就是搜索引擎会将待搜索的文件都对应一个文件ID，搜索时将这个ID和搜索关键字进行对应，形成K-V对，然后对关键字进行统计计数。（统计？？下文有解释）</p><p>![img](设计模式 - 副本&#x2F;cba02cc6d7c5f054dfe5d58fafac9a6a.png)</p><p>但是互联网上收录在搜索引擎中的文档的数目是个天文数字，这样的索引结构根本无法满足实时返回排名结果的要求。所以，搜索引擎会将正向索引重新构建为倒排索引，即把文件ID对应到关键词的映射转换为关键词到文件ID的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词。</p><p>![img](设计模式 - 副本&#x2F;a1f52e96e0ac218b5024d708202afba4.png)</p><h4 id="倒排索引的例子"><a href="#倒排索引的例子" class="headerlink" title="倒排索引的例子"></a>倒排索引的例子</h4><p>一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。例如，假设我们有两个文档，每个文档的content域包含如下内容：</p><ul><li>The quick brown fox jumped over the lazy dog</li><li>Quick brown foxes leap over lazy dogs in summer</li></ul><p>为了创建倒排索引，我们首先将每个文档的content域拆分成单独的词（我们称它为词条或tokens )，创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：</p><p>![img](设计模式 - 副本&#x2F;3cc642e9bae776c3e617f9d117d41e21.png)</p><p>现在，如果我们想搜索 <code>quick</code> <code>brown</code> ，我们只需要查找包含每个词条的文档：</p><p>![img](设计模式 - 副本&#x2F;f26aaa01e011edfa68736956b2f1ddea.png)</p><p>两个文档都匹配，但是第一个文档比第二个匹配度更高。如果我们使用仅计算匹配词条数量的简单相似性算法，那么我们可以说，对于我们查询的相关性来讲，第一个文档比第二个文档更佳。</p><p>但是，我们目前的倒排索引有一些问题：</p><ul><li><code>Quick</code>和<code>quick</code>以独立的词条出现，然而用户可能认为它们是相同的词。</li><li><code>fox</code>和<code>foxes</code>非常相似，就像<code>dog</code>和<code>dogs</code>；他们有相同的词根。</li><li><code>jumped</code>和<code>leap</code>，尽管没有相同的词根，但他们的意思很相近。他们是同义词。</li></ul><p>使用前面的索引搜索<code>+Quick</code> <code>+fox</code>不会得到任何匹配文档。(记住，＋前缀表明这个词必须存在）。</p><p>只有同时出现<code>Quick</code>和<code>fox</code> 的文档才满足这个查询条件，但是第一个文档包含<code>quick</code> <code>fox</code> ，第二个文档包含<code>Quick</code> <code>foxes</code> 。</p><p>我们的用户可以合理的期望两个文档与查询匹配。我们可以做的更好。</p><p>如果我们将词条规范为标准模式，那么我们可以找到与用户搜索的词条不完全一致，但具有足够相关性的文档。例如：</p><ul><li><code>Quick</code>可以小写化为<code>quick</code>。</li><li><code>foxes</code>可以词干提取变为词根的格式为<code>fox</code>。类似的，<code>dogs</code>可以为提取为<code>dog</code>。</li><li><code>jumped</code>和<code>leap</code>是同义词，可以索引为相同的单词<code>jump</code> 。</li></ul><p>现在索引看上去像这样：</p><p>![img](设计模式 - 副本&#x2F;19813d1918c89461303377444cf85c8c.png)</p><p>这还远远不够。我们搜索<code>+Quick</code> <code>+fox</code> 仍然会失败，因为在我们的索引中，已经没有<code>Quick</code>了。但是，如果我们对搜索的字符串使用与content域相同的标准化规则，会变成查询<code>+quick</code> <code>+fox</code>，这样两个文档都会匹配！分词和标准化的过程称为<strong>分析</strong>，这非常重要。你只能搜索在索引中出现的词条，所以索引文本和查询字符串必须标准化为相同的格式。</p><h3 id="进阶-文档搜索"><a href="#进阶-文档搜索" class="headerlink" title="进阶-文档搜索"></a>进阶-文档搜索</h3><h4 id="不可改变的倒排索引"><a href="#不可改变的倒排索引" class="headerlink" title="不可改变的倒排索引"></a>不可改变的倒排索引</h4><p>早期的全文检索会为整个文档集合建立一个很大的倒排索引并将其写入到磁盘。 一旦新的索引就绪，旧的就会被其替换，这样最近的变化便可以被检索到。</p><p>倒排索引被写入磁盘后是不可改变的：它永远不会修改。</p><ul><li>不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。</li><li>一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。</li><li>其它缓存(像filter缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。</li><li>写入单个大的倒排索引允许数据被压缩，减少磁盘IO和需要被缓存到内存的索引的使用量。</li></ul><p>当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。</p><h4 id="动态更新索引"><a href="#动态更新索引" class="headerlink" title="动态更新索引"></a>动态更新索引</h4><p>如何在保留不变性的前提下实现倒排索引的更新？</p><p>答案是：用更多的索引。通过增加新的补充索引来反映新近的修改，而不是直接重写整个倒排索引。每一个倒排索引都会被轮流查询到,从最早的开始查询完后再对结果进行合并。</p><p>Elasticsearch基于Lucene，这个java库引入了<strong>按段搜索</strong>的概念。每一段本身都是一个倒排索引，但索引在 Lucene 中除表示所有段的集合外，还增加了提交点的概念—一个列出了所有已知段的文件。</p><p>![img](设计模式 - 副本&#x2F;9ee1adbb2d55e710257e01b812a6d8cf.png)</p><p>按段搜索会以如下流程执行：</p><p>一、新文档被收集到内存索引缓存。</p><p>![img](设计模式 - 副本&#x2F;9d499fde966ee9825fa5a424d8357489.png)</p><p>二、不时地, 缓存被提交。</p><ol><li>一个新的段，一个追加的倒排索引，被写入磁盘。</li><li>一个新的包含新段名字的提交点被写入磁盘。</li><li>磁盘进行同步，所有在文件系统缓存中等待的写入都刷新到磁盘，以确保它们被写入物理文件</li></ol><p>三、新的段被开启，让它包含的文档可见以被搜索。</p><p>四、内存缓存被清空，等待接收新的文档。</p><p>![img](设计模式 - 副本&#x2F;f74828ff58cc4635a97e88706a221e50.png)</p><p>当一个查询被触发，所有已知的段按顺序被查询。词项统计会对所有段的结果进行聚合，以保证每个词和每个文档的关联都被准确计算。这种方式可以用相对较低的成本将新文档添加到索引。</p><p>段是不可改变的，所以既不能从把文档从旧的段中移除，也不能修改旧的段来进行反映文档的更新。取而代之的是，每个提交点会包含一个.del 文件，文件中会列出这些被删除文档的段信息。</p><p>当一个<strong>文档被“删除”</strong>时，它实际上只是在 .del 文件中被标记删除。一个被标记删除的文档仍然可以被查询匹配到，但它会在最终结果被返回前从结果集中移除。</p><p><strong>文档更新</strong>也是类似的操作方式:当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。</p><h3 id="进阶-文档刷新-amp-文档刷写-amp-文档合并"><a href="#进阶-文档刷新-amp-文档刷写-amp-文档合并" class="headerlink" title="进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并"></a>进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并</h3><p>![img](设计模式 - 副本&#x2F;b3b31c1e592d5aa794e7c9fcb259c924.png)</p><p>![img](设计模式 - 副本&#x2F;521c25f0f16247240234d1b8eb3c5f25.png)</p><h4 id="近实时搜索"><a href="#近实时搜索" class="headerlink" title="近实时搜索"></a>近实时搜索</h4><p>随着按段（per-segment）搜索的发展，一个新的文档从索引到可被搜索的延迟显著降低了。新文档在几分钟之内即可被检索，但这样还是不够快。磁盘在这里成为了瓶颈。<strong>提交（Commiting）一个新的段到磁盘需要一个fsync来确保段被物理性地写入磁盘</strong>，这样在断电的时候就不会丢失数据。但是fsync操作代价很大；如果每次索引一个文档都去执行一次的话会造成很大的性能问题。</p><p>我们需要的是一个更轻量的方式来使一个文档可被搜索，这意味着fsync要从整个过程中被移除。在Elasticsearch和磁盘之间是<strong>文件系统缓存</strong>。像之前描述的一样，在内存索引缓冲区中的文档会被写入到一个新的段中。但是这里新段会被先写入到文件系统缓存—这一步代价会比较低，稍后再被刷新到磁盘—这一步代价比较高。不过只要文件已经在缓存中，就可以像其它文件一样被打开和读取了。</p><p>![img](设计模式 - 副本&#x2F;a679d4f5f4bfa6913a53316251beef2a.png)</p><p>Lucene允许新段被写入和打开，使其包含的文档在未进行一次完整提交时便对搜索可见。这种方式比进行一次提交代价要小得多，并且在不影响性能的前提下可以被频繁地执行。</p><p>![img](设计模式 - 副本&#x2F;673d3a77e254fa3a5a6f5293ffb125ab.png)</p><p>在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做refresh。默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch是近实时搜索：文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。</p><p>这些行为可能会对新用户造成困惑：他们索引了一个文档然后尝试搜索它，但却没有搜到。这个问题的解决办法是用refresh API执行一次手动刷新：&#x2F;usersl_refresh</p><p>尽管刷新是比提交轻量很多的操作，它还是会有性能开销。当写测试的时候，手动刷新很有用，但是不要在生产环境下每次索引一个文档都去手动刷新。相反，你的应用需要意识到Elasticsearch 的近实时的性质，并接受它的不足。</p><p>并不是所有的情况都需要每秒刷新。可能你正在使用Elasticsearch索引大量的日志文件，你可能想优化索引速度而不是近实时搜索，可以通过设置refresh_interval ，降低每个索引的刷新频率</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;refresh_interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;30s&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>refresh_interval可以在既存索引上进行动态更新。在生产环境中，当你正在建立一个大的新索引时，可以先关闭自动刷新，待开始使用该索引时，再把它们调回来。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 关闭自动刷新</span><br>PUT <span class="hljs-regexp">/users/</span>_settings<br>&#123; <span class="hljs-string">&quot;refresh_interval&quot;</span>: -<span class="hljs-number">1</span> &#125;<br><br><span class="hljs-comment"># 每一秒刷新</span><br>PUT <span class="hljs-regexp">/users/</span>_settings<br>&#123; <span class="hljs-string">&quot;refresh_interval&quot;</span>: <span class="hljs-string">&quot;1s&quot;</span> &#125;<br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><h4 id="持久化变更"><a href="#持久化变更" class="headerlink" title="持久化变更"></a>持久化变更</h4><p>如果没有用fsync把数据从文件系统缓存刷（flush）到硬盘，我们不能保证数据在断电甚至是程序正常退出之后依然存在。为了保证Elasticsearch 的可靠性，需要确保数据变化被持久化到磁盘。在动态更新索引，我们说一次完整的提交会将段刷到磁盘，并写入一个包含所有段列表的提交点。Elasticsearch 在启动或重新打开一个索引的过程中使用这个提交点来判断哪些段隶属于当前分片。</p><p>即使通过每秒刷新(refresh）实现了近实时搜索，我们仍然需要经常进行完整提交来确保能从失败中恢复。但在两次提交之间发生变化的文档怎么办?我们也不希望丢失掉这些数据。Elasticsearch 增加了一个translog ，或者叫事务日志，在每一次对Elasticsearch进行操作时均进行了日志记录。</p><p>整个流程如下:</p><p>一、一个文档被索引之后，就会被添加到内存缓冲区，并且追加到了 translog</p><p>![img](设计模式 - 副本&#x2F;baeab48c8d6b87660ac4fb954e9c9731.png)</p><p>二、刷新（refresh）使分片每秒被刷新（refresh）一次：</p><ul><li>这些在内存缓冲区的文档被写入到一个新的段中，且没有进行fsync操作。</li><li>这个段被打开，使其可被搜索。</li><li>内存缓冲区被清空。</li></ul><p>![img](设计模式 - 副本&#x2F;17be4247e6b23f31b1e589c70d61e817.png)</p><p>三、这个进程继续工作，更多的文档被添加到内存缓冲区和追加到事务日志。</p><p>![img](设计模式 - 副本&#x2F;4b5c4a3a3ffb4c84625bb283f6a67018.png)</p><p>四、每隔一段时间—例如translog变得越来越大，索引被刷新（flush）；一个新的translog被创建，并且一个全量提交被执行。</p><ul><li>所有在内存缓冲区的文档都被写入一个新的段。</li><li>缓冲区被清空。</li><li>一个提交点被写入硬盘。</li><li>文件系统缓存通过fsync被刷新（flush） 。</li><li>老的translog被删除。</li></ul><p>translog 提供所有还没有被刷到磁盘的操作的一个持久化纪录。当Elasticsearch启动的时候，它会从磁盘中使用最后一个提交点去恢复己知的段，并且会重放translog 中所有在最后一次提交后发生的变更操作。</p><p>translog 也被用来提供实时CRUD。当你试着通过ID查询、更新、删除一个文档，它会在尝试从相应的段中检索之前，首先检查 translog任何最近的变更。这意味着它总是能够实时地获取到文档的最新版本。</p><p>![img](设计模式 - 副本&#x2F;11c7d2cc05244e669eb8402dd8049de9.png)</p><p>执行一个提交并且截断translog 的行为在 Elasticsearch被称作一次flush。分片每30分钟被自动刷新（flush)，或者在 translog 太大的时候也会刷新。</p><p>你很少需要自己手动执行flush操作，通常情况下，自动刷新就足够了。这就是说，在重启节点或关闭索引之前执行 flush有益于你的索引。当Elasticsearch尝试恢复或重新打开一个索引，它需要重放translog中所有的操作，所以如果日志越短，恢复越快。</p><p>translog 的目的是保证操作不会丢失，在文件被fsync到磁盘前，被写入的文件在重启之后就会丢失。默认translog是每5秒被fsync刷新到硬盘，或者在每次写请求完成之后执行（e.g. index, delete, update, bulk）。这个过程在主分片和复制分片都会发生。最终，基本上，这意味着在整个请求被fsync到主分片和复制分片的translog之前，你的客户端不会得到一个200 OK响应。</p><p>在每次请求后都执行一个fsync会带来一些性能损失，尽管实践表明这种损失相对较小（特别是 bulk 导入，它在一次请求中平摊了大量文档的开销）。</p><p>但是对于一些大容量的偶尔丢失几秒数据问题也并不严重的集群，使用异步的 fsync还是比较有益的。比如，写入的数据被缓存到内存中，再每5秒执行一次 fsync 。如果你决定使用异步translog 的话，你需要保证在发生 crash 时，丢失掉 sync_interval时间段的数据也无所谓。请在决定前知晓这个特性。如果你不确定这个行为的后果，最好是使用默认的参数{“index.translog.durability”: “request”}来避免数据丢失。</p><h4 id="段合并"><a href="#段合并" class="headerlink" title="段合并"></a>段合并</h4><p>由于自动刷新流程每秒会创建一个新的段，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。每一个段都会消耗文件句柄、内存和 cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。</p><p>Elasticsearch通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。</p><p>段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档（或被更新文档的旧版本）不会被拷贝到新的大段中。</p><p>启动段合并不需要你做任何事。进行索引和搜索时会自动进行。</p><p>一、当索引的时候，刷新（refresh）操作会创建新的段并将段打开以供搜索使用。</p><p>二、合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中。这并不会中断索引和搜索。</p><p>![img](设计模式 - 副本&#x2F;c907ca35bd7c0393d46aec2c7038af19.png)</p><p>三、一旦合并结束，老的段被删除</p><ul><li>新的段被刷新(flush)到了磁盘。</li><li>写入一个包含新段且排除旧的和较小的段的新提交点。</li><li>新的段被打开用来搜索。老的段被删除。</li></ul><p>![img](设计模式 - 副本&#x2F;a00cc1c19652c47fcfb663aaf337a41b.png)</p><p>合并大的段需要消耗大量的 I&#x2F;O 和 CPU 资源，如果任其发展会影响搜索性能。 Elasticsearch在默认情况下会对合并流程进行资源限制，所以搜索仍然有足够的资源很好地执行。</p><h3 id="进阶-文档分析"><a href="#进阶-文档分析" class="headerlink" title="进阶-文档分析"></a>进阶-文档分析</h3><p>分析包含下面的过程：</p><ul><li>将一块文本分成适合于倒排索引的独立的词条。</li><li>将这些词条统一化为标准格式以提高它们的“可搜索性”，或者recall。</li></ul><p>分析器执行上面的工作。分析器实际上是将三个功能封装到了一个包里：</p><ul><li>字符过滤器：首先，字符串按顺序通过每个 字符过滤器 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉 HTML，或者将 &amp; 转化成 and。</li><li>分词器：其次，字符串被分词器分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</li><li>Token 过滤器：最后，词条按顺序通过每个 token 过滤器 。这个过程可能会改变词条（例如，小写化Quick ），删除词条（例如， 像 a， and， the 等无用词），或者增加词条（例如，像jump和leap这种同义词）</li></ul><h4 id="内置分析器"><a href="#内置分析器" class="headerlink" title="内置分析器"></a>内置分析器</h4><p>Elasticsearch还附带了可以直接使用的预包装的分析器。接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">&quot;Set the shape to semi-transparent by calling <span class="hljs-built_in">set_trans</span>(<span class="hljs-number">5</span>)&quot;<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>标准分析器</li></ul><p>标准分析器是Elasticsearch 默认使用的分析器。它是分析各种语言文本最常用的选择。它根据Unicode 联盟定义的单词边界划分文本。删除绝大部分标点。最后，将词条小写。它会产生：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">set</span>, <span class="hljs-keyword">the</span>, shape, <span class="hljs-built_in">to</span>, semi, transparent, <span class="hljs-keyword">by</span>, calling, set_trans, <span class="hljs-number">5</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>简单分析器</li></ul><p>简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">set</span>, <span class="hljs-keyword">the</span>, shape, <span class="hljs-built_in">to</span>, semi, transparent, <span class="hljs-keyword">by</span>, calling, <span class="hljs-built_in">set</span>, trans<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>空格分析器</li></ul><p>空格分析器在空格的地方划分文本。它会产生:</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">Set</span>, the, shape, <span class="hljs-keyword">to</span>, semi<span class="hljs-params">-transparent</span>, <span class="hljs-keyword">by</span>, calling, set_trans(<span class="hljs-number">5</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>语言分析器</li></ul><p>特定语言分析器可用于很多语言。它们可以考虑指定语言的特点。例如，英语分析器附带了一组英语无用词（常用单词，例如and或者the ,它们对相关性没有多少影响），它们会被删除。由于理解英语语法的规则，这个分词器可以提取英语单词的词干。</p><p>英语分词器会产生下面的词条：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">set</span>, shape, semi, transpar, <span class="hljs-keyword">call</span>, set_tran, <span class="hljs-number">5</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>注意看transparent、calling和 set_trans已经变为词根格式。</p><h4 id="分析器使用场景"><a href="#分析器使用场景" class="headerlink" title="分析器使用场景"></a>分析器使用场景</h4><p>当我们索引一个文档，它的全文域被分析成词条以用来创建倒排索引。但是，当我们在全文域搜索的时候，我们需要将查询字符串通过相同的分析过程，以保证我们搜索的词条格式与索引中的词条格式一致。</p><p>全文查询，理解每个域是如何定义的，因此它们可以做正确的事：</p><ul><li>当你查询一个全文域时，会对查询字符串应用相同的分析器，以产生正确的搜索词条列表。</li><li>当你查询一个精确值域时，不会分析查询字符串，而是搜索你指定的精确值。</li></ul><h4 id="测试分析器"><a href="#测试分析器" class="headerlink" title="测试分析器"></a>测试分析器</h4><p>有些时候很难理解分词的过程和实际被存储到索引中的词条，特别是你刚接触Elasticsearch。为了理解发生了什么，你可以使用analyze API来看文本是如何被分析的。在消息体里，指定分析器和要分析的文本。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">#GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:9200/_analyze</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Text to analyze&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>结果中每个元素代表一个单独的词条：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;to&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;analyze&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">12345678910111213141516171819202122232425</span><br></code></pre></td></tr></table></figure><ul><li>token是实际存储到索引中的词条。</li><li>start_ offset 和end_ offset指明字符在原始字符串中的位置。</li><li>position指明词条在原始文本中出现的位置。</li></ul><h4 id="指定分析器"><a href="#指定分析器" class="headerlink" title="指定分析器"></a>指定分析器</h4><p>当Elasticsearch在你的文档中检测到一个新的字符串域，它会自动设置其为一个全文字符串域，使用 标准 分析器对它进行分析。你不希望总是这样。可能你想使用一个不同的分析器，适用于你的数据使用的语言。有时候你想要一个字符串域就是一个字符串域，不使用分析，直接索引你传入的精确值，例如用户 ID 或者一个内部的状态域或标签。要做到这一点，我们必须手动指定这些域的映射。</p><p>（细粒度指定分析器）</p><h4 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h4><p>首先通过 Postman 发送 GET 请求查询分词效果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"># GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:9200/_analyze</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;测试单词&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>ES 的默认分词器无法识别中文中测试、 单词这样的词汇，而是简单的将每个字拆完分为一个词。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;测&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;试&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;单&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;词&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132</span><br></code></pre></td></tr></table></figure><p>这样的结果显然不符合我们的使用要求，所以我们需要下载 ES 对应版本的中文分词器。</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.8.0">IK 中文分词器下载网址</a></p><p>将解压后的后的文件夹放入 ES 根目录下的 plugins 目录下，重启 ES 即可使用。</p><p>我们这次加入新的查询参数”analyzer”:“ik_max_word”。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"># GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:9200/_analyze</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;测试单词&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_max_word&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><ul><li>ik_max_word：会将文本做最细粒度的拆分。</li><li>ik_smart：会将文本做最粗粒度的拆分。</li></ul><p>使用中文分词后的结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;测试&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;单词&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">123456789101112131415161718</span><br></code></pre></td></tr></table></figure><p>ES 中也可以进行扩展词汇，首先查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">#GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:9200/_analyze</span><br><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;弗雷尔卓德&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_max_word&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>仅仅可以得到每个字的分词结果，我们需要做的就是使分词器识别到弗雷尔卓德也是一个词语。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;弗&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;雷&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;尔&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;卓&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;德&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839</span><br></code></pre></td></tr></table></figure><ol><li>首先进入 ES 根目录中的 plugins 文件夹下的 ik 文件夹，进入 config 目录，创建 custom.dic文件，写入“弗雷尔卓德”。</li><li>同时打开 IKAnalyzer.cfg.xml 文件，将新建的 custom.dic 配置其中。</li><li>重启 ES 服务器 。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>custom.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br> <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>12345678910111213<br></code></pre></td></tr></table></figure><p>扩展后再次查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"># GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:9200/_analyze</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;测试单词&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_max_word&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;弗雷尔卓德&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">1234567891011</span><br></code></pre></td></tr></table></figure><h4 id="自定义分析器"><a href="#自定义分析器" class="headerlink" title="自定义分析器"></a>自定义分析器</h4><p>虽然Elasticsearch带有一些现成的分析器，然而在分析器上Elasticsearch真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。在分析与分析器我们说过，一个分析器就是在一个包里面组合了三种函数的一个包装器，三种函数按照顺序被执行：</p><h5 id="字符过滤器"><a href="#字符过滤器" class="headerlink" title="字符过滤器"></a>字符过滤器</h5><p>字符过滤器用来整理一个尚未被分词的字符串。例如，如果我们的文本是HTML格式的，它会包含像<code>&lt;p&gt;</code>或者<code>&lt;div&gt;</code>这样的HTML标签，这些标签是我们不想索引的。我们可以使用html清除字符过滤器来移除掉所有的HTML标签，并且像把<code>Á</code>转换为相对应的Unicode字符Á 这样，转换HTML实体。一个分析器可能有0个或者多个字符过滤器。</p><h5 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h5><p>一个分析器必须有一个唯一的分词器。分词器把字符串分解成单个词条或者词汇单元。标准分析器里使用的标准分词器把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p><p>例如，关键词分词器完整地输出接收到的同样的字符串，并不做任何分词。空格分词器只根据空格分割文本。正则分词器根据匹配正则表达式来分割文本。</p><h5 id="词单元过滤器"><a href="#词单元过滤器" class="headerlink" title="词单元过滤器"></a>词单元过滤器</h5><p>经过分词，作为结果的词单元流会按照指定的顺序通过指定的词单元过滤器。词单元过滤器可以修改、添加或者移除词单元。我们已经提到过lowercase和stop词过滤器，但是在Elasticsearch 里面还有很多可供选择的词单元过滤器。词干过滤器把单词遏制为词干。ascii_folding过滤器移除变音符，把一个像”très”这样的词转换为“tres”。</p><p>ngram和 edge_ngram词单元过滤器可以产生适合用于部分匹配或者自动补全的词单元。</p><h5 id="自定义分析器例子"><a href="#自定义分析器例子" class="headerlink" title="自定义分析器例子"></a>自定义分析器例子</h5><p>接下来，我们看看如何创建自定义的分析器：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json">#PUT http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:9200/my_index</span><br><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;char_filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;&amp;_to_and&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mapping&quot;</span><span class="hljs-punctuation">,</span> <br>                    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;&amp;=&gt; and &quot;</span><br>                    <span class="hljs-punctuation">]</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;my_stopwords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stop&quot;</span><span class="hljs-punctuation">,</span> <br>                    <span class="hljs-attr">&quot;stopwords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;the&quot;</span><span class="hljs-punctuation">,</span> <br>                        <span class="hljs-string">&quot;a&quot;</span><br>                    <span class="hljs-punctuation">]</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;my_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;custom&quot;</span><span class="hljs-punctuation">,</span> <br>                    <span class="hljs-attr">&quot;char_filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;html_strip&quot;</span><span class="hljs-punctuation">,</span> <br>                        <span class="hljs-string">&quot;&amp;_to_and&quot;</span><br>                    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>                    <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span> <br>                    <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;lowercase&quot;</span><span class="hljs-punctuation">,</span> <br>                        <span class="hljs-string">&quot;my_stopwords&quot;</span><br>                    <span class="hljs-punctuation">]</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839</span><br></code></pre></td></tr></table></figure><p>索引被创建以后，使用 analyze API 来 测试这个新的分析器：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"># GET http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/my_index/_analyze</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;The quick &amp; brown fox&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_analyzer&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>返回结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;quick&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;and&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brown&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">17</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fox&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132</span><br></code></pre></td></tr></table></figure><h3 id="进阶-文档控制"><a href="#进阶-文档控制" class="headerlink" title="进阶-文档控制"></a>进阶-文档控制</h3><h4 id="文档冲突"><a href="#文档冲突" class="headerlink" title="文档冲突"></a>文档冲突</h4><p>当我们使用index API更新文档，可以一次性读取原始文档，做我们的修改，然后重新索引整个文档。最近的索引请求将获胜：无论最后哪一个文档被索引，都将被唯一存储在 Elasticsearch 中。如果其他人同时更改这个文档，他们的更改将丢失。</p><p>很多时候这是没有问题的。也许我们的主数据存储是一个关系型数据库，我们只是将数据复制到Elasticsearch中并使其可被搜索。也许两个人同时更改相同的文档的几率很小。或者对于我们的业务来说偶尔丢失更改并不是很严重的问题。</p><p>但有时丢失了一个变更就是非常严重的。试想我们使用Elasticsearch 存储我们网上商城商品库存的数量，每次我们卖一个商品的时候，我们在 Elasticsearch 中将库存数量减少。有一天，管理层决定做一次促销。突然地，我们一秒要卖好几个商品。假设有两个web程序并行运行，每一个都同时处理所有商品的销售。</p><p>![img](设计模式 - 副本&#x2F;49ca2ec50db3ddd0fcd1f364ac600b96.png)</p><p>web_1 对stock_count所做的更改已经丢失，因为 web_2不知道它的 stock_count的拷贝已经过期。结果我们会认为有超过商品的实际数量的库存，因为卖给顾客的库存商品并不存在，我们将让他们非常失望。</p><p>变更越频繁，读数据和更新数据的间隙越长，也就越可能丢失变更。在数据库领域中，有两种方法通常被用来确保并发更新时变更不会丢失：</p><ul><li>悲观并发控制：这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。一个典型的例子是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。</li><li>乐观并发控制：Elasticsearch 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何解决冲突。例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。</li></ul><h4 id="乐观并发控制"><a href="#乐观并发控制" class="headerlink" title="乐观并发控制"></a>乐观并发控制</h4><p>Elasticsearch是分布式的。当文档创建、更新或删除时，新版本的文档必须复制到集群中的其他节点。Elasticsearch也是异步和并发的，这意味着这些复制请求被并行发送，并且到达目的地时也许顺序是乱的。Elasticsearch需要一种方法确保文档的旧版本不会覆盖新的版本。</p><p>当我们之前讨论index , GET和DELETE请求时，我们指出每个文档都有一个_version（版本号），当文档被修改时版本号递增。Elasticsearch使用这个version号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。</p><p>我们可以利用version号来确保应用中相互冲突的变更不会导致数据丢失。我们通过指定想要修改文档的 version号来达到这个目的。如果该版本不是当前版本号，我们的请求将会失败。</p><p>老的版本es使用version，但是新版本不支持了，会报下面的错误，提示我们用if_seq _no和if _primary_term</p><p>创建索引</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">#PUT http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/shopping/_create/1001</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">1234567891011121314</span><br></code></pre></td></tr></table></figure><p>更新数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">#POST http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/shopping/_update/1001</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;华为手机&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">1234567891011121314</span><br></code></pre></td></tr></table></figure><p>旧版本使用的防止冲突更新方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">#POST http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/shopping/_update/1001?version=1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;华为手机2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;root_cause&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;action_request_validation_exception&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;action_request_validation_exception&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">12345678910111213</span><br></code></pre></td></tr></table></figure><p>新版本使用的防止冲突更新方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">#POST http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/shopping/_update/1001?if_seq_no=11&amp;if_primary_term=15</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;华为手机2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">1234567891011121314</span><br></code></pre></td></tr></table></figure><h4 id="外部系统版本控制"><a href="#外部系统版本控制" class="headerlink" title="外部系统版本控制"></a>外部系统版本控制</h4><p>一个常见的设置是使用其它数据库作为主要的数据存储，使用Elasticsearch做数据检索，这意味着主数据库的所有更改发生时都需要被复制到Elasticsearch，如果多个进程负责这一数据同步，你可能遇到类似于之前描述的并发问题。</p><p>如果你的主数据库已经有了版本号，或一个能作为版本号的字段值比如timestamp，那么你就可以在 Elasticsearch 中通过增加 version_type&#x3D;extermal到查询字符串的方式重用这些相同的版本号，版本号必须是大于零的整数，且小于9.2E+18，一个Java中 long类型的正值。</p><p>外部版本号的处理方式和我们之前讨论的内部版本号的处理方式有些不同，Elasticsearch不是检查当前_version和请求中指定的版本号是否相同，而是检查当前_version是否小于指定的版本号。如果请求成功，外部的版本号作为文档的新_version进行存储。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">#POST http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:9200/shopping/_doc/1001?version=300&amp;version_type=external</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;华为手机2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">300</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">13</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">1234567891011121314</span><br></code></pre></td></tr></table></figure><h3 id="进阶-文档展示-Kibana"><a href="#进阶-文档展示-Kibana" class="headerlink" title="进阶-文档展示-Kibana"></a>进阶-文档展示-Kibana</h3><p>Kibana是一个免费且开放的用户界面，能够让你对Elasticsearch 数据进行可视化，并让你在Elastic Stack 中进行导航。你可以进行各种操作，从跟踪查询负载，到理解请求如何流经你的整个应用，都能轻松完成。</p><p><a href="https://artifacts.elastic.co/downloads/kibana/kibana-7.8.0-windows-x86_64.zip">Kibana下载网址</a></p><p>一、解压缩下载的 zip 文件。</p><p>二、修改 config&#x2F;kibana.yml 文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 默认端口</span><br><span class="hljs-attr">server.port:</span> <span class="hljs-number">5601</span><br><span class="hljs-comment"># ES 服务器的地址</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://localhost:9200&quot;</span>]<br><span class="hljs-comment"># 索引名</span><br><span class="hljs-attr">kibana.index:</span> <span class="hljs-string">&quot;.kibana&quot;</span><br><span class="hljs-comment"># 支持中文</span><br><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br><span class="hljs-number">12345678</span><br></code></pre></td></tr></table></figure><p>三、Windows 环境下执行 bin&#x2F;kibana.bat 文件。（首次启动有点耗时）</p><p>四、通过浏览器访问：<a href="http://localhost:5601。">http://localhost:5601。</a></p><p>![img](设计模式 - 副本&#x2F;d066ba5e26916624b5d056d04c5580ac.png)</p><h2 id="框架集成"><a href="#框架集成" class="headerlink" title="框架集成"></a>框架集成</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--导入该包进行操作虽然这里文档添加成功，但是会报错：Unable to parse response body for Response&#123;requestLine=PUT /books/_doc/1?timeout=1m。建议使用8.0的客户端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--当springboot版本中没有es的8.x版本时导入以下--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>co.elastic.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticSearchConfig</span> &#123;<br><br>    <span class="hljs-comment">//注入IOC容器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ElasticsearchClient <span class="hljs-title function_">elasticsearchClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">RestClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> RestClient.builder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHost</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9200</span>,<span class="hljs-string">&quot;http&quot;</span>)).build();<br>        <span class="hljs-type">ElasticsearchTransport</span> <span class="hljs-variable">transport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestClientTransport</span>(client,<span class="hljs-keyword">new</span> <span class="hljs-title class_">JacksonJsonpMapper</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticsearchClient</span>(transport);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="索引CRUD"><a href="#索引CRUD" class="headerlink" title="索引CRUD"></a>索引CRUD</h3><h4 id="增加index"><a href="#增加index" class="headerlink" title="增加index"></a>增加index</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ElasticsearchClient client;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-comment">//写法比RestHighLevelClient更加简洁</span><br>    <span class="hljs-type">CreateIndexResponse</span> <span class="hljs-variable">indexResponse</span> <span class="hljs-operator">=</span> client.indices().create(c -&gt; c.index(<span class="hljs-string">&quot;user&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查询Index"><a href="#查询Index" class="headerlink" title="查询Index"></a>查询Index</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">GetIndexResponse</span> <span class="hljs-variable">getIndexResponse</span> <span class="hljs-operator">=</span> client.indices().get(i -&gt; i.index(<span class="hljs-string">&quot;user&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判断index是否存在"><a href="#判断index是否存在" class="headerlink" title="判断index是否存在"></a>判断index是否存在</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">existsTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">BooleanResponse</span> <span class="hljs-variable">booleanResponse</span> <span class="hljs-operator">=</span> client.indices().exists(e -&gt; e.index(<span class="hljs-string">&quot;user&quot;</span>));<br>    System.out.println(booleanResponse.value());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除index"><a href="#删除index" class="headerlink" title="删除index"></a>删除index</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">DeleteIndexResponse</span> <span class="hljs-variable">deleteIndexResponse</span> <span class="hljs-operator">=</span> client.indices().delete(d -&gt; d.index(<span class="hljs-string">&quot;user&quot;</span>));<br>    System.out.println(deleteIndexResponse.acknowledged());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Document-CRUD"><a href="#Document-CRUD" class="headerlink" title="Document CRUD"></a>Document CRUD</h3><h4 id="插入document"><a href="#插入document" class="headerlink" title="插入document"></a>插入document</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDocumentTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user1&quot;</span>, <span class="hljs-number">10</span>);<br>    <span class="hljs-type">IndexResponse</span> <span class="hljs-variable">indexResponse</span> <span class="hljs-operator">=</span> client.index(i -&gt; i<br>                                               .index(<span class="hljs-string">&quot;user&quot;</span>)<br><br>                                               <span class="hljs-comment">//设置id</span><br>                                               .id(<span class="hljs-string">&quot;1&quot;</span>)<br><br>                                               <span class="hljs-comment">//传入user对象</span><br>                                               .document(user));<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="更新Document"><a href="#更新Document" class="headerlink" title="更新Document"></a>更新Document</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateDocumentTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    UpdateResponse&lt;User&gt; updateResponse = client.update(u -&gt; u<br>                                                        .index(<span class="hljs-string">&quot;user&quot;</span>)<br>                                                        .id(<span class="hljs-string">&quot;1&quot;</span>)<br>                                                        .doc(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user2&quot;</span>, <span class="hljs-number">13</span>))<br>                                                        , User.class);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判断Document是否存在"><a href="#判断Document是否存在" class="headerlink" title="判断Document是否存在"></a>判断Document是否存在</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">existDocumentTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">BooleanResponse</span> <span class="hljs-variable">indexResponse</span> <span class="hljs-operator">=</span> client.exists(e -&gt; e.index(<span class="hljs-string">&quot;user&quot;</span>).id(<span class="hljs-string">&quot;1&quot;</span>));<br>    System.out.println(indexResponse.value());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查询Document"><a href="#查询Document" class="headerlink" title="查询Document"></a>查询Document</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDocumentTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    GetResponse&lt;User&gt; getResponse = client.get(g -&gt; g<br>                                               .index(<span class="hljs-string">&quot;user&quot;</span>)<br>                                               .id(<span class="hljs-string">&quot;1&quot;</span>)<br>                                               , User.class<br>                                              );<br>    System.out.println(getResponse.source());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除Document"><a href="#删除Document" class="headerlink" title="删除Document"></a>删除Document</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteDocumentTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">DeleteResponse</span> <span class="hljs-variable">deleteResponse</span> <span class="hljs-operator">=</span> client.delete(d -&gt; d<br>                                                  .index(<span class="hljs-string">&quot;user&quot;</span>)<br>                                                  .id(<span class="hljs-string">&quot;1&quot;</span>)<br>                                                 );<br>    System.out.println(deleteResponse.id());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="批量插入Document"><a href="#批量插入Document" class="headerlink" title="批量插入Document"></a>批量插入Document</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bulkTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user1&quot;</span>, <span class="hljs-number">11</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user2&quot;</span>, <span class="hljs-number">12</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user3&quot;</span>, <span class="hljs-number">13</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user4&quot;</span>, <span class="hljs-number">14</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user5&quot;</span>, <span class="hljs-number">15</span>));<br>    List&lt;BulkOperation&gt; bulkOperationArrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//遍历添加到bulk中</span><br>    <span class="hljs-keyword">for</span>(User user : userList)&#123;<br>        bulkOperationArrayList.add(BulkOperation.of(o-&gt;o.index(i-&gt;i.document(user))));<br>    &#125;<br><br>    <span class="hljs-type">BulkResponse</span> <span class="hljs-variable">bulkResponse</span> <span class="hljs-operator">=</span> client.bulk(b -&gt; b.index(<span class="hljs-string">&quot;user&quot;</span>)<br>                                            .operations(bulkOperationArrayList));<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分页查询</span><br>SearchResponse&lt;Test&gt; response3 = client.search(s -&gt; s<br>             .index(<span class="hljs-string">&quot;newapi&quot;</span>)<br>             .query(q -&gt; q<br>                     .matchAll(m -&gt; m)<br>             )<br>             .from(<span class="hljs-number">4</span>)<br>             .size(<span class="hljs-number">2</span>)<br>     , Test.class);<br>System.out.println(response3.took());<br>System.out.println(response3.hits().total().value());<br>response3.hits().hits().forEach(e -&gt; System.out.println(e.source().toString()));<br></code></pre></td></tr></table></figure><p>Elasticsearch Java API Client客户端中的分页查询主要使用SearchResponse的from和size方法传入参数，其中from代表数据开始的下表位置，size代表每次查询需要获取到的文档数量。</p><h4 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询排序</span><br>SearchResponse&lt;Test&gt; response4 = client.search(s -&gt; s<br>             .index(<span class="hljs-string">&quot;newapi&quot;</span>)<br>             .query(q -&gt; q<br>                     .matchAll(m -&gt; m)<br>             )<br>             .sort(sort -&gt; sort<br>                     .field(f -&gt; f<br>                             .field(<span class="hljs-string">&quot;age&quot;</span>)<br>                             .order(SortOrder.Desc)<br>                     )<br>             )<br>     , Test.class);<br>System.out.println(response4.took());<br>System.out.println(response4.hits().total().value());<br>response4.hits().hits().forEach(e -&gt; System.out.println(e.source().toString()));<br></code></pre></td></tr></table></figure><p>Elasticsearch Java API Client客户端中的查询排序主要使用sort方法传入排序参数，我这里使用了lambda形式传入参数。与RestAPI一致，需要传入field名称以及排序方式，如ASC、DESC。</p><h4 id="过滤字段"><a href="#过滤字段" class="headerlink" title="过滤字段"></a>过滤字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">SearchResponse&lt;Test&gt; response5 = client.search(s -&gt; s<br>             .index(<span class="hljs-string">&quot;newapi&quot;</span>)<br>             .query(q -&gt; q<br>                     .matchAll(m -&gt; m)<br>             )<br>             .sort(sort -&gt; sort<br>                     .field(f -&gt; f<br>                             .field(<span class="hljs-string">&quot;age&quot;</span>)<br>                             .order(SortOrder.Desc)<br>                     )<br>             )<br>             .source(source -&gt; source<br>                             .filter(f -&gt; f<br>                               .includes(<span class="hljs-string">&quot;name&quot;</span>)<br>                               .excludes(<span class="hljs-string">&quot;&quot;</span>)<br>                             )<br>             )<br>     , Test.class);<br>System.out.println(response5.took());<br>System.out.println(response5.hits().total().value());<br>response5.hits().hits().forEach(e -&gt; System.out.println(e.source().toString()));<br></code></pre></td></tr></table></figure><p>Elasticsearch Java API Client客户端中的过滤字段同样使用source传入参数，与RestAPI相同，使用includes和excludes来标记白名单或黑名单模式，其中includes代表白名单，只返回指定的字段。excludes代表黑名单，不返回指定的字段</p><h4 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 组合查询</span><br>SearchResponse&lt;Test&gt; response6 = client.search(s -&gt; s<br>                                               .index(<span class="hljs-string">&quot;newapi&quot;</span>)<br>                                               .query(q -&gt; q<br>                                                      .bool(b -&gt; b<br>                                                            .must(must -&gt; must<br>                                                                  .match(m -&gt; m<br>                                                                         .field(<span class="hljs-string">&quot;age&quot;</span>)<br>                                                                         .query(<span class="hljs-number">30</span>)<br>                                                                        )<br>                                                                 )<br>                                                            .must(must -&gt; must<br>                                                                  .match(m -&gt; m<br>                                                                         .field(<span class="hljs-string">&quot;sex&quot;</span>)<br>                                                                         .query(<span class="hljs-string">&quot;男&quot;</span>)<br>                                                                        )<br>                                                                 )<br>                                                            .should(should -&gt; should<br>                                                                    .match(m -&gt; m<br>                                                                           .field(<span class="hljs-string">&quot;age&quot;</span>)<br>                                                                           .query(<span class="hljs-number">30</span>)<br>                                                                          )<br>                                                                   )<br>                                                            .should(should -&gt; should<br>                                                                    .match(m -&gt; m<br>                                                                           .field(<span class="hljs-string">&quot;age&quot;</span>)<br>                                                                           .query(<span class="hljs-number">40</span>)<br>                                                                          )<br>                                                                   )<br>                                                           )<br>                                                     )<br>                                               , Test.class);<br>System.out.println(response6.took());<br>System.out.println(response6.hits().total().value());<br>response6.hits().hits().forEach(e -&gt; System.out.println(e.source().toString()));<br></code></pre></td></tr></table></figure><p>Elasticsearch Java API Client客户端中的组合查询，与RestAPI保持一直，使用bool下的must或should来代表必须满足某条件或只需满足某条件。</p><h4 id="范围查询-1"><a href="#范围查询-1" class="headerlink" title="范围查询"></a>范围查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 范围查询</span><br>SearchResponse&lt;Test&gt; response7 = client.search(s -&gt; s<br>                                               .index(<span class="hljs-string">&quot;newapi&quot;</span>)<br>                                               .query(q -&gt; q<br>                                                      .range(r -&gt; r<br>                                                             .field(<span class="hljs-string">&quot;age&quot;</span>)<br>                                                             .gte(JsonData.of(<span class="hljs-number">30</span>))<br>                                                             .lt(JsonData.of(<span class="hljs-number">40</span>))<br>                                                            )<br>                                                     )<br>                                               , Test.class);<br>System.out.println(response7.took());<br>System.out.println(response7.hits().total().value());<br>response7.hits().hits().forEach(e -&gt; System.out.println(e.source().toString()));<br></code></pre></td></tr></table></figure><p>Elasticsearch Java API Client客户端中的范围查询，与组合查询不同的是，使用了range而不是bool。field参数代表需要判断的字段，ge、gte、lt、lte分别代表大于、大于等于、小于、小于等于。</p><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模糊查询</span><br>SearchResponse&lt;Test&gt; response8 = client.search(s -&gt; s<br>                                               .index(<span class="hljs-string">&quot;newapi&quot;</span>)<br>                                               .query(q -&gt; q<br>                                                      .fuzzy(f -&gt; f<br>                                                             .field(<span class="hljs-string">&quot;name&quot;</span>)<br>                                                             .value(<span class="hljs-string">&quot;wangwu&quot;</span>)<br>                                                             .fuzziness(<span class="hljs-string">&quot;1&quot;</span>))<br>                                                     )<br>                                               , Test.class);<br>System.out.println(response8.took());<br>System.out.println(response8.hits().total().value());<br>response8.hits().hits().forEach(e -&gt; System.out.println(e.source().toString()));<br></code></pre></td></tr></table></figure><p>Elasticsearch Java API Client客户端中的模糊查询，使用fuzzy而不是like，其中field代表需要判断的字段名称，value代表需要模糊查询的关键词，fuzziness代表可以与关键词有误差的字数，可选值为0、1、2这三项。</p><h4 id="高亮查询-1"><a href="#高亮查询-1" class="headerlink" title="高亮查询"></a>高亮查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 高亮查询</span><br>SearchResponse&lt;Test&gt; response9 = client.search(s -&gt; s<br>                                               .index(<span class="hljs-string">&quot;newapi&quot;</span>)<br>                                               .query(q -&gt; q<br>                                                      .term(t -&gt; t<br>                                                            .field(<span class="hljs-string">&quot;name&quot;</span>)<br>                                                            .value(<span class="hljs-string">&quot;wangwu&quot;</span>)<br>                                                           )<br>                                                     )<br>                                               .highlight(h -&gt; h<br>                                                          .fields(<span class="hljs-string">&quot;name&quot;</span>, f -&gt; f<br>                                                                  .preTags(<span class="hljs-string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>)<br>                                                                  .postTags(<span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>)<br>                                                                 )<br>                                                         )<br>                                               , Test.class);<br>System.out.println(response9.took());<br>System.out.println(response9.hits().total().value());<br>response9.hits().hits().forEach(e -&gt; &#123;<br>    System.out.println(e.source().toString());<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : e.highlight().entrySet()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;Key = &quot;</span> + entry.getKey());<br>        entry.getValue().forEach(System.out::println);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>Elasticsearch Java API Client客户端中的高亮查询，主要用于给查询出的关键词添加一个标识符，便于前端展示。使用highlight字段，其中fields的key代表需要标记的字段名称，preTags代表需要添加标记的前缀，postTags代表需要添加标记的后缀。同时响应的获取方式也有所改变，具体可以参照上述代码。</p><h4 id="聚合查询-1"><a href="#聚合查询-1" class="headerlink" title="聚合查询"></a>聚合查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 聚合查询</span><br>SearchResponse&lt;Test&gt; response10 = client.search(s -&gt; s<br>                                                .index(<span class="hljs-string">&quot;newapi&quot;</span>)<br>                                                .aggregations(<span class="hljs-string">&quot;maxAge&quot;</span>, a -&gt; a<br>                                                              .max(m -&gt; m<br>                                                                   .field(<span class="hljs-string">&quot;age&quot;</span>)<br>                                                                  )<br>                                                             )<br>                                                , Test.class);<br>System.out.println(response10.took());<br>System.out.println(response10.hits().total().value());<br>response10.hits().hits().forEach(e -&gt; &#123;<br>    System.out.println(e.source().toString());<br>&#125;);<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Aggregate&gt; entry : response10.aggregations().entrySet()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;Key = &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, Value = &quot;</span> + entry.getValue().max().value());<br>&#125;<br></code></pre></td></tr></table></figure><p>Elasticsearch Java API Client客户端中的聚合查询，主要用于数据的统计，这里演示一下获取最大值。首先使用的是aggregations方法，aggregations方法的key可以自行起名，max代表最大值，可以参照api获取更多的查询方式，这里只演示下max方法，其他方法与其类似。field代表需要获取最大值的字段名称。响应的获取方式也有所不同，需要拿到响应中的aggregations参数，我这里直接进行Map循环以获取统计出的最大值数据。</p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分组查询</span><br>SearchResponse&lt;Test&gt; response11 = client.search(s -&gt; s<br>                                                .index(<span class="hljs-string">&quot;newapi&quot;</span>)<br>                                                .size(<span class="hljs-number">100</span>)<br>                                                .aggregations(<span class="hljs-string">&quot;ageGroup&quot;</span>, a -&gt; a<br>                                                              .terms(t -&gt; t<br>                                                                     .field(<span class="hljs-string">&quot;age&quot;</span>)<br>                                                                    )<br>                                                             )<br>                                                , Test.class);<br>System.out.println(response11.took());<br>System.out.println(response11.hits().total().value());<br>response11.hits().hits().forEach(e -&gt; &#123;<br>    System.out.println(e.source().toString());<br>&#125;);<br><span class="hljs-type">Aggregate</span> <span class="hljs-variable">aggregate</span> <span class="hljs-operator">=</span> response11.aggregations().get(<span class="hljs-string">&quot;ageGroup&quot;</span>);<br><span class="hljs-type">LongTermsAggregate</span> <span class="hljs-variable">lterms</span> <span class="hljs-operator">=</span> aggregate.lterms();<br>Buckets&lt;LongTermsBucket&gt; buckets = lterms.buckets();<br><span class="hljs-keyword">for</span> (LongTermsBucket b : buckets.array()) &#123;<br>    System.out.println(b.key() + <span class="hljs-string">&quot; : &quot;</span> + b.docCount());<br>&#125;<br></code></pre></td></tr></table></figure><p>Elasticsearch Java API Client客户端中的分组查询，也是属于聚合查询的一部分，所以同样使用aggregations方法，并使用terms方法来代表分组查询，field传入需要分组的字段，最后通过响应中的aggregations参数来获取，这里需要根据数据的类型来获取最后的分组结果，我这里因为统计的是数字类型，所以使用LongTermsAggregate来获取结果，最后打印出docCount属性即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis</title>
    <link href="/2022/01/30/Mybatis/"/>
    <url>/2022/01/30/Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="MyBatis特性"><a href="#MyBatis特性" class="headerlink" title="MyBatis特性"></a>MyBatis特性</h2><ol><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO映射成数据库中的记录</li><li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ol><h2 id="MyBatis使用"><a href="#MyBatis使用" class="headerlink" title="MyBatis使用"></a>MyBatis使用</h2><p><strong>引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>创建MyBatis的核心配置文件</strong></p><p>在类的根路径下新建mybatis-config.xml配置文件  （src可以等同看成是类的根路径，maven中时target&#x2F;classes路径下是根路径）</p><p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--开启延迟加载--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--设置mybatis输出日志--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        typeAlias：设置某个具体的类型的别名</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">        type：需要设置别名的类型的全类名</span><br><span class="hljs-comment">        alias：设置此类型的别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.zhq.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.zhq.mybatis.bean.User&quot; alias=&quot;user&quot;&gt;</span><br><span class="hljs-comment">        &lt;/typeAlias&gt;--&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zhq.mybatis.bean&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    environments：设置多个连接数据库的环境</span><br><span class="hljs-comment">    属性：</span><br><span class="hljs-comment">    default：设置默认使用的环境的id</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql_test&quot;</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        environment：设置具体的连接数据库的环境信息</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">       id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql_test&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            transactionManager：设置事务管理方式</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">           type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span><br><span class="hljs-comment">            type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span><br><span class="hljs-comment">            type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            dataSource：设置数据源</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">            type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span><br><span class="hljs-comment">            type=&quot;POOLED&quot;：使用数据库连接池</span><br><span class="hljs-comment">            type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span><br><span class="hljs-comment">            type=&quot;JNDI&quot;：调用上下文中的数据源</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置驱动类的全类名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的连接地址--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的用户名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的密码--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt; --&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span><br><span class="hljs-comment">此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span><br><span class="hljs-comment">mapper接口要和mapper映射文件的名字一致</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zhq.mybatis.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>创建mapper接口</strong></p><p>MyBatis中的mapper接口相当于以前的dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;  <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建MyBatis的映射文件</strong></p><ul><li><p>相关概念：ORM（Object Relationship Mapping）对象关系映射</p><ul><li>对象：Java的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ul></li><li><p>MyBatis中可以面向接口操作数据，要保证两个一致</p><ul><li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;接口的全限定名称&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- id是唯一标识，调用SQL语句的标识，同dao接口的方法名同名 --&gt;</span><br>    <span class="hljs-comment">&lt;!--查询结果集的列名要和对象属性名一致，不一致要用as给字段名取--&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--查询所有--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudent&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        select name, sex, age from student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--查询--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectOne&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        select name, sex, age from student where name=#&#123;name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--插入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        insert into student values(#&#123;name&#125;, #&#123;sex&#125;, #&#123;age&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--修改--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateStudent&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        update student set sex=#&#123;sex&#125; where name=#&#123;name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--删除--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteStudent&quot;</span>&gt;</span><br>        delete from student where name=#&#123;name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    简单类型：</span><br><span class="hljs-comment">        byte，short，int，long，float，double，char，boolean</span><br><span class="hljs-comment">        Byte，Short，Integer，Long，Float，Double，Character，Boolean</span><br><span class="hljs-comment">        String</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><p>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系</p><ul><li>resultType：自动映射，用于属性名和表中字段名一致的情况</li><li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li></ul><p><strong>通过junit测试功能</strong></p><ul><li>SqlSession：代表Java程序和数据库之间的会话</li><li>SqlSessionFactory：是生产SqlSession的工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//读取MyBatis的核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">//获取SqlSessionFactoryBuilder对象</span><br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>        <span class="hljs-comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br>        <span class="hljs-comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//通过代理模式创建UserMapper接口的代理实现类对象</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insertUser();<br>        <span class="hljs-comment">//提交事务</span><br>        <span class="hljs-comment">//sqlSession.commit();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要自动提交事务，则在获取sqlSession对象时，使用<code>sqlSessionFactory.openSession(true);</code></p><h2 id="获取参数值"><a href="#获取参数值" class="headerlink" title="获取参数值"></a>获取参数值</h2><p>MyBatis获取参数值的两种方式：${}和#{}</p><ul><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</li><li>#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h3 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h3><p>可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;username&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <br>    select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h3><p>MyBatis会自动将这些参数放在一个map集合中</p><ul><li>通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</li><li>使用arg或者param，arg是从arg0开始的，param是从param1开始</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <br>    select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h3><p>可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;usermane&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>map.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.checkLoginByMap(map);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h3><p>可以使用${}和#{}通过访问实体类对象中的属性名获取属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">12</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;123@321.com&quot;</span>);<br>mapper.insertUser(user);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h3><p>会将这些参数放在map集合中</p><ol><li>以@Param注解的value属性值为键，以参数为值</li><li>以param1,param2…为键，以参数为值</li></ol><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mapper.CheckLoginByParam(<span class="hljs-meta">@Param(&quot;username&quot;)</span><span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-meta">@Param(&quot;password&quot;)</span><span class="hljs-string">&quot;123456&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CheckLoginByParam&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h2><p>如果查询出的数据只有一条</p><ol><li>实体类对象接收</li><li>List集合接收</li><li>Map集合接收</li></ol><p>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException</p><ol><li>实体类类型的LIst集合接收</li><li>Map类型的LIst集合接收</li><li>在mapper接口的方法上添加@MapKey注解</li></ol><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--List&lt;User&gt; <span class="hljs-title function_">getUserByLike</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getUserByLike&quot;</span> resultType=<span class="hljs-string">&quot;User&quot;</span>&gt;<br>&lt;!--select * from t_user where username like <span class="hljs-string">&#x27;%$&#123;mohu&#125;%&#x27;</span>--&gt;  <br>    <br>&lt;!--select * from t_user where username like <span class="hljs-title function_">concat</span><span class="hljs-params">(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;mohu&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)</span>--&gt;  <br>    <br>select * from t_user where username like <span class="hljs-string">&quot;%&quot;</span>#&#123;mohu&#125;<span class="hljs-string">&quot;%&quot;</span><br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><p>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id批量删除</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteMore</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> String ids)</span>;<br><br>  <br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.deleteMore(<span class="hljs-string">&quot;1,2,3,8&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMore&quot;</span>&gt;</span><br>    delete from t_user where id in ($&#123;ids&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h3><p>只能使用${}，因为表名不能加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getUserByTable(@Param(&quot;tableName&quot;) String tableName);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByTable&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from $&#123;tableName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="获取自增的主键"><a href="#获取自增的主键" class="headerlink" title="获取自增的主键"></a>获取自增的主键</h3><p>在mapper.xml中设置两个属性</p><ul><li><p>useGeneratedKeys：设置使用自增的主键</p></li><li><p>keyProperty：将获取的自增的主键放在传输的参数user对象的某个属性中</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ton&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;123@321.com&quot;</span>);<br>mapper.insertUser(user);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h2><h3 id="处理字段和属性的映射关系"><a href="#处理字段和属性的映射关系" class="headerlink" title="处理字段和属性的映射关系"></a>处理字段和属性的映射关系</h3><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">resultMap：设置自定义映射</span><br><span class="hljs-comment">    属性：</span><br><span class="hljs-comment">        id：表示自定义映射的唯一标识，不能重复</span><br><span class="hljs-comment">        type：查询的数据要映射的实体类的类型</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">id：设置主键的映射关系</span><br><span class="hljs-comment">属性：</span><br><span class="hljs-comment">    property：设置映射关系中实体类中的属性名</span><br><span class="hljs-comment">        column：设置映射关系中表中的字段名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">result：设置普通字段的映射关系</span><br><span class="hljs-comment">属性：</span><br><span class="hljs-comment">        property：设置映射关系中实体类中的属性名</span><br><span class="hljs-comment">        column：设置映射关系中表中的字段名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmp&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empResultMap&quot;</span>&gt;</span><br>select * from t_emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;  <br><span class="hljs-keyword">private</span> Integer eid;  <br><span class="hljs-keyword">private</span> String empName;  <br><span class="hljs-keyword">private</span> Integer age;  <br><span class="hljs-keyword">private</span> String sex;  <br><span class="hljs-keyword">private</span> String email;  <br><span class="hljs-keyword">private</span> Dept dept;<br><span class="hljs-comment">//...构造器、get、set方法等</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMapOne&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span><br>select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="association"><a href="#association" class="headerlink" title="association"></a>association</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        association：处理多对一的映射关系</span><br><span class="hljs-comment">属性：</span><br><span class="hljs-comment">            property：需要处理多对一的映射关系的属性名</span><br><span class="hljs-comment">            javaType：该属性的类型</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span><br>select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h4><h5 id="查询员工信息"><a href="#查询员工信息" class="headerlink" title="查询员工信息"></a>查询员工信息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        association：处理多对一的映射关系</span><br><span class="hljs-comment">属性：</span><br><span class="hljs-comment">            property：需要处理多对一的映射关系的属性名</span><br><span class="hljs-comment">            select：设置分布查询的sql的唯一标识（namespace.sqlid或mapper接口的全类名.方法名）</span><br><span class="hljs-comment">column：设置分步查询的条件（字段名）</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span><br>    select * from t_emp where eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="查询部门信息"><a href="#查询部门信息" class="headerlink" title="查询部门信息"></a>查询部门信息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span><br>    select * from t_dept where did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer did;<br>    <span class="hljs-keyword">private</span> String deptName;<br>    <span class="hljs-keyword">private</span> List&lt;Emp&gt; emps;<br><span class="hljs-comment">//...构造器、get、set方法等</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DeptAndEmpResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    collection：处理一对多的映射关系</span><br><span class="hljs-comment">属性：</span><br><span class="hljs-comment">property：需要处理一对多的映射关系的属性名</span><br><span class="hljs-comment">    ofType：表示该属性对应集合中存储的数据的类型</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmp&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span><br>select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h4><h5 id="查询部门信息-1"><a href="#查询部门信息-1" class="headerlink" title="查询部门信息"></a>查询部门信息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    collection：处理一对多的映射关系</span><br><span class="hljs-comment">属性：</span><br><span class="hljs-comment">property：需要处理一对多的映射关系的属性名</span><br><span class="hljs-comment">    select：设置分布查询的sql的唯一标识（namespace.sqlid或mapper接口的全类名.方法名）</span><br><span class="hljs-comment">column：设置分步查询的条件（字段名）</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span><br>    select * from t_dept where did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="根据部门id查询部门中的所有员工"><a href="#根据部门id查询部门中的所有员工" class="headerlink" title="根据部门id查询部门中的所有员工"></a>根据部门id查询部门中的所有员工</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;getDeptAndEmpByStepTwo&quot;</span> resultType=<span class="hljs-string">&quot;Emp&quot;</span>&gt;<br>select * from t_emp <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> #&#123;did&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><p>分步查询的优点：可以实现延迟加载</p><ul><li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会默认延迟加载</li><li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!--开启延迟加载--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--fetchType：通过该属性手动控制延迟加载的效果，lazy(延迟加载)|eager(立即加载)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;lazy&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>if标签可通过test属性（即传递过来的数据）的表达式进行判断</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--在where后面添加一个恒成立条件1=1，用来拼接if标签中的and--&gt;</span><br>select * from t_emp where 1=1<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName !=&#x27;&#x27; &quot;</span>&gt;</span><br>and emp_name = #&#123;empName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age !=&#x27;&#x27; &quot;</span>&gt;</span><br>and age = #&#123;age&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字</p><p>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and&#x2F;or去掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select * from t_emp<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName !=&#x27;&#x27; &quot;</span>&gt;</span><br>emp_name = #&#123;empName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age !=&#x27;&#x27; &quot;</span>&gt;</span><br>and age = #&#123;age&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>trim用于去掉或添加标签中的内容</p><ul><li>常用属性<ul><li>prefix：在trim标签中的内容的前面添加某些内容</li><li>suffix：在trim标签中的内容的后面添加某些内容</li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容</li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and|or&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName !=&#x27;&#x27; &quot;</span>&gt;</span><br>            emp_name = #&#123;empName&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age !=&#x27;&#x27; &quot;</span>&gt;</span><br>            age = #&#123;age&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h3><p><code>choose、when、otherwise</code>相当于<code>switch、case、default</code></p><p>when至少要有一个，otherwise至多只有一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27; &quot;</span>&gt;</span><br>                emp_name = #&#123;empName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                did = 1<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><ul><li><p>属性：</p><ul><li>collection：设置要循环的数组或集合</li><li>item：表示集合或数组中的每一个数据</li><li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如 ,</li><li>open：设置foreach标签中的内容的开始符</li><li>close：设置foreach标签中的内容的结束符</li></ul></li><li><p>批量删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.deleteMoreByArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreByArray&quot;</span>&gt;</span><br>delete from t_emp where eid in<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;eids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>#&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>批量添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;123@321.com&quot;</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-type">Emp</span> <span class="hljs-variable">emp2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;123@321.com&quot;</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-type">Emp</span> <span class="hljs-variable">emp3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;123@321.com&quot;</span>,<span class="hljs-literal">null</span>);<br><br>List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.insertMoreByList(emps);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertMoreByList&quot;</span>&gt;</span><br>insert into t_emp values<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>  <br></code></pre></td></tr></table></figure></li></ul><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><ul><li>声明sql片段：<code>&lt;sql id=&quot;&quot;&gt;内容&lt;/sql&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>引用sql片段：<code>&lt;include refid=&quot;&quot;&gt;&lt;/include&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</p><p>使一级缓存失效的四种情况：</p><ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存 sqlSession.closeCache()</li></ol><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p><strong>二级缓存开启的条件</strong></p><ol><li>在核心配置文件中，设置全局配置属性<code>cacheEnabled=&quot;true&quot;</code>，默认为true</li><li>在映射文件中设置标签<code>&lt;cache /&gt;</code></li><li>二级缓存必须在SqlSession关闭或提交之后有效，关闭后会将一级缓存提交到二级缓存中</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol><p><strong>使二级缓存失效的情况</strong>：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p><h4 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h4><p>在mapper配置文件中添加的cache标签</p><ul><li>eviction属性：缓存回收策略（默认是LRU）<ul><li>LRU（Least Recently Used）：最近最少使用的：移除最长时间不被使用的对象</li><li>FIFO（First in First out）：先进先出：按对象进入缓存的顺序来移除它们</li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象</li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象</li></ul></li><li>flushInterval属性：刷新间隔，单位毫秒<ul><li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li></ul></li><li>size属性：引用数目，正整数<ul><li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li></ul></li><li>readOnly属性：只读，true&#x2F;false<ul><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。</li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li></ul></li></ul><h3 id="缓存查询的顺序"><a href="#缓存查询的顺序" class="headerlink" title="缓存查询的顺序"></a>缓存查询的顺序</h3><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据</li><li>如果二级缓存没有命中，再查询一级缓存，如果一级缓存也没有命中，则查询数据库s</li></ul><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表（Hibernate是支持正向工程的）</p><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成Java实体类、Mapper接口、Mapper映射文件</p><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySQL驱动 要和工程中的MySQL驱动版本相同--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><p>文件名必须是：<code>generatorConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">        MyBatis3Simple: 生成基本的CRUD</span><br><span class="hljs-comment">       MyBatis3: 生成带条件的CRUD</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;4213&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- javaBean的生成策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.zhq.entity&quot;</span> </span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--使用子包，targetPackage中的.对应的是一个子包--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--自动去掉字段名--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.zhq.mapper&quot;</span> </span><br><span class="hljs-tag">                             <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Emp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_dept&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Dept&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h3><img src="/2022/01/30/Mybatis/image-20220402230128506.png" alt="image-20220402230128506" style="zoom:80%;"><ul><li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误</li></ul><h3 id="QBC"><a href="#QBC" class="headerlink" title="QBC"></a>QBC</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul><li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null（查询所有数据）</li><li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li><li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">EmpExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpExample</span>();<br><span class="hljs-comment">//名字为张三，且年龄大于等于20</span><br>example.createCriteria().andEmpNameEqualTo(<span class="hljs-string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="hljs-number">20</span>);<br><span class="hljs-comment">//或者did不为空</span><br>example.or().andDidIsNotNull();<br>List&lt;Emp&gt; emps = mapper.selectByExample(example);<br><br>emps.forEach(System.out::println);<br></code></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul><li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null</li><li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段</li></ul><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><p>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-comment">&lt;!--设置分页插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="直接输出"><a href="#直接输出" class="headerlink" title="直接输出"></a>直接输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//访问第一页，每页四条数据</span><br>Page&lt;Object&gt; page = PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">//开启分页功能</span><br>List&lt;Emp&gt; emps = mapper.selectByExample(<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">//在查询到List集合后，打印分页数据</span><br>System.out.println(page);<br></code></pre></td></tr></table></figure><h4 id="使用PageInfo"><a href="#使用PageInfo" class="headerlink" title="使用PageInfo"></a>使用PageInfo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//开启分页功能</span><br>PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>List&lt;Emp&gt; emps = mapper.selectByExample(<span class="hljs-literal">null</span>); <br><span class="hljs-comment">//list：分页之后的数据，navigatePages：导航分页的页码数</span><br>PageInfo&lt;Emp&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(emps,<span class="hljs-number">5</span>);<br><br>System.out.println(page);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2022/01/30/Nginx/"/>
    <url>/2022/01/30/Nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx (“engine x”) 是一个高性能的 HTTP 和反向代理服务器,特点是占有内存少，并发能力强</p><p><strong>反向代理</strong></p><p>将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址隐藏了真实服务器 IP 地址</p><p><strong>负载均衡</strong><br>将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡</p><img src="/2022/01/30/Nginx/image-20220402170418910.png" style="zoom:80%;"><p><strong>动静分离</strong></p><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度</p><img src="/2022/01/30/Nginx/image-20220402170528360.png" style="zoom:80%;"><h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h2><ul><li><strong>安装 pcre，openssl，zlib</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install pcre-devel<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel<br></code></pre></td></tr></table></figure><ul><li><strong>安装 nginx</strong></li></ul><p>  1、 解压缩 nginx-xx.tar.gz 包</p><p>  2、 进入解压缩目录，执行.&#x2F;configure</p><p>  3、 make &amp;&amp; make install</p><ul><li><strong>查看开放的端口号</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --list-all<br></code></pre></td></tr></table></figure><ul><li><strong>设置开放的端口号</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --add-port=80/tcp --permanent<br></code></pre></td></tr></table></figure><ul><li><strong>重启防火墙</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --reload<br></code></pre></td></tr></table></figure><h2 id="常用的命令和配置文件"><a href="#常用的命令和配置文件" class="headerlink" title="常用的命令和配置文件"></a>常用的命令和配置文件</h2><h3 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h3><ul><li><strong>启动命令</strong></li></ul><p>在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin 目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx<br></code></pre></td></tr></table></figure><ul><li><strong>关闭命令</strong></li></ul><p>在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin 目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx -s stop<br></code></pre></td></tr></table></figure><ul><li><strong>重新加载命令</strong></li></ul><p>在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin 目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx -s reload<br></code></pre></td></tr></table></figure><ul><li>查询版本号</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx -v<br></code></pre></td></tr></table></figure><h3 id="nginx-conf-配置文件"><a href="#nginx-conf-配置文件" class="headerlink" title="nginx.conf 配置文件"></a>nginx.conf 配置文件</h3><p>nginx 安装目录下(&#x2F;usr&#x2F;local&#x2F;nginx)，其默认的配置文件都放在这个目录的 conf 目录下，主配置文件<strong>nginx.conf</strong></p><p><strong>nginx.conf 配置文件分为三部分：</strong></p><p><strong>第一部分：全局块</strong></p><p>从配置文件开始到 events 块之间的内容，主要会设置一些<strong>影响 nginx 服务器整体运行的配置指令</strong></p><p>配置运行 Nginx 服务器的用户（组）</p><p>允许生成的 worker process 数</p><p>进程 PID 存放路径</p><p>日志存放路径和类型以及配置文件的引入等</p><p><strong>第二部分： events 块</strong></p><p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接</p><p>是否开启对多 work process下的网络连接进行序列化</p><p>是否允许同时接收多个网络连接</p><p>选取哪种事件驱动模型来处理连接请求</p><p>worker_connections</p><p>每个 wordprocess 可以同时支持的最大连接数等</p><p><strong>第三部分： http 块</strong></p><p>代理、缓存和日志定义等绝大多数功能和第三方模块的配置</p><p>需要注意的是：http 块也可以包括 http 全局块、server 块</p><p><strong>http 全局块</strong></p><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等</p><p><strong>server 块</strong></p><p>和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的（为了节省互联网服务器硬件成本）</p><p>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块</p><p>​<strong>全局 server 块</strong></p><p>​ 最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置<br>​<strong>location 块</strong></p><p>​ 一个 server 块可以配置多个 location 块</p><p>​这块的主要作用是基于 Nginx 服务器接收到的请求字符串，对虚拟主机名称之外的字符串进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>通过修改本地 host 文件，将 <a href="http://www.123.com/">www.123.com</a> 映射到 127.0.0.1</p><p>访问<a href="http://192.168.197.130/user/a.html%EF%BC%8C%E4%BC%9A%E8%B7%B3%E8%BD%AC%E5%88%B0http://192.168.197.130:8080/user/a.html">http://192.168.197.130/user/a.html，会跳转到http://192.168.197.130:8080/user/a.html</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">server &#123;<br>listen <span class="hljs-number">80</span>;<br>server_name  localhost;<br>location ~ /user/ &#123;<br>proxy_pass http://localhost:<span class="hljs-number">8080</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>location 指令说明</strong>：该指令用于匹配 URL</p><p><strong>&#x3D;</strong> ：请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求</p><p>**~**：用于表示 uri 包含正则表达式，并且区分大小写</p><p><strong>~</strong> *：用于表示 uri 包含正则表达式，并且不区分大小写</p><p>**^~**：要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请     求，而不再使用 location块中的正则 uri 和请求字符串做匹配</p><p>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~ * 标识</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul><li><p><strong>轮询（默认）</strong></p><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream server_pool &#123;<br>    server 192.168.5.21; #服务器1<br>    server 192.168.5.22; #服务器2<br>&#125;<br>location / &#123;<br>proxy_pass http://server_pool;  #进行负载均衡<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>weight</strong></p><p>weight 代表权重默认为 1,权重越高被分配的客户端越多指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream server_pool &#123;<br>    server 192.168.5.21 weight = 10;<br>    server 192.168.5.22 weight = 10;<br>&#125;<br>location / &#123;<br>proxy_pass http://server_pool;  #进行负载均衡<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ip_hash</strong></p><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream server_pool &#123;<br>    ip_hash;<br>    server 192.168.5.21:80;<br>    server 192.168.5.22:80;<br>&#125;<br>location / &#123;<br>proxy_pass http://server_pool;  #进行负载均衡<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>fair</strong></p><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream server_pool &#123;<br>    server 192.168.5.21:80;<br>    server 192.168.5.22:80;<br>    fair;<br>&#125;<br>location / &#123;<br>proxy_pass http://server_pool;  #进行负载均衡<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离</p><p>动态请求跟静态请求分开，可以理解成使用 Nginx处理静态页面，Tomcat 处理动态页面</p><img src="/2022/01/30/Nginx/image-20220402170208042.png" style="zoom:80%;"><p>动静分离从目前实现角度来讲大致分为两种</p><ul><li><p>纯粹把静态文件独立成单独的域名，放在独立的服务器上</p></li><li><p>动态跟静态文件混合在一起发布，通过 nginx 来分开</p></li></ul><p><strong>location</strong>：指定不同的后缀名实现不同的请求转发（url路径中包含此字符串则进行里边的操作）</p><p><strong>expires</strong>：给一个资源设定一个过期时间，无需去服务端验证，直接通过浏览器自身确认是否过期即可（如果经常更新的文件，不建议使用 Expires 来缓存）</p><ul><li><strong>进行 nginx 配置</strong></li></ul><img src="/2022/01/30/Nginx/image-20220402105027839.png" style="zoom:80%;"><p>监听192.168.17.129中的80端口中路径如果有www就转发到本地路径为&#x2F;data&#x2F;下面的&#x2F;www目录下</p><p>如果路径中有&#x2F;image&#x2F;就转发到&#x2F;data&#x2F;下的&#x2F;image目录下</p><h2 id="原理-amp-优化参数配置"><a href="#原理-amp-优化参数配置" class="headerlink" title="原理&amp;优化参数配置"></a>原理&amp;优化参数配置</h2><img src="/2022/01/30/Nginx/image-20220402170309808.png" style="zoom:80%;"><img src="/2022/01/30/Nginx/image-20220402170320028.png" style="zoom:80%;"><ul><li><p><strong>1个master&amp;多个workers</strong></p><ul><li><code>nginx -s reload</code>热部署，利用nginx进行热部署操作</li><li>每个work是独立的进程，不会造成服务的中断</li><li>采用独立的进程，一个进程退出后，其它进程还在工作，服务不会中断，master 进程则很快启动新的worker 进程</li><li>异常退出，会导致当前 worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险</li></ul></li><li><p><strong>设置 worker 数量</strong></p><p>worker数量和服务器的cpu数相等最为适宜</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">worker_processes 4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">work 绑定 cpu(4 work 绑定 4cpu)</span><br>worker_cpu_affinity 0001 0010 0100 1000<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">work 绑定 cpu (4 work 绑定 8cpu 中的 4 个)</span> <br>worker_cpu_affinity 0000001 00000010 00000100 00001000<br></code></pre></td></tr></table></figure></li><li><p><strong>连接数 worker_connection</strong></p><p>表示每个 worker 进程所能建立连接的最大值</p><p>普通的静态访问最大并发数：worker_connections * worker_processes &#x2F;2</p><p>HTTP作为反向代理最大并发数： worker_connections * worker_processes&#x2F;4</p></li></ul><h2 id="高可用集群"><a href="#高可用集群" class="headerlink" title="高可用集群"></a>高可用集群</h2><p>解决nginx宕机请求无法响应的问题</p><img src="/2022/01/30/Nginx/01/30/Nginx/image-20220402170352757.png" class><ul><li><strong>在两台服务器安装keepalived</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install keepalived -y<br></code></pre></td></tr></table></figure><ul><li><strong>修改&#x2F;etc&#x2F;keepalived&#x2F;keepalivec.conf 配置文件</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">全局配置</span><br>global_defs &#123;<br>    notification_email &#123;<br>    acassen@firewall.loc<br>    failover@firewall.loc<br>    sysadmin@firewall.loc<br>    &#125;<br>    notification_email_from Alexandre.Cassen@firewall.loc<br>    smtp_server 192.168.17.129 #主机ip<br>    smtp_connect_timeout 30<br>    router_id LVS_DEVEL #服务器域名名字，可在/etc/hosts中查看127.0.0.1映射的域名<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">脚本配置</span><br>vrrp_script chk_http_port &#123;<br>    script &quot;/usr/local/src/nginx_check.sh&quot;   #脚本路径<br>    interval 2    #（检测脚本执行的间隔）每隔2s检查一次<br>    weight 2    #设置服务器权重<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">虚拟ip的配置</span><br>vrrp_instance VI_1 &#123;<br>        state BACKUP   # 主服务器为Master；备份服务器为BACKUP<br>        interface ens33   #网卡；可以用ip addr 看网卡名<br>        virtual_router_id 51   # 主、备机的 virtual_router_id 必须相同<br>        priority 90   # 主、备机取不同的优先级，主机值较大，备份机值较小<br>        advert_int 1   #每1s发送一次心跳<br>        authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>&#125;<br>virtual_ipaddress &#123;<br>    192.168.17.50   # VRRP H 虚拟ip地址,多台keepalived绑定一个ip；必须同一网段<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>在&#x2F;usr&#x2F;local&#x2F;src 添加检测脚本</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>A=`ps -C nginx –no-header |wc -l`<br>if [ $A -eq 0 ];then<br>    /usr/local/nginx/sbin/nginx #nginx启动路径<br>    sleep 2<br>    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then<br>        killall keepalived #nginx挂掉后，杀掉这个服务器的所有keepalived进程<br>    fi<br>fi<br></code></pre></td></tr></table></figure><ul><li><p><strong>把两台服务器上 nginx 和 和 keepalived 启动</strong></p><p>启动 nginx ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx<br></code></pre></td></tr></table></figure><p>启动 keepalived ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start keepalived.service<br></code></pre></td></tr></table></figure></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>整合FastDFS中的fastdfs-nginx-module报错unknown directive “ngx_fastdfs_module” in &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf，因为nginx 目录下的 objs&#x2F;Makefile中自动生成的ALL_INCS 多了&#x2F;</p><p>启动fastdfs接收和访问静态资源：</p><p>​启动tracker：&#x2F;usr&#x2F;bin&#x2F;.&#x2F;fdfs_trackerd &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf</p><p>​启动storage：&#x2F;usr&#x2F;bin&#x2F;.&#x2F;fdfs_storaged &#x2F;etc&#x2F;fdfs&#x2F;storage.conf</p><p>​启动nginx：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring5</title>
    <link href="/2022/01/30/Spring5/"/>
    <url>/2022/01/30/Spring5/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring5"><a href="#Spring5" class="headerlink" title="Spring5"></a>Spring5</h1><p>一个容器，创建对象，管理对象之间的关系，底层是使用反射实现的</p><p>dao类、service类、controller类、工具类放入Spring容器中（xml文件、注解）</p><p>实体类、servlet、listener、filter等不放入Spring容器中</p><p>spring-context：是ioc功能的，创建对象的</p><p>spring-webmvc做web开发使用的， 是servlet的升级。 spring-webmvc中也会用到spring-context中创建对象的功能的</p><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><h3 id="IOC概念和原理"><a href="#IOC概念和原理" class="headerlink" title="IOC概念和原理"></a>IOC概念和原理</h3><ul><li>控制反转，把对象创建和对象的调用过程交给spring进行管理</li><li>目的：降低耦合度</li><li>底层原理：xml，反射，工厂模式</li><li>Spring提供IOC容器两种实现方式（两个接口）<ul><li><strong>BeanFactory</strong>：Spring内部使用的接口，不提倡开发人员使用。特点：加载配置文件时不会创建对象，获取对象时才会创建对象</li><li><strong>ApplicationContext：</strong>BeanFactory的子接口，提供了更多更强大的功能，一般由开发人员使用。特点：加载配置文件时会把配置文件里的对象进行创建<ul><li>FileSystemXmlApplicationContext：绝对路径，从盘符开始算起</li><li>ClassPathXmlApplicationContext：相对路径，从src开始算起</li></ul></li></ul></li></ul><h3 id="IOC操作Bean（基于xml）"><a href="#IOC操作Bean（基于xml）" class="headerlink" title="IOC操作Bean（基于xml）"></a>IOC操作Bean（基于xml）</h3><h4 id="xml实现Bean管理"><a href="#xml实现Bean管理" class="headerlink" title="xml实现Bean管理"></a>xml实现Bean管理</h4><h5 id="基于xml方式创建对象"><a href="#基于xml方式创建对象" class="headerlink" title="基于xml方式创建对象"></a>基于xml方式创建对象</h5><p>创建对象时，默认执行无参构造函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">声明bean，告诉spring要创建某个类的对象，将创建好的对象放入spring中的map集合</span><br><span class="hljs-comment">    id：对象的自定义名称</span><br><span class="hljs-comment">    class：类的额全限定名称（不能是接口）</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.User&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="基于xml方式注入属性"><a href="#基于xml方式注入属性" class="headerlink" title="基于xml方式注入属性"></a>基于xml方式注入属性</h5><h6 id="使用set方法进行注入"><a href="#使用set方法进行注入" class="headerlink" title="使用set方法进行注入"></a>使用set方法进行注入</h6><p>在类中给属性创建set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在xml配置文件中通过property标签进行属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">bean标签创建对象</span><br><span class="hljs-comment">id：唯一标识</span><br><span class="hljs-comment">class：类路径</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">property：使用set方法给属性赋值，一个property只能给一个属性赋值</span><br><span class="hljs-comment">name：属性名</span><br><span class="hljs-comment">value：属性值（简单类型）</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;狗子&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>System.out.println(user.getUserName());<br></code></pre></td></tr></table></figure><h6 id="使用有参构造函数进行注入"><a href="#使用有参构造函数进行注入" class="headerlink" title="使用有参构造函数进行注入"></a>使用有参构造函数进行注入</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String userName)</span>&#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再xml配置文件中通过constructor-arg标签进行属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">     声明bean，告诉spring要创建某个类的对象，将创建好的对象放入spring中的map集合</span><br><span class="hljs-comment">     id：对象的自定义名称</span><br><span class="hljs-comment">     class：类的额全限定名称（不能是接口）</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--constructor-arg：使用类中的构造方法，在创建对象时给属性赋值--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            name：构造方法的形参名</span><br><span class="hljs-comment">            value：传入简单类型的属性</span><br><span class="hljs-comment">            ref：bean标签的id值，创建的对象的名称</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张贺强&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;interest&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;interest&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;interest&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.Interest&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            index：构造方法的参数的位置0、1、2......</span><br><span class="hljs-comment">            value：传入简单类型的属性</span><br><span class="hljs-comment">            ref：bean标签的id值，创建的对象的名称</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;游泳&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;泳池&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;interest&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.Interest&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            省略index：根据构造方法的参数的位置一次赋值</span><br><span class="hljs-comment">            value：传入简单类型的属性</span><br><span class="hljs-comment">            ref：bean标签的id值，创建的对象的名称</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;游泳&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;泳池&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="null值"><a href="#null值" class="headerlink" title="null值"></a>null值</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="属性值包含特殊符号"><a href="#属性值包含特殊符号" class="headerlink" title="属性值包含特殊符号"></a>属性值包含特殊符号</h6><p>因为包含特殊符号 &lt;&gt;，需要通过 <code>&lt;![CDATA[值]]&gt;</code> 来表示</p><h6 id="注入属性——外部bean"><a href="#注入属性——外部bean" class="headerlink" title="注入属性——外部bean"></a>注入属性——外部bean</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span>&#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 ref 来指定创建userDaoImpl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--创建UserDaoImpl对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.dao.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--创建UserService对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.service.UserService&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">property：使用set方法给属性赋值</span><br><span class="hljs-comment">name：属性名</span><br><span class="hljs-comment">ref：属性值（引用类型）</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="注入属性——内部bean"><a href="#注入属性——内部bean" class="headerlink" title="注入属性——内部bean"></a>注入属性——内部bean</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--内部 bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.Emp&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;狗子&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--设置对象类型属性--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.Dept&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="注入属性——级联赋值"><a href="#注入属性——级联赋值" class="headerlink" title="注入属性——级联赋值"></a>注入属性——级联赋值</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--级联赋值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;狗子&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--写法一：通过ref属性来获取外部bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--写法二：通过emp提供dept属性的get方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;运营部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="引用类型自动注入"><a href="#引用类型自动注入" class="headerlink" title="引用类型自动注入"></a>引用类型自动注入</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">声明bean，告诉spring要创建某个类的对象，将创建好的对象放入spring中的map集合</span><br><span class="hljs-comment">    id：对象的自定义名称</span><br><span class="hljs-comment">    class：类的额全限定名称（不能是接口）</span><br><span class="hljs-comment"> autowire：引用类型的自动注入</span><br><span class="hljs-comment">byName：引用类型的属性名和Spring容器中的bean标签的id名一样，且数据类型一致Spring能    够自动赋值</span><br><span class="hljs-comment">byType：引用类型的数据类型和Spring容器中bean标签的class属性是同源关系Spring能够自动</span><br><span class="hljs-comment">同源：</span><br><span class="hljs-comment">引用类型的数据类型和bean标签的class属性值相同</span><br><span class="hljs-comment">引用类型的数据类型和bean标签的class属性值是父子关系</span><br><span class="hljs-comment">引用类型的数据类型和bean标签的class属性值是接口实现类关系</span><br><span class="hljs-comment"> --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.User&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName(byType)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zhq&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="注入集合属性（数组，List，Map）"><a href="#注入集合属性（数组，List，Map）" class="headerlink" title="注入集合属性（数组，List，Map）"></a>注入集合属性（数组，List，Map）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String[] courses;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; set;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourses</span><span class="hljs-params">(String[] courses)</span> &#123;<br>        <span class="hljs-built_in">this</span>.courses = courses;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSet</span><span class="hljs-params">(Set&lt;String&gt; set)</span> &#123;<br>        <span class="hljs-built_in">this</span>.set = set;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.Stu&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数组类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courses&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>java课程<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据库课程<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--List类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--Map类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;JAVA&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;PHP&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--Set类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Mysql<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Redis<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>赋值引用类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--创建多个 course 对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.Course&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring5 框架&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.Course&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;MyBatis 框架&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--注入 list 集合类型，值是对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courseList&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>把集合注入部分提取出来</p><p>使用 util 标签，这样不同的bean都可以使用相同的集合注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--将集合注入部分提取出来--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;booklist&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>易筋经<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>九阳神功<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.entity.Book&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;booklist&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p><strong>在Spring中，默认情况下bean是单实例对象</strong></p><p><strong>Scope属性值：</strong></p><p>​singleton：默认值，表示单实例对象。加载配置文件时就会创建单实例对象</p><p>​prototype：表示多实例对象。在调用getBean方法时创建多实例对象</p><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><p><strong>bean的生命周期：</strong></p><p>（1）通过构造器创建 bean 实例（无参数构造）</p><p>（2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p>（3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</p><p>（4）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p>（5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</p><p>（6）bean 可以使用了（对象获取到了）</p><p>（7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><h3 id="IOC操作Bean（基于注解）"><a href="#IOC操作Bean（基于注解）" class="headerlink" title="IOC操作Bean（基于注解）"></a>IOC操作Bean（基于注解）</h3><h4 id="基于注解创建对象"><a href="#基于注解创建对象" class="headerlink" title="基于注解创建对象"></a>基于注解创建对象</h4><ul><li>@Component</li><li>@Service：一般用于Service层</li><li>@Controller：一般用于web层</li><li>@Repository：一般用于Dao层</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  声明组件扫描器component-scan，组件就是java对象,扫描包中和子包中的所有类，找到类中的注解</span><br><span class="hljs-comment">        base-package：指定注解在项目中的包名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.service&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        加载属性配置文件（属性配置文件中时键值对的形式）</span><br><span class="hljs-comment">        在Spring注解中可以使用$&#123;键&#125;类获取属性配置文件中的值</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:test.properties&quot;</span> <span class="hljs-attr">file-encoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">     按功能模块或类功能创建多个配置文件,主配置文件一般不定义对象</span><br><span class="hljs-comment">   主配置文件导入其他配置文件</span><br><span class="hljs-comment">     classpath：用来指定配置文件存在的类路径，可一次定义多个用;分隔，也可使用*通配符</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:beans.xml&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//value可以省略,默认是类名并且首字母小写</span><br><span class="hljs-meta">@Component(value=&quot;stuService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StuService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>开启组件扫描的细节配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">use-default-fileters：配置是否使用默认过滤器</span><br><span class="hljs-comment">include-filter：设置只扫描该包下类的什么注解</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.controller&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--exclude-filter：设置不扫描类中的什么注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.controller&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于注解进行属性注入"><a href="#基于注解进行属性注入" class="headerlink" title="基于注解进行属性注入"></a>基于注解进行属性注入</h4><p> required属性默认是true，表示引用类型赋值失败程序终止，false表示引用类型赋值失败程序正 常执行，但引用类型赋值为null</p><p><strong>@Autowired</strong>：根据属性类型自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(value=&quot;stuService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StuService</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> StuDao stuDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        stuDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@Qualifier</strong>：根据属性名称自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(value=&quot;stuService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StuService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value=&quot;stuDaoImpl&quot;)</span>  <span class="hljs-comment">//这样就能显式指定stuDaoImpl这个实现类</span><br>    <span class="hljs-keyword">public</span> StuDao stuDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        stuDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@Resource</strong>：可以根据类型注入，也可以根据名称注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(value=&quot;stuService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StuService</span> &#123;<br>    <br>    <span class="hljs-comment">//@Resource   //根据类型进行注入</span><br>    <span class="hljs-meta">@Resource(name=&quot;stuDaoImpl&quot;)</span>  <span class="hljs-comment">//根据名称进行注入</span><br>    <span class="hljs-keyword">public</span> StuDao stuDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        stuDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@Value</strong>：注入普通类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(value = &quot;abc&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h4 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h4><p>创建配置类，替代xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>    <span class="hljs-comment">//表明为一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><ul><li><strong>面向切面编程</strong>，利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得<strong>业务逻辑各部分之间的耦合度降低</strong>，提高程序的可重用性，同时提高了开发的效率。通俗来说就是<strong>在不修改代码的情况下添加新的功能</strong></li><li>底层通过动态代理来实现：<ul><li><strong>有接口的情况</strong>，JDK动态代理：<strong>创建接口实现类的代理对象</strong></li><li><strong>无接口的情况</strong>，CGLIB动态代理：<strong>创建当前类子类的代理对象</strong></li></ul></li></ul><p><strong>JDK动态代理举例：</strong></p><ul><li><p>通过 java.lang.reflect.<strong>Proxy类</strong> 的 <strong>newProxyInstance方法</strong> 创建代理类</p></li><li><p>newProxyInstance方法：</p><p>参数一：类加载器</p><p>参数二：所增强方法所在的类，这个类实现的接口，支持多个接口</p><p>参数三：实现InvocationHandle接口，重写invoke方法来添加新的功能</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-comment">//所需代理的类实现的接口，支持多个接口</span><br>        Class[] interfaces = &#123;UserDao.class&#125;;<br><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>        <br><span class="hljs-comment">//调用newProxyInstance方法来创建代理类</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDaoProxy</span> <span class="hljs-operator">=</span> (UserDao) Proxy.newProxyInstance(Main.class.getClassLoader(), interfaces, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao));<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userDaoProxy.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-comment">//创建内部类，实现InvocationHandler接口，重写invoke方法，添加新功能</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>        Object obj;<br><span class="hljs-comment">//通过有参构造函数将所需代理的类传过来</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span>&#123;<br>            <span class="hljs-built_in">this</span>.obj = obj;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;            <br><span class="hljs-comment">//执行原有的代码</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br>            <br>            System.out.println(<span class="hljs-string">&quot;添加新的业务&quot;</span>);<br>            <br>            <span class="hljs-keyword">return</span> invoke;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于AspectJ实现AOP操作"><a href="#基于AspectJ实现AOP操作" class="headerlink" title="基于AspectJ实现AOP操作"></a>基于AspectJ实现AOP操作</h3><p><strong>AOP相关术语：</strong></p><ul><li><strong>连接点</strong>：类中可以被增强的方法</li><li><strong>切入点</strong>：实际被增强的方法</li><li><strong>通知</strong>：增强的那一部分逻辑代码<ul><li>前置通知：增强代码在原代码前面</li><li>后置通知：增强代码在原代码后面</li><li>环绕通知：增强代码既有在原代码前面，也有在原代码后面</li><li>异常通知：原代码发生异常后才会执行</li><li>最终通知：类似与finally那一部分</li></ul></li><li><strong>切面</strong>：把通知应用到切入点这一个动作</li></ul><p><strong>切入点表达式</strong></p><ul><li><p><strong>execution(访问权限类型?   返回值类型   包名类名?方法名(参数类型和个数)   抛出异常类型?)</strong></p><p>其中?表示可选，可以定义也可以不定义</p><p>通配符：</p><p>​*：0个以上任意字符</p><p>​..：用在方法参数中，表示任意多个参数；用在包名后，表示当前包以及子包路径</p><p>​+：用在类后，表示当前类以及子类；用在接口后，表示当前接口以及实现类</p></li></ul><h4 id="基于注解方式"><a href="#基于注解方式" class="headerlink" title="基于注解方式"></a>基于注解方式</h4><p>**@Before(value&#x3D;”切入点表达式”)**：前置通知，在目标方法执行之前先执行，定义在方法上</p><p>**@AfterReturning(value&#x3D;”切入点表达式”, returning &#x3D; “和通知方法的形参同名”)**：后置通知，在目标方法执行之后才执行的，定义在方法上；能够获取目标方法的返回值（可修改）  returning 表示目标方法的执行结果</p><p>**@Around(value&#x3D;”切入点表达式”)**：环绕通知，在目标方法执行前后都能执行；控制目标方法是否被调用；修改原来目标方法的执行结果，定义在方法上</p><p>**@AfterThrowing(value&#x3D;”切入点表达式”, throwing&#x3D; “和通知方法的形参同名”)**：异常通知，可在目标方法抛出异常时执行，可以做异常监控程序，定义在方法上     throwing表示目标方法抛出的异常对象</p><p>**@After(value&#x3D;”切入点表达式”)****：最终通知， 总是在目标方法执行之后再执行，定义在方法上</p><p>**@Poincut(value&#x3D;”切入点表达式”)**：定义和管理切入点表达式，定义在方法上；此时在用该切入点，直接写方法名()</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span>   <span class="hljs-comment">//使用Aspect注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(value=&quot;execution(* com.entity.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.before()&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@AfterReturning(value=&quot;execution(* com.entity.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.afterReturning()&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//最终通知</span><br>    <span class="hljs-meta">@After(value=&quot;execution(* com.entity.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">After</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.After()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(value=&quot;execution(* com.entity.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">AfterThrowing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.AfterThrowing()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(value=&quot;execution(* com.entity.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;UserProxy.Around()   _1&quot;</span>);<br><br>        <span class="hljs-comment">//调用proceed方法执行原先部分的代码</span><br>        proceedingJoinPoint.proceed();<br><br>        System.out.println(<span class="hljs-string">&quot;UserProxy.Around()   _2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.oymn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-comment">&lt;!--开启AspectJ生成代理对象，创建代理对象是在内存中实现的，修改目标对象的内存的结构--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br>  <br><span class="hljs-comment">&lt;!--proxy-target-class：true表示使用cglib动态代理--&gt;</span><br><span class="hljs-comment">&lt;!--&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;--&gt;</span><br></code></pre></td></tr></table></figure><p>可以将<strong>该切入点进行抽取：通过@Pointcut注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(value=&quot;execution(* com.oymn.spring5.User.add(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointDemo</span><span class="hljs-params">()</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-comment">//前置通知</span><br><span class="hljs-meta">@Before(value=&quot;pointDemo()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;UserProxy.before()&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>设置增强类优先级：</strong></p><p><strong>@Order（数字值）来设置增强类的优先级，数字越小优先级越高</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonProxy</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>完全注解开发</strong> ：</p><p>可以通过配置类来彻底摆脱xml配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span>  <span class="hljs-comment">//开启AspectJ生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基于xml方式"><a href="#基于xml方式" class="headerlink" title="基于xml方式"></a>基于xml方式</h4><p>创建Book和BookProxy类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;buy()&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;before()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--创建对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.oymn.spring5.Book&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookProxy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.oymn.spring5.BookProxy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--切入点--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.entity.Book.buy(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookProxy&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--将bookProxy中的before方法配置为切入点的前置通知--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><ul><li><p>事务是数据库操作最基本单位，要么都成功，要么都失败</p></li><li><p><strong>事务四个特性ACID：原子性，一致性，隔离性，持久性</strong></p></li><li><p>Spring事务管理有两种方式：编程式事务管理 和 声明式事务管理，<strong>一般使用声明式事务管理，底层使用AOP原理</strong></p></li><li><p>声明式事务管理有两种方式：基于xml配置方式 和 基于注解方式，<strong>一般使用注解方式</strong></p></li><li><p>Spring事务管理提供了一个接口<strong>事务管理器</strong>，这个接口针对不同的框架提供不同的实现类</p><p>对于使用JdbcTemplate进行数据库交互，则使用DataSourceTransactionManager实现类，如果整合Hibernate框架则使用HibernateTransactionManager实现类</p></li></ul><h3 id="注解实现声明式事务管理"><a href="#注解实现声明式事务管理" class="headerlink" title="注解实现声明式事务管理"></a>注解实现声明式事务管理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4213&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--创建JdbcTemplate对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--创建事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    开启事务注解，告诉Spring使用注解管理事务，创建代理对象</span><br><span class="hljs-comment">    annotation-driven要是tx的，表示事务</span><br><span class="hljs-comment">    transaction-manager指定事务管理器对象</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在service类上面或者service类的方法上面添加事务注解@Transactional</p><ul><li>@Transactional添加在类上面，这个类里面所有方法都添加事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><p><strong>propagation</strong>：事务传播行为：</p><p>PROPAGATION_REQUIRED（Spring默认）：指定方法必须在事务内执行，若存在事务就加入到当前事务，若不存在事务则创建新事务</p><p>PROPAGATION_REQUIRES_NEW：指定方法支持当前事务，若没有事务也可以执行</p><p>PROPAGATION_SUPPORTS：执行方法新建一个事务，若存在当前事务则挂起该事务，直到新建的事务执行完毕</p><p>PROPAGATION_MANDATORY</p><p>PROPAGATION_NESTED</p><p>PROPAGATION_NEVER</p><p>PROPAGATION_NOT_SUPPORTED</p><p><strong>isolation</strong>：事务隔离级别：</p><table><thead><tr><th>DEFAULT默认的隔离级别，mySql默认的是REPEATABLE_READ</th><th>脏读</th><th>不可重复读</th><th>虚读</th></tr></thead><tbody><tr><td>READ UNCOMMITED（读未提交）</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITED（读已提交）</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ（可重复读）</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE（串行化）</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p><strong>timeout</strong>：超时时间</p><ul><li>事务需要在一定时间内进行提交，超过时间后回滚</li><li>默认值是-1，设置时间以秒为单位</li></ul><p><strong>readOnly</strong>：是否只读</p><ul><li>默认值为false，表示可以查询，也可以增删改</li><li>设置为true，只能查询</li></ul><p><strong>rollbackFor</strong>：回滚，设置出现哪些异常进行事务回滚</p><p><strong>noRollbackFor</strong>：不回滚，设置出现哪些异常不进行事务回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">在public上添加，默认只有ERROR和运行时异常才会回滚</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    propagation：指定传播行为</span><br><span class="hljs-comment">    isolation：指定隔离级别</span><br><span class="hljs-comment">    readOnly：指定超时时间</span><br><span class="hljs-comment">    rollbackFor：表示指定的异常一定回滚，不是不是运行时异常（先扫描rollbackFor中的，在判断是不是运   行时异常）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Transactional(</span><br><span class="hljs-meta">        propagation = Propagation.REQUIRED,</span><br><span class="hljs-meta">        isolation = Isolation.DEFAULT,</span><br><span class="hljs-meta">        readOnly = false,</span><br><span class="hljs-meta">        rollbackFor = &#123;</span><br><span class="hljs-meta">                NullPointerException.class</span><br><span class="hljs-meta">        &#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountService</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>完全注解实现声明式事务管理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@EnableTransactionManagement</span>  <span class="hljs-comment">//开启事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;<br><br>    <span class="hljs-comment">//创建数据库连接池</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">getDruidDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book&quot;</span>);<br>        druidDataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        druidDataSource.setPassword(<span class="hljs-string">&quot;000000&quot;</span>);<br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>    <span class="hljs-comment">//创建JdbcTemplate对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br>    <span class="hljs-comment">//创建事务管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">transactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        transactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> transactionManager;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accountMoney</span><span class="hljs-params">()</span>&#123;<br>        accountDao.add();<br>        <span class="hljs-comment">//int i=1/0;   //用来模拟转账失败</span><br>        accountDao.reduce();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="xml实现声明式事务管理"><a href="#xml实现声明式事务管理" class="headerlink" title="xml实现声明式事务管理"></a>xml实现声明式事务管理</h3><p>使用aspectj框架功能，在spring配置文件中声明类，方法需要的事务。这种方式业务方法和事务配置完全分离<br><strong>加入aspectj依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--aspects依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>声明事务管理器对象</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--声明事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定数据源，连接的数据库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myDataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    声明业务方法（隔离级别，传播行为，超时时间）</span><br><span class="hljs-comment">    transaction-manager：指定事务管理器对象</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--tx:attributes：配置事务属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            tx:method：给具体方法配置事务属性（可以有多个）</span><br><span class="hljs-comment">            name：方法名称（完整的方法名，不带包名和类名；可以使用通配符*）</span><br><span class="hljs-comment">            propagation：传播行为</span><br><span class="hljs-comment">            isolation：隔离级别</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;insertStudent&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;DEFAULT&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--添加--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--修改--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;modify&quot;</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--删除--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remove&quot;</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--查询--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;SUPPORTS&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>指定哪些类要创建代理使用事务</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        配置切入点表达式，指定哪些包中的类要使用事务</span><br><span class="hljs-comment">        id：切入点表达式名称</span><br><span class="hljs-comment">        expression：切入点表达式，指定哪些类要使用事务</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;servicePt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *..service..*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        配置增强器：关联类（切入点）和方法</span><br><span class="hljs-comment">        advice-ref：通知tx:advice中的配置</span><br><span class="hljs-comment">        pointcut-ref：切入点表达式</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;servicePt&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Spring5新特性"><a href="#Spring5新特性" class="headerlink" title="Spring5新特性"></a>Spring5新特性</h2><h4 id="自带了日志封装"><a href="#自带了日志封装" class="headerlink" title="自带了日志封装"></a>自带了日志封装</h4><p>Spring5移除了Log4jConfigListener，官方建议使用Log4j2</p><p>Spring5整合Log4j2：</p><p>引入jar包</p><img src="/2022/01/30/Spring5/01/30/Spring5/20210807143733.png" class><p>创建log4j2.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class="hljs-comment">&lt;!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--先定义所有的appender--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出日志信息到控制台--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制日志输出的格式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span><br>    <span class="hljs-comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Nullable注解"><a href="#Nullable注解" class="headerlink" title="@Nullable注解"></a>@Nullable注解</h4><p>@Nullable注解可以用在方法上，属性上，参数上，表示方法返回值可以为空，属性可以为空，参数可以为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span>     <span class="hljs-comment">//表示方法返回值可以为空</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span>;<br><br><span class="hljs-meta">@Nullable</span>     <span class="hljs-comment">//表示参数可以为空</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> <span class="hljs-type">int</span> Id)</span>;<br><br><span class="hljs-meta">@Nullable</span>     <span class="hljs-comment">//表示属性可以为空</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br></code></pre></td></tr></table></figure><h4 id="支持函数式风格编程"><a href="#支持函数式风格编程" class="headerlink" title="支持函数式风格编程"></a>支持函数式风格编程</h4><p>这是因为java8新增了lamda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//1 创建 GenericApplicationContext 对象</span><br>    <span class="hljs-type">GenericApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericApplicationContext</span>();<br>    <span class="hljs-comment">//2 调用 context 的方法对象注册</span><br>    context.refresh();<br>    context.registerBean(<span class="hljs-string">&quot;user1&quot;</span>,User.class,() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br>    <span class="hljs-comment">//3 获取在 spring 注册的对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)context.getBean(<span class="hljs-string">&quot;user1&quot;</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="支持整合JUnit5"><a href="#支持整合JUnit5" class="headerlink" title="支持整合JUnit5"></a>支持整合JUnit5</h4><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p><strong>添加servlet和jsp依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--加入servlet依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--添加jsp依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-b03<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--为了使用spring的监听器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>监听器</strong></p><p>使用监听器当全局作用域对象被创建时创建容器存入ServletContext，把spring配置文件中的所有对象创建好</p><p>监听器作用：</p><p>​创建容器对象ApplicationContext ctx &#x3D; new ClassPathXmlApplicationContext(“applicationContext.xml”);</p><p>​把容器对象放入到ServletContext， ServletContext.setAttribute(key,ctx)</p><p>  <strong>使用spring创建监听器（在web.xml文件中添加）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--修改spring文件的位置并加载--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置spring配置文件的路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-comment">&lt;!--注册监听器ContextCleanupListener--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span><br>org.springframework.web.context.ContextLoaderListener<br><span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <strong>在doPost()或doGet()方法中获取存入的容器对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//使用框架中的方法获取容器对象</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> getServletContext();<br>ctx = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);<br></code></pre></td></tr></table></figure><h2 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a><strong>导入依赖</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zhq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ssm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--添加jsp依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-b03<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--SpringMVC依赖（会将Spring用到的依赖导入）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring事务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis-spring依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--druid依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--加入jackson依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.13.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.13.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入lombok依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="写web-xml"><a href="#写web-xml" class="headerlink" title="写web.xml"></a><strong>写web.xml</strong></h3><ol><li>注册DispatcherServlet：创建SpringMVC容器对象，才能创建Controller对象；创建Servlet对象</li><li>注册Spring的ContextLoaderListener监听器：创建Spring容器，才能创建service、dao等对象</li><li>注册字符集过滤器，解决post乱码问题</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--DispatcherServlet中央调度器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:dispatcherServlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--ContextLoaderListener监听器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--CharacterEncodingFilter字符过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>创建包，controller包、service包、dao包、domain包（不用写set和get方法，使用Lombok编译生成）</strong></p><h3 id="写SpringMVC、Spring、Mybatis配置文件"><a href="#写SpringMVC、Spring、Mybatis配置文件" class="headerlink" title="写SpringMVC、Spring、Mybatis配置文件"></a><strong>写SpringMVC、Spring、Mybatis配置文件</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring容器--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:contex</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--导入jdbc配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contex:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明数据源dataSource--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明sqlSessionFactory对象，将数据源和mybatis配置文件关联--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明dao类，使用sqlSessionFactory对象创建代理类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.zhq.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明service注解的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhq.service&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--声明事务管理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringMVC容器--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明组件扫描器（@Controller注解的位置）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhq.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--解决中央调度器使用/地址产生的静态资源访问问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明组件扫描器（@ControllerAdvice注解的位置）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhq.handler&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明拦截器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhq.handler.MyInterceptor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis配置--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--settings：控制mybatis全局行为--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置mybatis输出日志--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--name:实体类所在的包名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zhq.domain&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- sql mapper(sql映射文件)的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">          name：是包名， 这个包中的所有mapper.xml一次都能加载</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zhq.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="写dao接口和mapper文件、service和实现类、controller、实体类、jsp页面"><a href="#写dao接口和mapper文件、service和实现类、controller、实体类、jsp页面" class="headerlink" title="写dao接口和mapper文件、service和实现类、controller、实体类、jsp页面"></a><strong>写dao接口和mapper文件、service和实现类、controller、实体类、jsp页面</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//dao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br>    User <span class="hljs-title function_">queryUser</span><span class="hljs-params">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--dao接口的mapper配置文件--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zhq.dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        insert into user(username, password) values(#&#123;username&#125;,#&#123;password&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select username,password from user where username=#&#123;name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//service类</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> userDao.insertUser(user);<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUser</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> userDao.queryUser(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//controller类</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/addUser&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>&#123;<br><br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tips</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;添加失败！&quot;</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> userService.addUser(user);<br>        <span class="hljs-keyword">if</span> (num&gt;<span class="hljs-number">0</span>)&#123;<br>            tips = <span class="hljs-string">&quot;用户【&quot;</span>+user.getUsername()+<span class="hljs-string">&quot;】添加成功！&quot;</span>;<br>        &#125;<br>        modelAndView.addObject(<span class="hljs-string">&quot;tips&quot;</span>, tips);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;addSuccess&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/queryUser&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUser</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.findUser(name);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//异常处理类</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobaIExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">exception</span><span class="hljs-params">(Exception e)</span>&#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        modelAndView.addObject(<span class="hljs-string">&quot;e&quot;</span>, e);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;redirect:/exception.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拦截器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;拦截器进行工作！&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--ajax查询页面--&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    <span class="hljs-comment">//动态获取在base标签中声明的地址</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">basePath</span> <span class="hljs-operator">=</span> request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> +<br>            request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() +<br>            request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;查询用户&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(function () &#123;<br>            $(<span class="hljs-string">&quot;#btn&quot;</span>).click(function () &#123;<br>                loadUserData()<br>            &#125;)<br>        &#125;)<br>        function <span class="hljs-title function_">loadUserData</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//键值对不能存在空格</span><br>            $.ajax(&#123;<br>                url:<span class="hljs-string">&quot;user/queryUser&quot;</span>,<br>                type:<span class="hljs-string">&quot;get&quot;</span>,<br>                dataType:<span class="hljs-string">&quot;json&quot;</span>,<br>                data:&#123;<br>                    <span class="hljs-string">&quot;name&quot;</span>:$(<span class="hljs-string">&quot;#name&quot;</span>).val()<br>                &#125;,<br>                success:function (resp) &#123;<br>                    $(<span class="hljs-string">&quot;#info&quot;</span>).html(<span class="hljs-string">&quot;&quot;</span>)<br>                    $(<span class="hljs-string">&quot;#info&quot;</span>).append(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>)<br>                        .append(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + resp.username + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>)<br>                        .append(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + resp.password + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>)<br>                        .append(<span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>)<br>                &#125;,<br>                error:function (e) &#123;<br>                    $(<span class="hljs-string">&quot;#info&quot;</span>).append(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>)<br>                        .append(<span class="hljs-string">&quot;&lt;td&gt;查询的用户不存在！&lt;/td&gt;&quot;</span>)<br>                        .append(<span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>)<br>                &#125;<br>            &#125;)<br>        &#125;<br><br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;table&gt;<br>            &lt;thead&gt;<br>                &lt;tr&gt;<br>                    &lt;td&gt;请输入查询的姓名：&lt;/td&gt;<br>                    &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span> id=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;button id=<span class="hljs-string">&quot;btn&quot;</span>&gt;查询用户&lt;/button&gt;&lt;/td&gt;<br>                &lt;/tr&gt;<br>                &lt;tr&gt;<br>                    &lt;td&gt;姓名&lt;/td&gt;<br>                    &lt;td&gt;密码&lt;/td&gt;<br>                &lt;/tr&gt;<br>            &lt;/thead&gt;<br>            &lt;tbody id=<span class="hljs-string">&quot;info&quot;</span>&gt;<br><br>            &lt;/tbody&gt;<br>        &lt;/table&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/01/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/01/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式是指为其他对象提供的一种代理以控制这个对象的访问。代理对象可以在客户类和目标对象之间起到中介的作用</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>代理类时自己寿佛那个实现的，自己创建的一个java类表示代理类</p><p>当接口中的功能增加或减少时会影响众多的实现类</p><p>代理类：目标类中的方法的调用，功能的增强</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在程序执行过程中，使用JDK反射机制创建代理类对象，并动态的指定要代理的目标类</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>使用java反射包中的类和接口实现的动态代理的功能</p><h4 id="InvocationHandler接口"><a href="#InvocationHandler接口" class="headerlink" title="InvocationHandler接口"></a>InvocationHandler接口</h4><p>接口中存在方法invoke()，表示代理对象要执行的功能代码，代理类要完成的功能就写在该方法中</p><h4 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h4><p>通过Method类可以执行某个目标类中的方法，Method.invoke(目标对象， 要调用方法的参数)</p><h4 id="Proxy类"><a href="#Proxy类" class="headerlink" title="Proxy类"></a>Proxy类</h4><p>创建代理对象，等同于静态代理中的new</p><p>newProxyInstance(ClassLoader, Class[], InvocationHandler)</p><p>ClassLoader：目标对象的类的类加载器</p><p>Class[]：接口，目标对象实现的接口</p><p>InvocationHandler：自己完成的代理类要实现的功能</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>创建接口，定义目标类要完成的功能</p><p>创建目标类并且实现接口</p><p>创建InvocationHandler接口的实现类，在invoke()方法中完成代理类的功能（调用目标方法，功能增强）</p><p>使用Proxy类的静态方法创建代理对象，并把返回值转换为接口类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//InvocationHandler实现类中的invoke()方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(目标对象, Method method, Object args[])</span>&#123;<br><span class="hljs-comment">//调用目标方法</span><br>    method.invoke(目标对象, args);<br>    <span class="hljs-comment">//功能增强</span><br>    <br>    <span class="hljs-keyword">return</span> 返回目标方法的执行结果;<br>&#125;<br><br><span class="hljs-comment">//调用的代理类</span><br><span class="hljs-comment">//创建动态代理对象</span><br>接口 proxy = (接口)Proxy.newProxyInstance(目标类.getClass().getClassLoader(),<br>                                        目标类.getClass().getInterfaces(),<br>                                        InvocationHandler);<br>proxy.sell();<br><br></code></pre></td></tr></table></figure><h3 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h3><p>通过继承目标类创建它的子类，在子类中重写父类中同名的方法实现功能的修改</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2022/01/30/SpringMVC/"/>
    <url>/2022/01/30/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h2><h3 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h3 id="SpringMVC的特点"><a href="#SpringMVC的特点" class="headerlink" title="SpringMVC的特点"></a>SpringMVC的特点</h3><ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><p>DispatcherServlet（中央调度器）：是一个servlet，负责接收用户请求，调用其他控制器对象，并进行响应</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 使用classpath:表示从类路径查找配置文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--load-on-startup：将启动控制DispatcherServlet的初始化时间提前到服务器启动时--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span><br><span class="hljs-comment">使用扩展名：*.xxxx   (*.do   *.mvc等等)，表示.do结尾的请求会调用中央调度器</span><br><span class="hljs-comment">        使用斜杠&quot;/&quot;：它会代替tomcat中的default导致静态资源都给DispatcherServlet处理（需要解决静态资源访问的问题）</span><br><span class="hljs-comment">/不能匹配.jsp请求路径的请求，/*可以</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">使用/解决静态资源访问的问题</span><br><span class="hljs-comment">    1. 在SpringMVC配置文件中加入&lt;mvc:default-servlet-handler/&gt;（要使用注解驱动解决冲突）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    2. mapping：访问的静态资源的URL地址，**表示子目录或文件</span><br><span class="hljs-comment">       location：静态资源在项目中的目录位置</span><br><span class="hljs-comment">       &lt;mvc:resources mapping=&quot;/static/**&quot; location=&quot;/static/&quot;/&gt;（要使用注解驱动解决冲突）</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建请求控制器"><a href="#创建请求控制器" class="headerlink" title="创建请求控制器"></a>创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建springMVC的配置文件"><a href="#创建springMVC的配置文件" class="headerlink" title="创建springMVC的配置文件"></a>创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhq.controller&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--或者声明转发视图解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--前缀：视图文件的路径（前后都要有/）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--后缀：视图文件的扩展名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--在SpringMVC配置文件中加入&lt;mvc:default-servlet-handler/&gt;（要使用注解驱动解决冲突）</span><br><span class="hljs-comment">创建控制器对象DefaultServletHttpRequestHandler把接收的请求转发给tomcat的default处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--在SpringMVC配置文件中加入&lt;mvc:default-servlet-handler/&gt;（要使用注解驱动解决冲突）</span><br><span class="hljs-comment">创建ResourceHttpRequestHandler对象，处理静态资源</span><br><span class="hljs-comment">mapping：访问的静态资源的URL地址，**表示子目录或文件</span><br><span class="hljs-comment">location：静态资源在项目中的目录位置</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/static/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/static/&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 开启mvc注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--解决响应乱码问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json;charset=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html;charset=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/json;charset=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Controller:创建处理器对象，对象放在SpringMVC容器中，定义类的上面</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-comment">//@RequestMapping放在类上可以指定所有请求地址的公共部分</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        @RequestMapping:请求映射，把一个请求地址和一个方法绑定在一起</span><br><span class="hljs-comment">                        属性：value：指定请求得url地址（以/开头），数组类型可以使用&#123;a,b....&#125;</span><br><span class="hljs-comment">                             method：指定请求方法（不指定时所有请求方式均可） </span><br><span class="hljs-comment">                             数组类型可以使用&#123;a,b....&#125;</span><br><span class="hljs-comment">                             常用的方式：RequestMethod.GET和RequestMethod.POST</span><br><span class="hljs-comment">                        位置：在方法上，指定请求路径</span><br><span class="hljs-comment">                             在类上，指定所有请求路径的公共部分</span><br><span class="hljs-comment">        @RequestMapping修饰的方法可以处理请求，类似servlet中的doGet和doPost方法</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>params属性</strong></p><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p><p>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="hljs-meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!&#x3D;123456” not met for actual request parameters: username&#x3D;{admin}, password&#x3D;{123456}</p></blockquote><p><strong>headers属性</strong></p><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</p><p>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><h3 id="SpringMVC支持ant风格的路径"><a href="#SpringMVC支持ant风格的路径" class="headerlink" title="SpringMVC支持ant风格的路径"></a>SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用时，只能使用&#x2F;&#x2F;xxx的方式</p><h3 id="支持路径中的占位符"><a href="#支持路径中的占位符" class="headerlink" title="支持路径中的占位符"></a>支持路径中的占位符</h3><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;a th:href=<span class="hljs-string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;&lt;/a&gt;<br><br><span class="hljs-meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRest</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, </span><br><span class="hljs-params">                       <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法返回值"><a href="#方法返回值" class="headerlink" title="方法返回值"></a>方法返回值</h2><h3 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h3><p>需要创建ModelAndView对象，Model表示数据，View表示视图，表示请求的处理结果返回数据(存储到作用域)和视图（进行转发操作）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;doSome&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">doSome</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;rname&quot;)</span>String name)</span>&#123;<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//添加数据，框架在请求最后把数据放入到request作用域中</span><br>    mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;springmvc开发&quot;</span>);<br>    <span class="hljs-comment">//指定视图，框架对视图指定forword操作</span><br>    mv.setViewName(<span class="hljs-string">&quot;/show.jsp&quot;</span>);<br>    <span class="hljs-comment">//使用视图解析器后可以直接使用逻辑名称（文件名），指定视图</span><br>    <span class="hljs-comment">//mv.setViewName(&quot;show&quot;);</span><br><br>    <span class="hljs-keyword">return</span> mv;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>直接返回一个字符串，表示视图，可以使用逻辑名称（需要使用视图解析器）或完整视图路径进程转发操作</p><p>对数据进行操作可以在形参中定义HttpServletRequest、HttpServletResponse、HttpSession对象</p><p>方法上增加@ResponseBody注解，表示数据，设置@RequestMapping属性produces &#x3D;”text&#x2F;plain;charset&#x3D;UTF-8”（返回text格式和UTF-8编码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String，表示视图</span><br><span class="hljs-meta">@RequestMapping(&quot;doSome&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSome</span><span class="hljs-params">(HttpServletRequest request, </span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestParam(&quot;rname&quot;)</span>String name)</span>&#123;<br>    <span class="hljs-comment">//返回数据</span><br>    request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;show&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//String，表示数据</span><br><span class="hljs-meta">@RequestMapping(&quot;doSome&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSome</span><span class="hljs-params">(HttpServletRequest request, </span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestParam(&quot;rname&quot;)</span>String name)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是数据&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>不能表示数据和视图，可以做AJAX操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//void返回值时</span><br><span class="hljs-meta">@RequestMapping(&quot;doAjax&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAjax</span><span class="hljs-params">(HttpServletResponse response, String name)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    student.setName(name);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (student!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//调用jackson中的方法将java对象转为json格式数据</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        json = objectMapper.writeValueAsString(student);<br>    &#125;<br>    <br>    response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>    <span class="hljs-comment">//将json数据响应给ajax</span><br>    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>    writer.print(json);<br>    writer.flush();<br>    writer.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>表示数据和视图无关</p><pre><code class="hljs">                   1. 加入jackson依赖                   2. 加入注解驱动&lt;mvc:annotation-driven/&gt;                   3. 在方法上加入@ResponseBody注解</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//object返回值时</span><br>&lt;!--注解驱动 完成java对象到json，xml，test...数据格式的转换（mvc那个）--&gt;<br>&lt;mvc:annotation-driven/&gt;<br><br><span class="hljs-comment">//@ResponseBody注解：把控制器方法返回对象转为json后，通过HttpServletResponse输出给ajax</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;doAjax&quot;)</span><br><span class="hljs-comment">//返回值时对象时，直接将对象转化为json，返回值时list集合时，将list转换为json数组</span><br><span class="hljs-keyword">public</span> Student <span class="hljs-title function_">doAjax</span><span class="hljs-params">(String name)</span>&#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    student.setName(name);<br>    <br>    <span class="hljs-keyword">return</span> student;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h2><h3 id="ServletAPI获取"><a href="#ServletAPI获取" class="headerlink" title="ServletAPI获取"></a>ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="控制器方法的形参"><a href="#控制器方法的形参" class="headerlink" title="控制器方法的形参"></a>控制器方法的形参</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>@RequestMapping(&quot;/testParam&quot;)<br>public String testParam(String username, String password)&#123;<br>    System.out.println(&quot;username:&quot;+username+&quot;,password:&quot;+password);<br>    return &quot;success&quot;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>属性：</p><p>​value：指定为形参赋值的请求参数的参数名</p><p>​required：设置是否必须传输此请求参数，默认值为true</p><p>​defaultValue：当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>属性：value、required、defaultValue用法同@RequestParam</p><h3 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="通过POJO"><a href="#通过POJO" class="headerlink" title="通过POJO"></a>通过POJO</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，对象中要存在set和get方法，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span>男<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>@RequestMapping(&quot;/testpojo&quot;)<br>public String testPOJO(User user)&#123;<br>    System.out.println(user);<br>    return &quot;success&quot;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决获取请求参数的乱码问题"><a href="#解决获取请求参数的乱码问题" class="headerlink" title="解决获取请求参数的乱码问题"></a>解决获取请求参数的乱码问题</h3><p>在web.xml中进行注册CharacterEncodingFilter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--过滤器，进行字符编码的设定--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置项目中使用的字符编码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--强制请求对象使用encoding编码的值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--强制响应对象使用encoding编码的值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--/*表示所有请求路径都过滤--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h2 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h2><h3 id="向request域对象共享数据"><a href="#向request域对象共享数据" class="headerlink" title="向request域对象共享数据"></a>向request域对象共享数据</h3><h4 id="使用ServletAPI"><a href="#使用ServletAPI" class="headerlink" title="使用ServletAPI"></a>使用ServletAPI</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,servletAPI&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用ModelAndView"><a href="#使用ModelAndView" class="headerlink" title="使用ModelAndView"></a>使用ModelAndView</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelAndView&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testModelAndView</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ModelAndView有Model和View的功能</span><br><span class="hljs-comment">     * Model主要用于向请求域共享数据</span><br><span class="hljs-comment">     * View主要用于设置视图，实现页面跳转</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//向请求域共享数据</span><br>    mav.addObject(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelAndView&quot;</span>);<br>    <span class="hljs-comment">//设置视图，实现页面跳转</span><br>    mav.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-keyword">return</span> mav;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用Model"><a href="#使用Model" class="headerlink" title="使用Model"></a>使用Model</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModel&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Model&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用map"><a href="#使用map" class="headerlink" title="使用map"></a>使用map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>&#123;<br>    map.put(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Map&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用ModelMap"><a href="#使用ModelMap" class="headerlink" title="使用ModelMap"></a>使用ModelMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModelMap</span><span class="hljs-params">(ModelMap modelMap)</span>&#123;<br>    modelMap.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelMap&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Model、ModelMap、Map的关系"><a href="#Model、ModelMap、Map的关系" class="headerlink" title="Model、ModelMap、Map的关系"></a>Model、ModelMap、Map的关系</h4><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Model</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;String, Object&gt; &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendedModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ModelMap</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Model</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BindingAwareModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ExtendedModelMap</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="向session域共享数据"><a href="#向session域共享数据" class="headerlink" title="向session域共享数据"></a>向session域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testSession&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    session.setAttribute(<span class="hljs-string">&quot;testSessionScope&quot;</span>, <span class="hljs-string">&quot;hello,session&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="向application域共享数据"><a href="#向application域共享数据" class="headerlink" title="向application域共享数据"></a>向application域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testApplication&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApplication</span><span class="hljs-params">(HttpSession session)</span>&#123;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    application.setAttribute(<span class="hljs-string">&quot;testApplicationScope&quot;</span>, <span class="hljs-string">&quot;hello,application&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringMVC的视图"><a href="#SpringMVC的视图" class="headerlink" title="SpringMVC的视图"></a>SpringMVC的视图</h2><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView，若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="ThymeleafView"><a href="#ThymeleafView" class="headerlink" title="ThymeleafView"></a>ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testHello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="转发视图"><a href="#转发视图" class="headerlink" title="转发视图"></a>转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图</p><p>此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testForward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testForward</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重定向视图"><a href="#重定向视图" class="headerlink" title="重定向视图"></a>重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图</p><p>此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRedirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedirect</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="视图控制器view-controller"><a href="#视图控制器view-controller" class="headerlink" title="视图控制器view-controller"></a>视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">path：设置处理的请求地址</span><br><span class="hljs-comment">view-name：设置请求地址所对应的视图名称</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testView&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：&lt;mvc:annotation-driven &#x2F;&gt;</p></blockquote><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>REST：表现层资源状态转移</p><h3 id="RESTful的实现"><a href="#RESTful的实现" class="headerlink" title="RESTful的实现"></a>RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词，分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1————get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user————post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1————delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user————put请求方式</td></tr></tbody></table><h3 id="HiddenHttpMethodFilter"><a href="#HiddenHttpMethodFilter" class="headerlink" title="HiddenHttpMethodFilter"></a>HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>​a&gt;当前请求的请求方式必须为post</p><p>​b&gt;当前请求必须传输请求参数_method（可修改该名称）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete_form&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/employee/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>    employeeDao.delete(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></blockquote><h2 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h2><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>获取post请求的请求体，使用方法的形参接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestBody&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestBody</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String requestBody)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;requestBody:&quot;</span>+requestBody);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RequestEntity"><a href="#RequestEntity" class="headerlink" title="RequestEntity"></a>RequestEntity</h3><p>封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestEntity</span><span class="hljs-params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;<br>    <span class="hljs-comment">//getHeaders()获取请求头信息</span><br>    System.out.println(<span class="hljs-string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());<br>    <span class="hljs-comment">//getBody()获取请求体信息</span><br>    System.out.println(<span class="hljs-string">&quot;requestBody:&quot;</span>+requestEntity.getBody());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ResponseEntity"><a href="#ResponseEntity" class="headerlink" title="ResponseEntity"></a>ResponseEntity</h3><p>用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器（响应的text数据）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseBody&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SpringMVC处理json"><a href="#SpringMVC处理json" class="headerlink" title="SpringMVC处理json"></a>SpringMVC处理json</h3><p>在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseUser&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">testResponseUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SpringMVC处理ajax"><a href="#SpringMVC处理ajax" class="headerlink" title="SpringMVC处理ajax"></a>SpringMVC处理ajax</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testAjax&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testAjax</span><span class="hljs-params">(String username, String password)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,ajax&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h2><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testDown&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取ServletContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-comment">//获取服务器中文件的真实路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;/static/img/1.jpg&quot;</span>);<br>    <span class="hljs-comment">//创建输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>    <span class="hljs-comment">//创建字节数组</span><br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br>    <span class="hljs-comment">//将流读到字节数组中</span><br>    is.read(bytes);<br>    <span class="hljs-comment">//创建HttpHeaders对象设置响应头信息</span><br>    MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    <span class="hljs-comment">//设置要下载方式以及下载文件的名字</span><br>    headers.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=1.jpg&quot;</span>);<br>    <span class="hljs-comment">//设置响应状态码</span><br>    <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br>    <span class="hljs-comment">//创建ResponseEntity对象</span><br>    ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);<br>    <span class="hljs-comment">//关闭输入流</span><br>    is.close();<br>    <br>    <span class="hljs-keyword">return</span> responseEntity;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;“multipart&#x2F;form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在SpringMVC的配置文件中添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>控制器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testUp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(MultipartFile photo, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取上传的文件的文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br>    <span class="hljs-comment">//处理文件重名问题</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hzName</span> <span class="hljs-operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    fileName = UUID.randomUUID().toString() + hzName;<br>    <span class="hljs-comment">//获取服务器中photo目录的路径</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">photoPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;photo&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(photoPath);<br>    <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>        file.mkdir();<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> photoPath + File.separator + fileName;<br>    <span class="hljs-comment">//实现上传功能</span><br>    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalPath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器的配置"><a href="#拦截器的配置" class="headerlink" title="拦截器的配置"></a>拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行，需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--声明拦截器，可以有多个--&gt;</span><br><span class="hljs-comment">&lt;!--拦截器的执行顺序是相当于在方法上画同心圆，执行是穿过同心圆--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--拦截器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定拦截的请求地址URL（**表示任意字符，文件或者多级目录和目录中的文件）--&gt;</span><br>        <span class="hljs-comment">&lt;!--/**表示根目录下的所有文件，表示拦截所有路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--放行请求--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/css/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/js/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/img/**&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--指定拦截器对象所在的类--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;handler.MyInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="拦截器的三个抽象方法"><a href="#拦截器的三个抽象方法" class="headerlink" title="拦截器的三个抽象方法"></a>拦截器的三个抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拦截器类，需要实现HandlerInterceptor接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        preHandle：预处理方法，在控制器方法执行之前先执行进行拦截，可以进行身份验证</span><br><span class="hljs-comment">            handler：表示被拦截的控制器对象</span><br><span class="hljs-comment">            返回值boolean：</span><br><span class="hljs-comment">                true：拦截放行</span><br><span class="hljs-comment">                false：进行拦截</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                             HttpServletResponse response,</span><br><span class="hljs-params">                             Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> HandlerInterceptor.<span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        postHandle：后处理方法，在控制器方法执行之后再执行拦截，可以修改modelAndView中数据和视图</span><br><span class="hljs-comment">            handler：表示被拦截的控制器对象</span><br><span class="hljs-comment">            modelAndView：表示控制器方法的返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                           HttpServletResponse response,</span><br><span class="hljs-params">                           Object handler,</span><br><span class="hljs-params">                           ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        afterCompletion：在请求处理完成后再执行进行拦截，一般做资源回收工作</span><br><span class="hljs-comment">            handler：表示被拦截的控制器对象</span><br><span class="hljs-comment">            ex：程序中发生的异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                HttpServletResponse response,</span><br><span class="hljs-params">                                Object handler,</span><br><span class="hljs-params">                                Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多个拦截器的执行顺序"><a href="#多个拦截器的执行顺序" class="headerlink" title="多个拦截器的执行顺序"></a>多个拦截器的执行顺序</h3><p><strong>若每个拦截器的preHandle()都返回true</strong></p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行（相当于一个拦截器就是一个圆，多个拦截器就是多个同心圆）</p><p><strong>若某个拦截器的preHandle()返回了false</strong></p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的afterComplation()拦截器会执行</p><h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><h3 id="基于配置的异常处理"><a href="#基于配置的异常处理" class="headerlink" title="基于配置的异常处理"></a>基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：</p><p>​DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        properties的键表示处理器方法执行过程中出现的异常</span><br><span class="hljs-comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span><br><span class="hljs-comment">        --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionAttribute&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="基于注解的异常处理"><a href="#基于注解的异常处理" class="headerlink" title="基于注解的异常处理"></a>基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@ControllerAdvice：将当前类标识为异常处理的组件</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionController</span> &#123;<br><br>    <span class="hljs-comment">//@ExceptionHandler：用于设置所标识方法处理的异常</span><br>    <span class="hljs-comment">//value的值可以使自定义的异常类，若不写表示处理没定义处理异常方法的异常类（其他异常类）</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-comment">//ex表示当前请求处理中出现的异常对象</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleArithmeticException</span><span class="hljs-params">(Exception ex, Model model)</span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;ex&quot;</span>, ex);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注解配置SpringMVC"><a href="#注解配置SpringMVC" class="headerlink" title="注解配置SpringMVC"></a>注解配置SpringMVC</h2><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="创建初始化类，代替web-xml"><a href="#创建初始化类，代替web-xml" class="headerlink" title="创建初始化类，代替web.xml"></a>创建初始化类，代替web.xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定spring的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定SpringMVC的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加字符过滤器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">encodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        encodingFilter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        encodingFilter.setForceRequestEncoding(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">hiddenHttpMethodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建SpringConfig配置类，代替spring的配置文件"><a href="#创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="创建SpringConfig配置类，代替spring的配置文件"></a>创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><span class="hljs-comment">//ssm整合之后，spring的配置信息写在此类中</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="创建WebConfig配置类，代替SpringMVC的配置文件"></a>创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//扫描组件</span><br><span class="hljs-meta">@ComponentScan(&quot;com.zhq.mvc.controller&quot;)</span><br><span class="hljs-comment">//开启MVC注解驱动</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//使用默认的servlet处理静态资源</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br><br>    <span class="hljs-comment">//配置文件上传解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CommonsMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//配置拦截器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-type">FirstInterceptor</span> <span class="hljs-variable">firstInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstInterceptor</span>();<br>        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//配置视图控制</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//配置异常映射</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureHandlerExceptionResolvers</span><span class="hljs-params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;<br>        <span class="hljs-type">SimpleMappingExceptionResolver</span> <span class="hljs-variable">exceptionResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMappingExceptionResolver</span>();<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.setProperty(<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>        <span class="hljs-comment">//设置异常映射</span><br>        exceptionResolver.setExceptionMappings(prop);<br>        <span class="hljs-comment">//设置共享异常信息的键</span><br>        exceptionResolver.setExceptionAttribute(<span class="hljs-string">&quot;ex&quot;</span>);<br>        resolvers.add(exceptionResolver);<br>    &#125;<br><br>    <span class="hljs-comment">//配置生成模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ITemplateResolver <span class="hljs-title function_">templateResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">webApplicationContext</span> <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext();<br>        <span class="hljs-comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span><br>        <span class="hljs-type">ServletContextTemplateResolver</span> <span class="hljs-variable">templateResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextTemplateResolver</span>(<br>            webApplicationContext.getServletContext());<br>        templateResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>);<br>        templateResolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>        templateResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        templateResolver.setTemplateMode(TemplateMode.HTML);<br>        <span class="hljs-keyword">return</span> templateResolver;<br>    &#125;<br><br>    <span class="hljs-comment">//生成模板引擎并为模板引擎注入模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">templateEngine</span><span class="hljs-params">(ITemplateResolver templateResolver)</span> &#123;<br>        <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">templateEngine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>        templateEngine.setTemplateResolver(templateResolver);<br>        <span class="hljs-keyword">return</span> templateEngine;<br>    &#125;<br><br>    <span class="hljs-comment">//生成视图解析器并为解析器注入模板引擎</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">(SpringTemplateEngine templateEngine)</span> &#123;<br>        <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">viewResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>        viewResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        viewResolver.setTemplateEngine(templateEngine);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h2><h3 id="SpringMVC常用组件"><a href="#SpringMVC常用组件" class="headerlink" title="SpringMVC常用组件"></a>SpringMVC常用组件</h3><ul><li>DispatcherServlet：<strong>前端控制器</strong>，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong>，由框架提供</li></ul><p>作用：将模型数据通过页面展示给用户</p><h3 id="DispatcherServlet初始化过程"><a href="#DispatcherServlet初始化过程" class="headerlink" title="DispatcherServlet初始化过程"></a>DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-kphToPhs-1627992919015)(img&#x2F;img005.png)]</p><h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">initWebApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">rootContext</span> <span class="hljs-operator">=</span><br>        WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.webApplicationContext != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// A context instance was injected at construction time -&gt; use it</span><br>        wac = <span class="hljs-built_in">this</span>.webApplicationContext;<br>        <span class="hljs-keyword">if</span> (wac <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;<br>            <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">cwac</span> <span class="hljs-operator">=</span> (ConfigurableWebApplicationContext) wac;<br>            <span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;<br>                <span class="hljs-comment">// The context has not yet been refreshed -&gt; provide services such as</span><br>                <span class="hljs-comment">// setting the parent context, setting the application context id, etc</span><br>                <span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// The context instance was injected without an explicit parent -&gt; set</span><br>                    <span class="hljs-comment">// the root application context (if any; may be null) as the parent</span><br>                    cwac.setParent(rootContext);<br>                &#125;<br>                configureAndRefreshWebApplicationContext(cwac);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance was injected at construction time -&gt; see if one</span><br>        <span class="hljs-comment">// has been registered in the servlet context. If one exists, it is assumed</span><br>        <span class="hljs-comment">// that the parent context (if any) has already been set and that the</span><br>        <span class="hljs-comment">// user has performed any initialization such as setting the context id</span><br>        wac = findWebApplicationContext();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance is defined for this servlet -&gt; create a local one</span><br>        <span class="hljs-comment">// 创建WebApplicationContext</span><br>        wac = createWebApplicationContext(rootContext);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.refreshEventReceived) &#123;<br>        <span class="hljs-comment">// Either the context is not a ConfigurableApplicationContext with refresh</span><br>        <span class="hljs-comment">// support or the context injected at construction time had already been</span><br>        <span class="hljs-comment">// refreshed -&gt; trigger initial onRefresh manually here.</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.onRefreshMonitor) &#123;<br>            <span class="hljs-comment">// 刷新WebApplicationContext</span><br>            onRefresh(wac);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.publishContext) &#123;<br>        <span class="hljs-comment">// Publish the context as a servlet context attribute.</span><br>        <span class="hljs-comment">// 将IOC容器在应用域共享</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> getServletContextAttributeName();<br>        getServletContext().setAttribute(attrName, wac);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> &#123;<br>    Class&lt;?&gt; contextClass = getContextClass();<br>    <span class="hljs-keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextException</span>(<br>            <span class="hljs-string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +<br>            <span class="hljs-string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +<br>            <span class="hljs-string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 通过反射创建 IOC 容器对象</span><br>    <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span><br>        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);<br><br>    wac.setEnvironment(getEnvironment());<br>    <span class="hljs-comment">// 设置父容器</span><br>    wac.setParent(parent);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">configLocation</span> <span class="hljs-operator">=</span> getContextConfigLocation();<br>    <span class="hljs-keyword">if</span> (configLocation != <span class="hljs-literal">null</span>) &#123;<br>        wac.setConfigLocation(configLocation);<br>    &#125;<br>    configureAndRefreshWebApplicationContext(wac);<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>   initMultipartResolver(context);<br>   initLocaleResolver(context);<br>   initThemeResolver(context);<br>   initHandlerMappings(context);<br>   initHandlerAdapters(context);<br>   initHandlerExceptionResolvers(context);<br>   initRequestToViewNameTranslator(context);<br>   initViewResolvers(context);<br>   initFlashMapManager(context);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DispatcherServlet调用组件处理请求"><a href="#DispatcherServlet调用组件处理请求" class="headerlink" title="DispatcherServlet调用组件处理请求"></a>DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">failureCause</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">previousLocaleContext</span> <span class="hljs-operator">=</span> LocaleContextHolder.getLocaleContext();<br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">localeContext</span> <span class="hljs-operator">=</span> buildLocaleContext(request);<br><br>    <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">previousAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>    <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> buildRequestAttributes(request, response, previousAttributes);<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br>    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestBindingInterceptor</span>());<br><br>    initContextHolders(request, localeContext, requestAttributes);<br><br>    <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span><br>        doService(request, response);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (ServletException | IOException ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Request processing failed&quot;</span>, ex);<br>    &#125;<br><br>    <span class="hljs-keyword">finally</span> &#123;<br>        resetContextHolders(request, previousLocaleContext, previousAttributes);<br>        <span class="hljs-keyword">if</span> (requestAttributes != <span class="hljs-literal">null</span>) &#123;<br>            requestAttributes.requestCompleted();<br>        &#125;<br>        logResult(request, response, failureCause, asyncManager);<br>        publishRequestHandledEvent(request, response, startTime, failureCause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    logRequest(request);<br><br>    <span class="hljs-comment">// Keep a snapshot of the request attributes in case of an include,</span><br>    <span class="hljs-comment">// to be able to restore the original attributes after the include.</span><br>    Map&lt;String, Object&gt; attributesSnapshot = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;<br>        attributesSnapshot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();<br>        <span class="hljs-keyword">while</span> (attrNames.hasMoreElements()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> (String) attrNames.nextElement();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;<br>                attributesSnapshot.put(attrName, request.getAttribute(attrName));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Make framework objects available to handlers and view objects.</span><br>    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());<br>    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.localeResolver);<br>    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.themeResolver);<br>    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flashMapManager != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">FlashMap</span> <span class="hljs-variable">inputFlashMap</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);<br>        <span class="hljs-keyword">if</span> (inputFlashMap != <span class="hljs-literal">null</span>) &#123;<br>            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));<br>        &#125;<br>        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlashMap</span>());<br>        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="hljs-built_in">this</span>.flashMapManager);<br>    &#125;<br><br>    <span class="hljs-type">RequestPath</span> <span class="hljs-variable">requestPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;<br>        requestPath = ServletRequestPathUtils.parseAndCache(request);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 处理请求和响应</span><br>        doDispatch(request, response);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Restore the original attribute snapshot, in case of an include.</span><br>            <span class="hljs-keyword">if</span> (attributesSnapshot != <span class="hljs-literal">null</span>) &#123;<br>                restoreAttributesAfterInclude(request, attributesSnapshot);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (requestPath != <span class="hljs-literal">null</span>) &#123;<br>            ServletRequestPathUtils.clearParsedRequestPath(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            processedRequest = checkMultipart(request);<br>            multipartRequestParsed = (processedRequest != request);<br><br>            <span class="hljs-comment">// Determine handler for the current request.</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            mappedHandler：调用链</span><br><span class="hljs-comment">                包含handler、interceptorList、interceptorIndex</span><br><span class="hljs-comment">            handler：浏览器发送的请求所匹配的控制器方法</span><br><span class="hljs-comment">            interceptorList：处理控制器方法的所有拦截器集合</span><br><span class="hljs-comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span><br><span class="hljs-comment">            */</span><br>            mappedHandler = getHandler(processedRequest);<br>            <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                noHandlerFound(processedRequest, response);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>           <span class="hljs-comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span><br>            <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>            <span class="hljs-comment">// Process last-modified header, if supported by the handler.</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>.equals(method);<br>            <span class="hljs-keyword">if</span> (isGet || <span class="hljs-string">&quot;HEAD&quot;</span>.equals(method)) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 调用拦截器的preHandle()</span><br>            <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Actually invoke the handler.</span><br>            <span class="hljs-comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span><br>            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>            <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            applyDefaultViewName(processedRequest, mv);<br>            <span class="hljs-comment">// 调用拦截器的postHandle()</span><br>            mappedHandler.applyPostHandle(processedRequest, response, mv);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            dispatchException = ex;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>            <span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br>            <span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>            dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>        &#125;<br>        <span class="hljs-comment">// 后续处理：处理模型数据和渲染视图</span><br>        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler,<br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Instead of postHandle and afterCompletion</span><br>            <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Clean up any resources used by a multipart request.</span><br>            <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>                cleanupMultipart(processedRequest);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ModelAndViewDefiningException) &#123;<br>            logger.debug(<span class="hljs-string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);<br>            mv = ((ModelAndViewDefiningException) exception).getModelAndView();<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (mappedHandler != <span class="hljs-literal">null</span> ? mappedHandler.getHandler() : <span class="hljs-literal">null</span>);<br>            mv = processHandlerException(request, response, handler, exception);<br>            errorView = (mv != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Did the handler return a view to render?</span><br>    <span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>        <span class="hljs-comment">// 处理模型数据和渲染视图</span><br>        render(mv, request, response);<br>        <span class="hljs-keyword">if</span> (errorView) &#123;<br>            WebUtils.clearErrorRequestAttributes(request);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>        <span class="hljs-comment">// Concurrent handling started during a forward</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// Exception (if any) is already handled..</span><br>        <span class="hljs-comment">// 调用拦截器的afterCompletion()</span><br>        mappedHandler.triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h3><ol><li>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</li><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</li></ol><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><img src="/2022/01/30/SpringMVC/01/30/SpringMVC/8df6a30e77184eb0bc1547dae5838f65.png" class title="在这里插入图片描述"><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><img src="/2022/01/30/SpringMVC/01/30/SpringMVC/67d25736b3b74dfe9145acedb0e8656d.png" class title="在这里插入图片描述"><p>b) 存在则执行下面的流程</p><ol><li>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</li><li>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</li><li>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</li><li>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</li></ol><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><ol><li>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</li><li>此时将开始执行拦截器的postHandle(…)方法【逆向】。</li><li>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</li><li>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</li><li>将渲染结果返回给客户端。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2021/11/16/JavaWeb/"/>
    <url>/2021/11/16/JavaWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="Tomcat服务器"><a href="#Tomcat服务器" class="headerlink" title="Tomcat服务器"></a>Tomcat服务器</h2><p><strong>tomcat是实现了Servlet和JSP规范的容器</strong></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>bin：存放命令</p><p>conf：配置文件</p><p>lib：字节码库</p><p>logs：启动日志信息</p><p>temp：临时文件</p><p>webapps：项目存放目录</p><p>work：jsp相关目录，存放jsp文件翻译生成的文件</p><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p>webapps项目存放在该目录下，项目目录中文件结构如下</p><p>​css</p><p>​html</p><p>​js</p><p>​WEB-INF(规范，必须写) —–&gt; classes(字节码)    lib(jar包)     web.xml(配置文件)</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Servlet是JavaEE规范之一，规范就是接口。</p><p>Servlet是运行在服务器上的Java小程序，它可以接收客户端发送过来的请求，并响应数据给客户端。</p><p>创建Servlet程序步骤：</p><ol><li>编写一个类实现Servlet接口</li><li>实现service()方法，处理请求，并响应数据</li><li>到web.xml中配置servlet程序的访问地址 或者 用@WebServlet(“虚拟路径”)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 给Tomcat配置servlet程序--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 给servlet程序起一个别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- servlet程序的全类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.test.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 给servlet程序配置访问地址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 告诉服务器，当前给HelloServlet程序配置地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置访问地址</span><br><span class="hljs-comment">/代表：http://ip:端口/工程路径</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>web容器会在容器上下文中寻找请求路径对应的Servlet对象<ol><li>若在请求路径中没找到对应的Servlet对象，会通过web.xml文件中的相关配置信息，得到请求路径对应的Servlet完整类名，再通过反射机制调用Servlet类的无参构造函数完成Servlet对象的实例化</li><li>若找到了就直接直接调用servlet对象</li></ol></li><li>执行init()初始化方法（init()方法在调用前已经创建好了）<strong>1,2步是在第一次访问创建Servlet程序时调用</strong></li><li>执行service()方法（每次访问都调用service()）</li><li>执行destroy()方法（在web工程停止时调用，对象没销毁之前调用destroy()方法进行对象销毁前最后的工作）</li></ol><p>注意：Servlet是单利模式，但构造方法不是私有的，多线程时存在安全问题，尽量不在Servlet中使用实例变量</p><h3 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h3><p>Servlet   ————–   接口</p><p>​|    实现</p><p>GenericServlet    ————-   抽象类（将Servlet接口的其他方法进行了空实现，只将service()方法作为抽象方法）</p><p>​|    继承</p><p>HttpServlet   ————–   抽象类（对http协议的一种封装，复写doGet和doPost方法就可，什么请求复写什么方法）</p><p>httpServlet是一个典型的模板方法设计模式</p><h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><p>每次只要有请求进入服务器，服务器都会创建一个Request对象，服务器就会把请求过来的Http协议信息解析封装到Request对象中，然后传递到service()方法中进行使用</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li><p>getContextPath()          获取虚拟目录，webapp的根路径</p></li><li><p>getRequestURI()     获得请求的资源路径</p></li><li><p>getRequestURL()            获得请求的统一资源定位符（绝对路径）</p></li><li><p>getRemoteAdder()              获得客户端的ip地址</p></li><li><p>getServletPath()              获取servlet路径</p></li><li><p>getMethod()                      获得请求的方式（GET或POST）</p></li><li><p>getHeader(“User-Agent”)     获得消息报头</p></li><li><p>getParameter()                 获得请求参数值（在POST请求中有中文时要设置字符集 </p></li><li><p>getParameterValues()     获得请求参数值（多个值时使用）</p></li><li><p>getParameterNames()     获取所有请求参数名称，返回的是Enumeration类型</p></li><li><p>getParameterMap()          获取参数名称和值得Map集合</p></li><li><p>setAttribute(key, value)   设置域数据(request域:代表一次请求的范围,一般用于多个请求转发的资源共享)</p></li><li><p>getAttribute(key)               获取域数据</p></li><li><p>removeAttribute(key)        删除键值对</p></li><li><p>getReader()                       获取字符输入流，只能操作字符数据</p></li><li><p>getInputStream()              获取字节输入流，可以操作所有类型数据</p></li><li><p>getRequestDispatcher()获取请求转发对象           forward(req, rsep)进行转发</p><p>语法：</p><p>​HttpServletRequest对象.getRequestDispatcher(“&#x2F;工程路径”).forward(HttpServletRequest对象1, HttpServletRequest对象2);</p><p>请求转发：服务器收到请求后，服务器内部从一个资源跳转到另一个资源的操作，一般服务器存在给另一个页面共享数据时使用</p><p>特点：浏览器地址栏不发生改变； 只能转发到当前服务器内部的资源； 转发是一次请求（可以使用request对象共享数据）</p></li></ol><h3 id="HttpServletResponse类"><a href="#HttpServletResponse类" class="headerlink" title="HttpServletResponse类"></a>HttpServletResponse类</h3><p>每次只要有请求进入Tomcat服务器，Tomcat服务器都会创建一个Response对象，表示请求过来的信息（所有相应的信息）</p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><p>setHeader()：修改响应头信息</p><p>content-type：修改mime类型（mime类型就像这样的类型text&#x2F;html）</p><p>content-disposition：设置打开响应头的方式</p><p>输出流往客户端回传数据，两个流不能同时使用</p><p>getOutputStream()字节输出流——–常用于下载，传递二进制数据</p><p>getWriter()字符输出流————常用于回传字符串          </p><p>sendRedirect(“新地址”)：请求重定向</p><p>客户端给服务器发起请求，服务器给客户端一个新的地址，一般对数据库进行操作没有进行页面之间的数据共享时使用</p><p>特点：浏览器地址栏发生改变； 可以访问其他服务器的资源； 重定向是两次请求；可以解决页面刷新问题</p><h3 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h3><ol><li>ServletContext是一个接口，它代表整个web应用，可以和程序的服务器来通信</li><li>一个web工程，只有一个ServletContext对象实例，ServletContext对象是一个域对象</li><li>ServletContext是所有Servlet对象的四周环境代表，所有用户要想共享同一个数据时，可以把数据存放在ServletConfig的对象中，可以跨用户传递数据</li><li>获取方式：<ol><li>通过request对象获取：request.getServletContext()</li><li>通过HttpServlet获取：this.getServletContext()</li><li>通过ServletConfig获取：servletConfig.getServletContext()</li></ol></li><li>获取web.xml中配置的上下文参数context-param</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 上下文参数（属于整个web工程）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上下文参数名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>namespace<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上下文参数值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li><p>功能</p><ol><li><p>获取MIME类型：在互联网通信过程中定义的一种文件数据类型（大类型&#x2F;小类型）     例如：text&#x2F;html</p><p>String getMimeType(String file)</p></li><li><p>域对象：共享数据，整个web用户共享</p><p>setAttribute(key, value)   设置域数据          （域范围：整个web工程，所有用户的所有请求）</p><p>getAttribute(key)               获取域数据</p><p>removeAttribute(key)        删除键值对</p><p>getInitParamete(name)     获取上下文初始化参数</p></li><li><p>获取文件的真实（服务器）路径：</p><p>String getRealPath(String path)   path例如&#x2F;dao&#x2F;b.txt，其中&#x2F;表示webapp的根目录</p></li></ol></li></ol><h3 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h3><ol><li><p>ServletConfig是Servlet对象的配置信息类，Servlet配置信息在web.xml文件中，一个Servlet对象对应一个ServletConfig对象，Servlet程序创建时就创建对应的ServletConfig对象</p></li><li><p>常用方法</p><p>servletConfig.getServletName()：可以获取servlet程序的别名servlet-name的值</p><p>servletConfig.getInitParamete(name)：获取初始化参数init-param的值</p><p>servletConfig.getServletContext()：获取Servlet上下文对象</p></li><li><p>将init方法的ServletConfig参数在service方法中使用时，创建一个私有实例变量ServletConfig，在init的方法中将局部变量赋值给实例变量，将getServletConfig方法中返回实例变量ServletConfig供子类使用</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!-- 创建在servlet标签中--&gt;</span><br><span class="hljs-comment">&lt;!-- 初始化参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 初始化参数名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>namespace<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 初始化参数值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><ol><li><p>Http协议就是指客户端和服务器之间通信时发送的数据，需要遵守的规则</p></li><li><p>Http协议中的数据又叫报文</p></li><li><p>客户端给服务器发送数据叫请求，服务器给客户端回传数据叫响应</p></li><li><p>请求分为GET请求和POST请求           </p><p>get请求会被浏览器缓存，要想不缓存可以再请求路径中加时间，改变每次请求的请求路径</p><p><strong>GET请求</strong>  不太安全 请求体在URL地址栏</p><ol><li><p>请求行（包含了POST请求请求体中的参数）</p><p>请求的方式， 请求的资源路径， 请求的协议版本号</p></li><li><p>消息报头</p><p>key:value 组成（不同的键值对，表示不同的含义）</p><p>Accept：告诉服务器客户端可以接收的数据类型</p><p>Accept-Language：告诉服务器客户端可以接收的语言</p><p>User-Agent：浏览器的信息</p><p>Accept-Encoding：告诉服务器客户端可以接收的数据编码格式</p><p>Host：表示请求的服务器ip和端口号</p><p>Connection：告诉服务器请求的链接如何处理（Keep-Alive 回传数据不要马上关闭连接一段时间， Closed 马上关闭）</p></li></ol><p><strong>POST请求</strong>  相对安全  只有表单form标签中设置为post请求时才是post请求</p><ol><li><p>请求行</p><p>请求的方式， 请求的资源路径， 请求的协议版本号</p></li><li><p>消息报头</p><p>key:value 组成（不同的键值对，表示不同的含义）</p><p>Accept：告诉服务器客户端可以接收的数据类型</p><p>Accept-Language：告诉服务器客户端可以接收的语言</p><p>Referer：发起请求时，浏览器地址栏中的地址</p><p>User-Agent：浏览器的信息</p><p>Content-Type：发送的数据的类型</p><p>Accept-Encoding：告诉服务器客户端可以接收的数据编码格式</p><p>Host：表示请求的服务器ip和端口号</p><p>Connect-Length：发送的数据的长度</p><p>Connection：告诉服务器请求的链接如何处理（Keep-Alive 回传数据不要马上关闭连接一段时间， Closed 马上关闭）</p><p>Cache-Control：控制缓存</p></li><li><p>空白行</p></li><li><p>请求体（发送给服务器的数据参数）</p></li></ol><p>响应</p><ol><li>状态行（协议版本号 状态码 状态描述信息）</li><li>响应报头</li><li>空白行</li><li>响应体</li></ol><p>响应码：</p><ol><li>1xx：服务器接收客户端消息，但没有接收完成</li><li>2xx：成功</li><li>3xx：重定向</li><li>4xx：客户端错误</li><li>5xx：服务器错误</li></ol></li></ol><h3 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h3><h4 id="浏览器乱码"><a href="#浏览器乱码" class="headerlink" title="浏览器乱码"></a>浏览器乱码</h4><ol><li>html中：&lt;meta content&#x3D;”text&#x2F;html;charset&#x3D;UTF-8””&gt;</li><li>经过Servlet之后：response.setContentType(“text&#x2F;html;charset&#x3D;UTF-8”);</li></ol><h4 id="服务器乱码"><a href="#服务器乱码" class="headerlink" title="服务器乱码"></a>服务器乱码</h4><p>resquest.setCharacterEncoding(“UTF-8”)：只适合POST请求，只对请求体进行编码</p><h3 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h3><p>给服务器使用的路径不需要加虚拟目录（项目的访问路径）</p><p>给浏览器使用的需要加虚拟目录【请求从哪来路径就是给谁使用】</p><p>base标签：设置页面相对路径工作时参照的地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">常用的路径：<br>1. <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/项目名/资源路径&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>2. <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/项目名/资源路径&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>3. cookie.setPath(&quot;/项目名/资源路径&quot;)<br>4. 重定向：response.getRequestDispatcher(&quot;/资源路径&quot;).forward(request, reponse)<br>5. 欢迎页面：资源路径<br>6. servlet路径：/自定义资源路径<br></code></pre></td></tr></table></figure><h3 id="欢迎页面"><a href="#欢迎页面" class="headerlink" title="欢迎页面"></a>欢迎页面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>页面名称<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ol><li><p>欢迎页面可以设置多个，按照编写顺序从上到下访问，如果上边的页面资源不存在时，才会访问下边的资源</p></li><li><p>页面名称：以webapp根目录的文件开始，但不用以&#x2F;开始</p></li><li><p>欢迎页面有全局配置和局部配置</p><p>​全局配置：conf&#x2F;web.xml</p><p>​局部配置：webapp&#x2F;WEB-INF&#x2F;web.xml</p></li></ol><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><ol><li><p>会话：一次会话中包含多次请求和多次响应（浏览器第一次给服务器发送请求会话建立，直到一方断开为止）</p><p>本质上是session对象销毁时会话才会结束，session销毁之前可以通过复写URL的JSESSIONID的方式可以访问之前的会话，但要直到session对应的cookie中的JSESSIONID的值</p></li><li><p>功能：在一次会话的范围内的多次请求间共享数据，对个request之间共享数据</p></li></ol><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>cookie是http协议的，只是Tomcat中将cookie封装成了类</p><ol><li><p>功能：将数据保存在客户端</p></li><li><p>使用步骤：</p><ol><li>创建Cookie对象，绑定数据   new Cookie(String name, String value)</li></ol></li><li><p>发送Cookie对象，服务器将Cookie数据放到响应头中，响应给浏览器（例如：set-cookie:name&#x3D;value）         response.addCookie(Cookie cookie)</p><ol start="3"><li>获取Cookie对象，浏览器将Cookie数据放到请求头中，发送给服务器（例如：cookie:name&#x3D;value）拿到数据          Cookie[]   requst.getCookies()</li></ol><p>就相当于输入输出流，获取文件（输入流&#x2F;获取cookie对象），修改文件（修改cookie对象的name或value），响应文件（输出流&#x2F;添加cookie对象）</p></li><li><p>一次可以发送多个cookie，创建多个cookie对象</p></li><li><p>默认情况下，Cookie存储在浏览器缓存中，当浏览器关闭后，Cookie数据被销毁</p><p>持久化储存： setMaxAge(int seconds)    </p><p>​seconds为整数时表示将Cookie数据写入到磁盘文件中seconds秒的时间</p><p>​seconds为负数时表示默认值，关闭浏览器，Cookie数据销毁</p><p>​seconds为0时表示删除Cookie数据信息</p></li><li><p>默认情况下Cookie数据不能在Tomcat中的web项目共享</p><ol><li><p>setPath(String path)设置cookie数据的获取范围，cookie数据绑定路径，默认为当前的虚拟目录，“&#x2F;”表示cookie可以共享到整个Tomcat服务器中</p></li><li><p>setDomain(String path)设置一级域名相同，多个服务器之间cookie共享</p><p>比如：setDomain(“.baidu.com”)，tieba.baidu.com和news.baidu.com之间的cookie数据共享</p></li></ol></li><li><p>作用：cookie数据存储在客户端浏览器，并且对于单个cookie的大小有限制(4kb)对于同一域名下的总cookie数量也有限制(20个)</p><p>cookie一般用于存储少量的不太敏感的数据，在不登录的情况下，完成服务器对客户端的身份识别</p></li></ol><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><ol><li><p>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端HttpSession对象中。</p></li><li><p>使用步骤：</p><ol><li><p>获取HttpSession对象，没有则创建新的session对象   HttpSession session &#x3D; request.getSession();    </p><p> 获取session对象，没有获取到则返回空    request.getSession(false);</p></li><li><p>常用方法</p><p>Object getAttribute(String name)      设置域数据        <strong>整个会话共享</strong></p><p>void setAttribute(String name, Object value)      获取域数据</p><p>void removeAttribute(String name)       删除域数据</p><p>void invalidate()    销毁session对象</p></li></ol></li><li><p>客户端和浏览器都不关闭时（会话不结束时），每次请求获取的session对象是同一个session对象</p></li><li><p>原理：</p><p>Session的实现依赖于Cookie，浏览器首次请求时会话建立，创建一个HttpSession对象，同时生成session对象对应的cookie对象，cookie对象的key是JSESSIONID，value是32位的字符串，将cookie对象的value字符串值和session对象绑定到session的map列表中，每次请求浏览器向服务器发送cookie，服务器查找session列表找到cookie对象中key值对应的session对象，响应给session</p></li><li><p>服务器中的session对象销毁是遵循超时销毁规则的，默认是会话结束30分钟内没有会话建立时，session销毁，可以在web.xml文件中设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>默认情况下，客户端关闭，服务器不关闭，两次获取的session不是同一个</p><p>可以创建Cookie，键为<strong>JSESSIONID</strong>，设置存活时间，让cookie持久化保存</p><p>Cookie c &#x3D; new Cookie(“JSESSIONID”, session.getId());</p><p>c.setMaxAge(seconds);</p><p>reponse.addCookie(c);</p></li><li><p>客户端不关闭，服务器关闭，两次获取的session不是同一个</p><p>虽然不是同一个但是要确保数据不会丢失</p><p>​session的钝化：在服务器正常关闭前，将session对象序列化到硬盘上</p><p>​session的活化：在服务器启动后，将session文件转换为内存中的session对象</p></li><li><p>特点：</p><ol><li>session用于存储一次会话的多次请求的数据，存储在服务器</li><li>session可以存储任意类型，任意大小的数据</li></ol></li></ol><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p>作用：当访问服务器的资源时，过滤器可以将请求和响应拦截下来，完成一些特殊功能；比如登录验证，统一编码处理，敏感字符过滤</p><h3 id="FilterConfig"><a href="#FilterConfig" class="headerlink" title="FilterConfig"></a>FilterConfig</h3><p>Filter的配置信息类，相当于ServletConfig</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">filterConfig.getFilterName()：获取Filter的Name<br>filterConfig.getInitParameterNames()：获取所有的初始化参数名称<br>filterConfig.getInitParameter(name)：获取name对应的value值<br>filterConfig.getServletContext()：获取全局域对象<br></code></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>定义一个类，实现接口Filter</p></li><li><p>复写方法doFilte()方法拦截：在方法中调用filterChain.doFilter()将拦截的资源放行</p></li><li><p>配置拦截路径</p><ol><li>web.xml</li><li>注解：注解中写的是要拦截的路径  @WebFilter()</li></ol></li></ol><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ol><li>执行过滤器</li><li>执行放行后的资源</li><li>回来执行过滤器放行后的代码</li></ol><h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>服务器启动创建Filter对象</li><li>init：执行init方法，只执行一次</li><li>doFilter：每次请求被拦截资源时被执行</li><li>destroy：在服务器关闭时，Filter对象被销毁，正常关闭服务器会执行destroy方法</li></ol><h3 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h3><p>注解的value属性或web.xml中&lt; usl-pattern&gt;拦截路径&lt; &#x2F;usl-pattern&gt;</p><ol><li>具体资源路径：&#x2F;index.jsp</li><li>拦截目录：&#x2F;user&#x2F;*</li><li>后缀名拦截：*.jsp</li><li>拦截所有的资源：&#x2F;*</li></ol><h3 id="拦截方式"><a href="#拦截方式" class="headerlink" title="拦截方式"></a>拦截方式</h3><p>资源被访问的方式</p><ol><li><p>注解：@WebFilter()</p><p>设置dispatcherTypes属性</p><ol><li>REQUEST：默认值，浏览器直接访问资源</li><li>FORWARD：转发访问资源</li><li>INCLUDE：包含访问资源</li><li>ERROR：错误跳转资源</li><li>ASYNC：异步访问资源</li></ol></li><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>全限定类名<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">usl-pattern</span>&gt;</span>拦截路径<span class="hljs-tag">&lt;/<span class="hljs-name">usl-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dispatcher</span>&gt;</span>拦截方式<span class="hljs-tag">&lt;/<span class="hljs-name">dispatcher</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><p>配置多个过滤器</p><p>执行顺序：过滤器1， 过滤器2， 资源， 过滤器2， 过滤器1</p><p>过滤器先后顺序配置：</p><p>​注解配置：按照类名的字符串比较规则比较，值小的先执行</p><p>​web.xml配置：谁定义在上边，谁先执行</p><h2 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h2><p>事件监听机制</p><p>​事件：一个事情</p><p>​事件源：事件发生的地方</p><p>​监听器：一个对象</p><p>​注册监听：将事件、事件源、监听器绑定在一起。当事件源发生在某个事件后，执行监听器代码</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>定义一个类，实现ServletContextListener接口</p></li><li><p>复写方法</p><p>void contextInitialized(ServletContextEvent sce)：监听对象创建前调用</p><p>void contextDestroyed(ServletContextEvent sce)：监听对象销毁前调用</p></li><li><p>配置：web.xml    或     注解@WebListener</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">lstener-class</span>&gt;</span>全限定类名<span class="hljs-tag">&lt;/<span class="hljs-name">lstener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>jsp是javaEE规范之一，jsp底层其实就是java程序，会服务器会将jsp文件翻译成java类，在将java类进行编译</p><p>jsp主要是做页面展示的，修改之后Tomcat会自动部署，根据jsp文件的最后修改时间判断是否重新部署</p><p><strong>JSP脚本</strong>：JSP定义java代码的方式</p><ol><li>&lt;% 代码 %&gt;：在service方法中可以定义的代码，在该脚本中都可以定义</li><li>&lt;%! 代码 %&gt;：在类成员位置可以定义的代码，在该脚本中都可以定义</li><li>&lt;%&#x3D; 代码 %&gt;：在输出语句中可以定义的数据，在该脚本中都可以定义，相当于out.print(“”);</li></ol><p><strong>注释</strong>：</p><!--  -->：HTML注释，JSP会翻译成字符串发送到浏览器，用户可以在浏览器中查看到<p>&lt;%–  –%&gt;：Tomcat服务器在编译时忽略JSP注释</p><p><strong>指令</strong>：指导JSP的翻译引擎如何翻译JSP代码</p><p>语法：&lt;%@ 指令名称 属性名&#x3D;属性值 属性名&#x3D;属性值….  %&gt;</p><p><strong>page</strong>：配置JSP页面</p><p>常用属性：</p><ol><li>contentType：设置JSP响应时的mime类型以及字符集          等同于respons.setContentType() </li><li>pageEncoding：设置JSP响应时的字符编码</li><li>session：true表示当前JSP可以直接使用内置对象session，程序执行获取当前session对象，没有获取到则新建session对象；false表示不能直接使用内置对象，要想使用要使用getSession()获取session对象</li><li>import：导包</li><li>errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</li><li>isErrorPage：标识当前页面是否为错误页面（是就可以使用内置对象exception）</li><li>isELIgnored：是否忽略EL表达式</li></ol><p><strong>include</strong>：页面包含的，导入页面的资源          编译期包含，翻译成一个java源文件，静态联编</p><ol><li>file：跳转的资源路径                    可以将网页头网页脚等固定不变的单独写到剪JSP文件中</li></ol><p><strong>taglib</strong>：导入资源，引入标记库</p><p><strong>动作</strong>：&lt;jsp:动作名 属性名&#x3D;属性值 属性名&#x3D;属性值&gt;&lt;&#x2F;jsp:动作名 &gt;</p><p><strong>forward</strong>：转发，跳转页面</p><p><strong>include</strong>：页面包含，生成了两个java源文件，动态联编</p><p><strong>内置对象</strong>：在jsp页面不用创建直接使用，只能在service方法中直接使用，在&lt;%%&gt;中直接使用</p><ol><li>pageContextPageContext                 当前页面共享数据，还可以获取其他八个内置对象</li><li>request                 HttpServletRequest             同一个请求中共享数据</li><li>session                 HttpSession                          同一个会话中共享数据</li><li>application           ServletContext                     所有用户间共享数据</li><li>response               HttpServletResponse         响应对象</li><li>page                      Object                                    当前Servlet对象，相当于this</li><li>out                         JSPWriter                               输出对象，数据输出到页面上</li><li>config                    ServletConfig                        Servlet的配置对象</li><li>exception              Throwable                            异常对象</li></ol><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><p>作用：替换和简化页面中的java的代码</p><p>语法：${表达式}</p><p>使用：</p><ol><li><p>运算符：将获取值进行运算</p><p>算术运算符，比较运算符，逻辑运算符，三目运算符，空运算符（empty用来判断字符串、集合、数组对象是否为null并且长度是否为0）</p></li><li><p>获取值：EL表达式只能从域对象中获取值</p><ol><li><p>${域名称.键名}：从指定域中获取指定键的值</p></li><li><p>${键名}：依次从小到大的域中查找是否含有该键对应的值</p></li><li><p>${域名称.键名.属性名}：获取对象的属性值，本质上会调用对象的getter方法，没有getter方法获取不到</p><p>${域名称.键名[索引]}：根据索引获取List集合中的值</p><p>${域名称.键名.key名称}或${域名称.键名[“key名称”]}：通过key获取Map集合中的value</p></li></ol></li></ol><p>隐式对象</p><table><thead><tr><th align="left"><strong>隐含对象</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">pageScope</td><td align="left">page 作用域</td></tr><tr><td align="left">requestScope</td><td align="left">request 作用域</td></tr><tr><td align="left">sessionScope</td><td align="left">session 作用域</td></tr><tr><td align="left">applicationScope</td><td align="left">application 作用域</td></tr><tr><td align="left">param</td><td align="left">Request 对象的参数，字符串</td></tr><tr><td align="left">paramValues</td><td align="left">Request对象的参数，字符串集合</td></tr><tr><td align="left">header</td><td align="left">HTTP 信息头，字符串</td></tr><tr><td align="left">headerValues</td><td align="left">HTTP 信息头，字符串集合</td></tr><tr><td align="left">initParam</td><td align="left">上下文初始化参数</td></tr><tr><td align="left">cookie</td><td align="left">Cookie值</td></tr><tr><td align="left">pageContext</td><td align="left">当前页面的pageContext</td></tr></tbody></table><p>${pageContext.request.contextPath}：通过pageContext获取当前页面的request内置对象，动态获取虚拟目录</p><h3 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h3><p>使用之前要导入JSTL相关jar包</p><p>引入标签库：taglib指令：&lt;%@ taglib perfix&#x3D;”c” uri&#x3D;”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;</p><p>&lt;c:**if** test&#x3D;”EL表达式条件”&gt;内容</p><p>&lt;c:if test&#x3D;”EL表达式条件”&gt;：相当于java代码的if语句</p><p>​test属性：接收boolean表达式，如果表达式为true，则显示标签内的内容</p><p>&lt;c:**choose** &gt;</p><p>&lt;c:when test&#x3D;”EL表达式条件”&gt;内容</p><p>&lt;c:otherwise &gt;内容</p><p></p><p>&lt;c:choose &gt;：相当于java代码的switch语句</p><p>&lt;c:when test&#x3D;”EL表达式条件”&gt;：相当于case语句</p><p>test属性：接收表达式</p><p>&lt;c:otherwise &gt;相当于default语句</p><p>for(int i &#x3D; 0; i &lt; 10; i++)对应JSTL标签</p><p>&lt;c:**foreach** var&#x3D;”i” begin&#x3D;”0” end&#x3D;”9” serp&#x3D;”1”&gt;</p><p>属性：</p><p>​var：声明循环变量i———-相当于i</p><p>​begin：初始化循环变量i———-相当于i&#x3D;0</p><p>​end：循环变量i的最大值———-相当于i&lt;10</p><p>​step：步长———-相当于i++</p><p>​varStatus：循环状态对象</p><p>​index：容器中元素的索引，从0开始</p><p>​count：循环次数，从1开始</p><p>for (User user : list)对应的jstl标签。    <strong>遍历的必须是集合类型的，否则遍历出错</strong></p><p>&lt;c:**foreach** items&#x3D;”EL表达式获取集合容器” var&#x3D;”自定义名称key”&gt;${key.属性名}</p><p>属性：</p><p>items：容器对象，相当于list</p><p>var：容器中元素的临时变量，相当于user</p><p>varStatus：循环状态对象</p><p>​index：容器中元素的索引，从0开始</p><p>​count：循环次数，从1开始</p><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>一个JavaScript框架，是js库，简化JS的开发</p><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><p>导入jQuery的min.js文件（min.js生产版本，js开发版本）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script typr=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;JQuery文件路径&quot;</span>&gt; &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>jQuery对象和JS对象的转换</p><p>​jQuery —&gt;JS：jQuery对象[索引]   或  jQuery对象.get(索引)</p><p>​JS—&gt;jQuery：$(JS对象)</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>就是一个字符串，用来定位dom对象，筛选具有相似特征的元素（标签）</p><h4 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h4><p>$(“html标签名”)：获得所有匹配标签名称的元素</p><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>$(“#id的属性值”)：获得与指定id属性值匹配的元素</p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>$(“.class的属性值”)：获得与指定class属性值匹配的元素</p><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>$(“选择器1, 选择器2, …..”)</p><h4 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h4><p>$(“:type属性值”)：获取该属性的所有值（input标签的type属性值：text，password，radio，checkbox）</p><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p>$(“父选择器 &gt; 子选择器”)</p><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>定位dom对象后，根据一些条件筛选dom对象，过滤器不能单独使用，必须和选择器一起使用</p><h4 id="“选择器-first”"><a href="#“选择器-first”" class="headerlink" title="$(“选择器:first”)"></a>$(“选择器:first”)</h4><p>选出第一个dom对象</p><h4 id="“选择器-last”"><a href="#“选择器-last”" class="headerlink" title="$(“选择器:last”)"></a>$(“选择器:last”)</h4><p>选出最后一个dom对象</p><h4 id="“选择器-eq-数组下标-”"><a href="#“选择器-eq-数组下标-”" class="headerlink" title="$(“选择器:eq(数组下标)”)"></a>$(“选择器:eq(数组下标)”)</h4><p>获取指定下标的dom对象</p><h4 id="“选择器-lt-下标-”"><a href="#“选择器-lt-下标-”" class="headerlink" title="$(“选择器:lt(下标)”)"></a>$(“选择器:lt(下标)”)</h4><p>获取小于下标的所有dom对象</p><h4 id="“选择器-gt-下标-”"><a href="#“选择器-gt-下标-”" class="headerlink" title="$(“选择器:gt(下标)”)"></a>$(“选择器:gt(下标)”)</h4><p>获取大于下标的所有dom对象</p><h4 id="“-text-enabled”"><a href="#“-text-enabled”" class="headerlink" title="$(“:text:enabled”)"></a>$(“:text:enabled”)</h4><p>获取表单中启用的文本框的dom对象</p><h4 id="“-text-disabled”"><a href="#“-text-disabled”" class="headerlink" title="$(“:text:disabled”)"></a>$(“:text:disabled”)</h4><p>获取表单中停用的文本框的dom对象</p><h4 id="“-checkbox-checked”"><a href="#“-checkbox-checked”" class="headerlink" title="$(“:checkbox:checked”)"></a>$(“:checkbox:checked”)</h4><p>获取表单中选中的复选框</p><h4 id="“选择器-gt-option-selected”"><a href="#“选择器-gt-option-selected”" class="headerlink" title="$(“选择器&gt;option:selected”)"></a>$(“选择器&gt;option:selected”)</h4><p>获取表单中选中的下拉列表框</p><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><h4 id="选择器-事件名称-事件的处理函数"><a href="#选择器-事件名称-事件的处理函数" class="headerlink" title="$(选择器).事件名称(事件的处理函数)"></a>$(选择器).事件名称(事件的处理函数)</h4><p>在进行时间绑定时必须保证页面已经下载完毕，所以需要$(function(){……..});在这里进行函数时间绑定  </p><p>$(选择器)：定位dom对象。dom对象可以有多个</p><p>事件名称：就是js中时间去掉on的部分（js中的单击事件onclick()，jQuery中的时间名称就是click()）</p><p>事件的处理函数：就是一个function(){函数体;}，当事件发生时执行该函数</p><h4 id="选择器-on-“事件名称”-事件的处理函数"><a href="#选择器-on-“事件名称”-事件的处理函数" class="headerlink" title="$(选择器).on(“事件名称”, 事件的处理函数)"></a>$(选择器).on(“事件名称”, 事件的处理函数)</h4><p>事件名称：就是js中时间去掉on的部分（js中的单击事件onclick()，jQuery中的时间名称就是click()）</p><p>事件的处理函数：就是一个function(){函数体;}，当事件发生时执行该函数</p><h4 id="选择器-off-“事件名称”"><a href="#选择器-off-“事件名称”" class="headerlink" title="$(选择器).off(“事件名称”)"></a>$(选择器).off(“事件名称”)</h4><p>解除事件的绑定</p><p>事件名称：就是js中时间去掉on的部分（js中的单击事件onclick()，jQuery中的时间名称就是click()）</p><h4 id="选择器-css-“属性”-“值”"><a href="#选择器-css-“属性”-“值”" class="headerlink" title="$(选择器).css(“属性”, “值”)"></a>$(选择器).css(“属性”, “值”)</h4><p>样式控制</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h4><p>操作数组中dom对象的value属性</p><p>$(选择器).val()：无参数调用形式，获取数组中第一个dom对象的value值</p><p>$(选择器).val(“参数”)：有参数形式调用，统一对数组中所有dom对象的value属性值进行赋值</p><h4 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h4><p>操作数组中所有dom对象的文字显示内容形式</p><p>$(选择器).text()：无参数调用形式，读取数组中所有dom对象的文字显示内容，并将所有内容拼接成一个字符串</p><p>$(选择器).text(参数)：有参数调用形式，对数组中的所有dom对象的文字显示内容进行统一赋值</p><h4 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h4><p>对val，text之外的其他属性进行操作</p><p>$(选择器).attr(“属性名”)：获取数组中第一个dom对象的属性值</p><p>$(选择器).attr(“属性名”,”属性值”)：对数组中所有dom对象的属性赋值</p><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>$(选择器).remove()：删除数组中所有dom对象及其子对象</p><h4 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h4><p>$(选择器).empty()：删除数组中所有dom对象的子对象，该dom对象并不删除</p><h4 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h4><p>为数组中所有dom对象添加子对象</p><p>$(选择器).append(“<div>div内容</div>“)：添加了子对象div</p><h4 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h4><p>设置或返回被选元素的内容   （html能识别html标签，text不能识别html标签）</p><p>$(选择器).html()：无参数形式调用，获取数组中第一个dom对象的内容</p><p>$(选择器).html(参数)：有参数形式调用，用于设置数组中所有dom对象的内容</p><h4 id="each"><a href="#each" class="headerlink" title="each()"></a>each()</h4><p>对数组，json和dom数组进行遍历，对每个元素调用一次函数</p><p>$.each(遍历的对象，function(index, element){程序;})：index是遍历的次数，element是遍历的元素内容</p><p>jQuery对象.each(function(index, element){程序;})：index是遍历的次数，element是遍历的元素内容</p><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>异步的javascript和XML</p><p>异步和同步：客户端和服务器端相互通信的基础上</p><p>异步：客户端不需要保持等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作</p><h3 id="JS实现方式"><a href="#JS实现方式" class="headerlink" title="JS实现方式"></a>JS实现方式</h3><p>步骤：</p><ol><li><p>创建AJAX异步对象XMLHttpRequest，XMLHttpRequest对象可以在浏览器当中单独开启一个线程，接收和响应数据都在异步对象XMLHttprequest中，使用异步对象的responseText属性以字符串的形式获取响应的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>)&#123;<br>xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//IE5和IE6使用AvtiveXObject</span><br>xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册回调函数，给异步对象绑定事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//程序指定到这里，程序不会执行，只是将回调函数注册给异步对象，等异步对象的readyState属性改变时，回调函数才会执行（readyState属性属性值改变就会调用一次回调函数）</span><br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyStart</span> == <span class="hljs-number">4</span>)&#123;<span class="hljs-comment">//服务器响应结束</span><br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>)&#123;<span class="hljs-comment">//200表示服务器正常响应结束</span><br>            <span class="hljs-comment">//在浏览器端接收服务器端响应的文本</span><br>            <span class="hljs-keyword">var</span> s = xhr.<span class="hljs-property">responseText</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">status</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>开启浏览器和服务器之间的通道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//method：指定请求方式为get还是put</span><br><span class="hljs-comment">//url：请求路径,get请求在url后加?提交</span><br><span class="hljs-comment">//asyn：true/false（true：支持异步，false：支持同步）</span><br>xhr.<span class="hljs-title function_">open</span>(method, url, asyn);<br></code></pre></td></tr></table></figure></li><li><p>发送AJAX请求js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//此时才会发送请求,get请求</span><br>xhr.<span class="hljs-title function_">send</span>();<br>   <br><span class="hljs-comment">//此时才会发送请求,post请求在这提交数据</span><br><span class="hljs-comment">//post请求时要写，模拟form表单提交数据</span><br>xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span>);<br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;数据&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="JQeury实现方式"><a href="#JQeury实现方式" class="headerlink" title="JQeury实现方式"></a>JQeury实现方式</h3><h4 id="ajax-名称-值-名称1-值1……-名称-值之间不能存在空格"><a href="#ajax-名称-值-名称1-值1……-名称-值之间不能存在空格" class="headerlink" title="$.ajax({名称:值, 名称1:值1…….})     名称:值之间不能存在空格"></a>$.ajax({名称:值, 名称1:值1…….})     名称:值之间不能存在空格</h4><p>url:”路径”：请求路径</p><p>type:get&#x2F;post：请求方式</p><p>async:true&#x2F;false：设置是否是异步请求</p><p>data:{“username”:”zhq”,  ….. }：请求参数（json或数组）</p><p>dataType:””：设置接收到的响应数据的格式，将接收的数据进行相应的格式转化（xml，HTML，text，json）</p><p>success:function(a){alert(a)}：响应成功后回调函数</p><p>error:function(a){alert(a)}：响应错误后回调函数</p><h4 id="get-“url”-data-function-“dataType”"><a href="#get-“url”-data-function-“dataType”" class="headerlink" title="$.get(“url”, data, function(){}, “dataType”)"></a>$.get(“url”, data, function(){}, “dataType”)</h4><p>url：请求路径</p><p>data:{“username”:”zhq”,  ….. }：请求参数（json或数组）</p><p> function(resp){}：回调函数</p><p>dataType:””：设置接收到的响应数据的格式，将接收的数据进行相应的格式转化（xml，HTML，text，json）</p><h4 id="post-“url”-data-function-“dataType”"><a href="#post-“url”-data-function-“dataType”" class="headerlink" title="$.post(“url”, data, function(){}, “dataType”)"></a>$.post(“url”, data, function(){}, “dataType”)</h4><p>url：请求路径</p><p>data：{“username”:”zhq”,  ….. }请求参数（json或数组）</p><p> function(resp){}：回调函数</p><p>dataType：设置接收到的响应数据的格式，将接收的数据进行相应的格式转化（xml，HTML，text，json）</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>JavaScript的标记对象，多用于存储和交换文本信息的语法。轻量级的交换数据格式</p><p>JSON在线工具验证</p><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><p>在javascript数据存储在 名称&#x2F;值 对中：json数据由键值对构成</p><p>键：可以用引号引起来，单双都可</p><p>值：</p><p>​数字（整数或浮点数）； </p><p>​字符串（在双引号中）；</p><p>​逻辑值（true或false）；</p><p>​数组（在方括号中）   {“name”:[{}, {}, {}]}；</p><p>​对象（在花括号中）   {“name”:{“name”:” “}}；</p><p>​null</p><p>数据由逗号分隔：多个键值对由对号分隔</p><p>花括号保存对象：使用{}定义json格式</p><p>方括号保存数组：[]</p><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>在javascript中使用**window.eval(JSON字符串)**解释执行java生成的JSON格式的字符串</p><ol><li><p>json对象.键名</p></li><li><p>json对象[“键名”]</p></li><li><p>数组对象[索引]：数组对象相当于键名</p></li><li><p>遍历p对象的键和值</p><p>for (var key in p){</p><p>​alert(key+”:”+p[key])</p><p>}</p></li></ol><h4 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h4><p>JSON格式的字符串和java对象的相互转换        JSON解析器：jackson（Spring框架内部解析器）</p><ol><li><p>JSON格式的字符串转为Java对象</p><ol><li>导入jackson的相关jar包</li><li>创建jackson核心对象ObjectMapper</li><li>调用ObjectMapper的**readValue(json字符串数据，Class类型)**进行转化</li></ol></li></ol><p>Java对象转为JSON格式的字符串</p><ol><li><p>导入jackson的相关jar包</p></li><li><p>创建jackson核心对象ObjectMapper</p></li><li><p>调用ObjectMapper的相关方法进行转换</p><ol><li><p>writeValue(参数，obj)：</p><p>​参数：</p><p>​File：将obj对象转化为json字符串，并保存到指定的文件中</p><p>​Writer：将obj对象转化为json字符串，并将json数据填充到字符输出流中</p><p>​OutputStream：将obj对象转化为json字符串，并将json数据填充到字节输出流中</p></li><li><p>writeValueAsString(obj)：将对象转化为json字符串       （List转成的是数组，Map转成的就是对象格式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>objectMapper.writeValueAsString(java对象);<br></code></pre></td></tr></table></figure></li><li><p>注解</p><ol><li>@JsonIgnore：排除属性，对应的对象属性不会转化为JSON字符串属性</li><li>@JsonFormat(pattern&#x3D;”格式”)：将对应的对象属性转化为JSON字符串时进行格式化</li></ol></li></ol></li></ol><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ol><li>xml文档后缀名为.xml</li><li>xml的第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号引起来</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ol><li><p>文档声明</p><ol><li><p>格式：<?xml 属性列表 ?></p></li><li><p>属性列表</p><p>​version：版本号</p><p>​encoding：编码方式，告知解析引擎当前文档使用的字符集，默认为ISO-8859-1</p><p>​standalone：是否独立（yes&#x2F;no）</p></li></ol></li><li><p>指令：结合CSS的</p></li><li><p>标签：标签名称自定义</p><p>​规则：</p><p>​名称可以包含字母数字和其他字符</p><p>​名称不能一数字或标点符号开头，不能以xml开头</p><p>​名称不能包含空格</p></li><li><p>属性：id属性值唯一</p></li><li><p>文本：CDATA区：在该区域内数据被原样展示（<!--[CDATA[数据]]-->）</p></li></ol><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>规定xml文档的抒写规则</p><ol><li><p>分类：</p><ol><li>DTD：简单的约束技术<ol><li>内部dtd：将约束规则定义在xml文档中</li><li>外部dtd：将约束的规则定义在外部dtd文件中<ol><li>本地：<!DOCTYPE 根标签 SYSTEM "dtd文件的位置"></li><li>网络：<!DOCTYPE 根标签 PUBLIC "dtd文件名" "dtd文件的位置URL"></li></ol></li></ol></li><li>Schema：复杂的约束技术<ol><li>填写xml文档的根标签</li><li>引入xsi前缀 xmlns:xsi&#x3D;”网络地址”;</li><li>引入学生的文件的命名空间 xsi:schemaLocation&#x3D;”网络地址  .xsd文件”</li><li>为学生的约束声明一个前缀，作为标识符  xmlns:标识 &#x3D; “网络地址”</li></ol></li></ol></li></ol><h3 id="Jsoup解析器"><a href="#Jsoup解析器" class="headerlink" title="Jsoup解析器"></a>Jsoup解析器</h3><p>（dom方式   不用sax方式）</p><h4 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h4><ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应标签的Element对象 </li><li>获取数据</li></ol><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h5 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h5><p>工具类，解析HTML或xml文档返回Document</p><h5 id="parse"><a href="#parse" class="headerlink" title="parse()"></a>parse()</h5><p>解析HTML或xml文档，返回Document</p><p>​parse(String html)：解析xml或HTML字符串</p><p>​parse(File in, String charsetName)：解析xml或HTML文件</p><p>​parse(URL url, int timeoutMillis)：通过网络获取指定的xml或HTML文件</p><h5 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h5><p>文档对象，代表内存中的dom树，获取Element对象</p><p>getElementById(String id)：根据id属性获取唯一的element对象</p><p>getElementByTag(String tagName)：根据标签名获取元素的对象集合</p><p>getElementByAttribute(String key)：根据属性名获取元素的对象集合</p><p>getElementByAttributevalue(String key, String value)：根据属性名和属性值获取元素的对象集合</p><p>Elements：元素Element对象的集合，可以当做ArrayList来使用</p><h5 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h5><p>元素对象</p><ol><li><p>获取子元素对象</p><p>getElementById(String id)：根据id属性获取唯一的element对象</p><p>getElementByTag(String tagName)：根据标签名获取元素的对象集合</p><p>getElementByAttribute(String key)：根据属性名获取元素的对象集合</p><p>getElementByAttributevalue(String key, String value)：根据属性名和属性值获取元素的对象集合</p></li><li><p>获取属性值</p><p>String attr(String key)：根据属性名获取属性值</p></li><li><p>获取文本内容</p><p>String text()：获取文本内容</p><p>String hrml()：获取标签体的所有内容</p></li></ol><h5 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h5><p>结点对象是Document和Element的父类</p><h3 id="快捷查询"><a href="#快捷查询" class="headerlink" title="快捷查询"></a>快捷查询</h3><ol><li><p>selector：选择器</p><p>Elements select(String cssQuery)</p></li><li><p>XPath：XPath即为xml路径语言，用来确定xml文档中的某部分的位置</p></li></ol><h2 id="javaweb零碎知识总结"><a href="#javaweb零碎知识总结" class="headerlink" title="javaweb零碎知识总结"></a>javaweb零碎知识总结</h2><h3 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h3><p><strong>步骤：</strong></p><ol><li><p>定义一个测试类（一般定义测试类名：被测试的类名+Test， 包名：xxx.xxx.test）</p></li><li><p>定义测试方法：</p><p>​该方法可以独立运行（方法名：test+测试的方法名， 返回值：void， 参数列表：空参，权限为public）</p></li><li><p>给方法加@Test注解，加Test注解才能独立运行</p><p>@Before注解：修饰的方法会在测试之前自动执行</p><p>@After注解：修饰方法会在测试方法执行后自动执行</p></li><li><p>导入Junit依赖环境，导入junit的jar包</p></li></ol><p><strong>结果</strong>：</p><p>红色表示失败， 绿色表示成功</p><p>用断言来处理结果而不是看输出的结果是否正确：Assert.assertEquals(期望的结果， 运算的结果)</p><h3 id="BeanUtils工具类"><a href="#BeanUtils工具类" class="headerlink" title="BeanUtils工具类"></a>BeanUtils工具类</h3><p>简化数据封装，用于封装javaBean的</p><p>BeanUtils的方法：</p><p>​setProperty()：设置bean的属性值      </p><p>​getProperty()：获取bean的属性值        </p><p>​populate(Object obj, Map map)：将map集合的键值对信息封装到JavaBean对象中</p><p>javaBean是标准java类满足以下条件</p><ol><li>类必须被public修饰</li><li>必须提供空参public修饰的构造函数</li><li>成员变量必须使用private修饰</li><li>提供公共public修饰的setter和getter方法</li></ol><p><strong>属性</strong>就是ssetter和getter方法截取后的产物，例如getUsername() —-username就是属性</p><p>注意：通过Beanutils自动将提交的数据封装到对象中时，需要用到的jar包：commons-beanutils-1.8.3.jar该包需要，两个jar包的支持：commons-collections-3.2.1.jar，commons-logging-1.1.1.jar这三个包需要一起倒入，否则报错！！！</p><h3 id="MVC开发模式"><a href="#MVC开发模式" class="headerlink" title="MVC开发模式"></a>MVC开发模式</h3><p>M：Model，模型，JavaBean              完成集体业务操作</p><p>V：View，视图，JSP                             展示数据</p><p>C：Controller，控制器，Servlet         获取用户的输入，调用模型，将数据交给视图进行展示</p><h3 id="三层架构：软件设计架构"><a href="#三层架构：软件设计架构" class="headerlink" title="三层架构：软件设计架构"></a>三层架构：软件设计架构</h3><ol><li>界面层（表示层）：用户通过界面上的组件和服务器进行交互</li><li>业务逻辑层：处理业务逻辑</li><li>数据访问层：操作数据存储文件</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2021/11/16/Redis/"/>
    <url>/2021/11/16/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p><em><strong>Redis</strong></em> 是典型的 <em><strong>NoSQL</strong></em> 数据库。</p><p><em><strong>redis官网</strong></em>：<a href="https://redis.io/download">https://redis.io/download</a></p><blockquote><p>Redis 是一个开源的 key-value 存储系统。</p><p>和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string、list、set、zset、sorted set、hash。</p><p>这些数据类型都支持 push&#x2F;pop、add&#x2F;remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</p><p>在此基础上，Redis 支持各种不同方式的排序。</p><p>与 memcached一样，为了保证效率，数据都是缓存在内存中。</p><p>区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</p><p>并且在此基础上实现了master-slave （主从）同步。</p><p>单线程 + IO 多路复用。</p></blockquote><h2 id="安装和启动"><a href="#安装和启动" class="headerlink" title="安装和启动"></a>安装和启动</h2><p><strong>运行在linux系统上，默认端口号：6379</strong></p><p>安装 C 语言的编译环境和redis，解压redis并在给目录下执行 make</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>默认安装在 <code>/usr/local/bin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-benchmark：性能测试工具，可以在自己本子运行，看看自己本子性能如何<br>redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲<br>redis-check-dump：修复有问题的dump.rdb文件<br>redis-sentinel：Redis集群使用<br>redis-server：Redis服务器启动命令<br>redis-cli：客户端，操作入口<br></code></pre></td></tr></table></figure><p>前台启动：***&#x2F;usr&#x2F;local&#x2F;bin*** 目录下启动 <em><strong>redis</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server(前台启动)<br></code></pre></td></tr></table></figure><p>后台启动：</p><ul><li><p>安装 <em><strong>redis</strong></em> 的目录 <em><strong>&#x2F;opt&#x2F;redis-6.2.6</strong></em> 中将 <em><strong>redis.conf</strong></em> 复制到任意一个文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> redis.conf /etc/redis.conf<br></code></pre></td></tr></table></figure></li><li><p>修改 <em><strong>&#x2F;etc&#x2F;redis.conf</strong></em> 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim redis.conf<span class="hljs-comment"># daemonize no 修改为 daemonize yes</span><br></code></pre></td></tr></table></figure></li><li><p><em><strong>&#x2F;usr&#x2F;local&#x2F;bin</strong></em> 目录下启动 <em><strong>redis</strong></em>，并进入客户端操作redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server /etc/redis.conf<br>redis-cli -a 4213<br></code></pre></td></tr></table></figure></li></ul><p>关闭 ：</p><ul><li><em><strong>kill</strong></em> 进程</li><li>在redis-cli客户端使用命令 <em><strong>shutdown</strong></em></li></ul><h2 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h2><ul><li>解决 <em><strong>CPU</strong></em> 及内存压力</li><li>解决 <em><strong>IO</strong></em> 压力</li></ul><p>NoSQL，意即不仅仅是 SQL，泛指非关系型的数据库</p><p>NoSQL 不依赖业务逻辑方式存储，而以简单的 <em><strong>key-value</strong></em> 模式存储，因此大大的增加了数据库的扩展能力</p><ul><li>不遵循 <em><strong>SQL</strong></em> 标准</li><li>不支持 <em><strong>ACID</strong></em></li><li>远超于 <em><strong>SQL</strong></em> 的性能</li></ul><p><strong>适用于的场景</strong></p><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性的</li></ul><p><strong>不适用的场景</strong></p><ul><li>需要事务支持</li><li>基于 <em><strong>sql</strong></em> 的结构化查询存储，处理复杂的关系，需要级联查询</li></ul><p><strong>大数据时代常用的数据库类型</strong></p><ul><li><p>行式数据库：将数据表中一行数据放在一个块中</p></li><li><p>列式数据库：将数据表中一列（相同属性）数据放在一个块中</p></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><strong>redis.conf</strong></p><h3 id="Units"><a href="#Units" class="headerlink" title="Units"></a>Units</h3><p>单位，开头定义了一些基本的度量单位，只支持 bytes，不支持 bit</p><p>大小写不敏感</p><h3 id="INCLUDES"><a href="#INCLUDES" class="headerlink" title="INCLUDES"></a>INCLUDES</h3><p>包含，多实例的情况可以把公用的配置文件提取出来</p><h3 id="NETWORK"><a href="#NETWORK" class="headerlink" title="NETWORK"></a>NETWORK</h3><p>网络相关配置</p><p><em><strong>bind</strong></em>：默认情况 <code>bind=127.0.0.1</code> 只能接受本机的访问请求，注释的情况下，无限制接受任何 ip 地址的访问</p><p><strong>protected-mode</strong>：将本机访问保护模式设置 no</p><p>开启protected-mode，在没有设定 bind ip 且没有设密码的情况下Redis 只允许接受本机的响应</p><p><em><strong>port</strong></em>：端口号，默认 6379</p><p><strong>tcp-backlog</strong>：设置 tcp 的 backlog，backlog 其实是一个连接队列，backlog 队列总和 $&#x3D;$ 未完成三次握手队列 $+$ 已经完成三次握手队列</p><p><strong>timeout</strong>：一个空闲的客户端维持多少秒会关闭，0 表示关闭该功能。即永不关闭</p><p><strong>tcp-keepalive</strong>：对访问客户端的一种心跳检测，每 n 秒检测一次；单位为秒，如果设置为 0，则不会进行 Keepalive检测，建议设置成 60</p><h3 id="GENERAL"><a href="#GENERAL" class="headerlink" title="GENERAL"></a>GENERAL</h3><p>通用</p><p><strong>daemonize</strong>：是否为后台进程，设置为 yes（守护进程，后台启动）</p><p><strong>pidfile</strong>：存放 pid 文件的位置，每个实例会产生一个不同的pid 文件</p><p><strong>loglevel</strong>：指定日志记录级别，Redis 支持四个级别：debug、verbose、notice、warning，默认为 notice</p><p><strong>logfile</strong>：日志文件名称</p><p><strong>database</strong>：设定库的数量 默认16，默认数据库为 0，可以使用 <code>SELECT &lt;dbid&gt;</code> 命令在连接上指定数据库 id</p><h3 id="SECURITY"><a href="#SECURITY" class="headerlink" title="SECURITY"></a><strong>SECURITY</strong></h3><p>安全</p><p>访问密码的查看、设置和取消</p><p>在命令中设置密码，只是临时的，重启 redis 服务器，密码就还原了，永久设置，需要在配置文件中进行设置</p><h3 id="LIMITS"><a href="#LIMITS" class="headerlink" title="LIMITS"></a><strong>LIMITS</strong></h3><p>限制</p><p><em><strong>maxclients</strong></em>：设置 redis 同时可以与多少个客户端进行连接，默认情况下为 10000 个客户端，达到了此限制，redis 则会拒绝新的连接请求，并且向这些连接请求方发出 max number of clients reached 以作回应</p><p><em><strong>maxmemory</strong></em>：建议必须设置，否则，将内存占满，造成服务器宕机</p><p>设置 redis 可以使用的内存量，一旦到达内存使用上限，redis 将会试图移除内部数据，移除规则可以通过 maxmemory-policy 来指定</p><p>如果 redis 无法根据移除规则来移除内存中的数据，或者设置了不允许移除，那么 redis 则会针对那些需要申请内存的指令返回错误信息，比如 SET、LPUSH 等</p><p>但是对于无内存申请的指令，仍然会正常响应，比如 GET 等。如果你的 redis 是主 redis（ 说明你的 redis 有从 redis ），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素</p><p><em><strong>maxmemory-policy</strong></em></p><p><em><strong>volatile-lru</strong></em>：使用 LRU 算法移除 key，只对设置了过期时间的键（最近最少使用）</p><p><em><strong>allkeys-lru</strong></em>：在所有集合 key 中，使用 LRU 算法移除 key</p><p><em><strong>volatile-random</strong></em>：在过期集合中移除随机的 key，只对设置了过期时间的键</p><p><em><strong>allkeys-random</strong></em>：在所有集合 key 中，移除随机的 key</p><p><em><strong>volatile-ttl</strong></em>：移除那些 TTL 值最小的 key，即那些最近要过期的 key</p><p><em><strong>noeviction</strong></em>：不进行移除。针对写操作，只是返回错误信息</p><p><em><strong>maxmemory-samples</strong></em>：设置样本数量，<em><strong>LRU</strong></em> 算法和最小 <em><strong>TTL</strong></em> 算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，<em><strong>redis</strong></em> 默认会检查这么多个 <em><strong>key</strong></em> 并选择其中 <em><strong>LRU</strong></em> 的那个</p><p>一般设置 3 到 7 的数字，数值越小样本越不准确，但性能消耗越小</p><h2 id="常用五大基本数据类型"><a href="#常用五大基本数据类型" class="headerlink" title="常用五大基本数据类型"></a>常用五大基本数据类型</h2><h3 id="key操作"><a href="#key操作" class="headerlink" title="key操作"></a>key操作</h3><p><code>keys *</code>：查看当前库所有 <em><strong>key</strong></em></p><p><code>exists key</code>：判断某个 <em><strong>key</strong></em> 是否存在</p><p><code>type key</code>：查看你的 <em><strong>key</strong></em> 是什么类型</p><p><code>del key</code> ：删除指定的 <em><strong>key</strong></em> 数据</p><p><code>unlink key</code>：根据 <em><strong>value</strong></em> 选择非阻塞删除，仅将 <em><strong>keys</strong></em> 从 <em><strong>keyspace</strong></em> 元数据中删除，真正的删除在后续异步操作</p><p><code>expire key n</code> ：为给定的 <em><strong>key</strong></em> 设置过期时间</p><p><code>ttl key</code>：查看还有多少秒过期，-1表示永不过期，-2表示已过期</p><p><code>select</code>：切换数据库（数据库有0~15，0是默认的数据库）</p><p><code>dbsize</code>：查看当前数据库中 <em><strong>key</strong></em> 的数量</p><p><code>flushdb</code>：清空当前库</p><p><code>flushall</code>：清空全部库</p><h3 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h3><p><em><strong>String</strong></em> 类型是二进制安全的，可以包含任何数据，比如 <em><strong>jpg</strong></em> 图片或者序列化的对象</p><p><em><strong>String</strong></em> 类型是 <em><strong>Redis</strong></em> 最基本的数据类型，一个 <em><strong>Redis</strong></em> 中字符串 <em><strong>value</strong></em> 最多可以是 512M</p><p>常用命令：</p><p><code>set &lt;key&gt;&lt;value&gt;</code>：添加键值对（若key已经存在则修改value的值）</p><p><code>get &lt;key&gt;</code>：查询对应键的值</p><p><code>append &lt;key&gt;&lt;value&gt;</code>：将给定的 value 追加到原值的末尾</p><p><code>strlen &lt;key&gt;</code>：获得值的长度</p><p><code>setnx &lt;key&gt;&lt;value&gt;</code>：只有在 <em><strong>key</strong></em> 不存在时，设置 <em><strong>key</strong></em> 的值</p><p><code>incr &lt;key&gt;</code>：将 <em><strong>key</strong></em> 中储存的数字值增 1，只能对数字值操作，如果为空，新增值为 1（<strong>具有原子性</strong>）</p><p><code>decr &lt;key&gt;</code>：将 <em><strong>key</strong></em> 中储存的数字值减 1，只能对数字值操作，如果为空，新增值为 -1</p><p><code>incrby/decrby &lt;key&gt;&lt;步长&gt;</code>：将 <em><strong>key</strong></em> 中储存的数字值增减，自定义步长</p><p><code>mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;...</code> ：同时设置一个或多个 <em><strong>key-value</strong></em> 对</p><p><code>mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt;...</code>：同时获取一个或多个 <em><strong>value</strong></em></p><p><code>msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; </code>：同时设置一个或多个 <em><strong>key-value</strong></em> 对（所有给定 <em><strong>key</strong></em> 都不存在）</p><p><code>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</code>：获得值中此范围的数据，从0开始</p><p><code>setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</code>：在起始位置后插入value的值</p><p><code>setex &lt;key&gt;&lt;过期时间&gt;&lt;value&gt;</code>：设置键值的同时，设置过期时间，单位秒</p><p><code>getset &lt;key&gt;&lt;value&gt;</code>：以新换旧，设置了新值同时获得旧值。</p><p><strong>原子性</strong></p><p>所谓 <strong>原子</strong> 操作是指不会被线程调度机制打断的操作，操作一旦开始，就一直运行到结束，中间不会有任何 <em><strong>context switch</strong></em> （切换到另一个线程）</p><ul><li>在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间</li><li>在多线程中，不能被其它进程（线程）打断的操作就叫原子操作</li></ul><p><em><strong>Redis</strong></em> 单命令的原子性主要得益于 <em><strong>Redis</strong></em> 的单线程</p><p><strong>数据结构</strong></p><p>String内部结构实现上类似于 <em><strong>Java</strong></em> 的 <em><strong>ArrayList</strong></em>，采用预分配冗余空间的方式来减少内存的频繁分配</p><h3 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h3><p><em><strong>Redis</strong></em> 列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>底层实际是个双向链表，对两端的操作性能很高，通过索引下标操作中间的节点性能会较差</p><p>常用命令：</p><p><code>lpush/rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt; ...</code>： 从左边&#x2F;右边插入一个或多个值</p><p><code>lpop/rpop &lt;key&gt;</code>：从左边&#x2F;右边吐出一个值。值在键在，值光键亡</p><p><code>rpoplpush &lt;key1&gt;&lt;key2&gt;</code>：从 <em><strong>key1</strong></em> 列表右边吐出一个值，插到 <em><strong>key2</strong></em> 列表左边</p><p><code>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</code>：按照索引下标获得元素（从左到右），0左边第一个，-1右边第一个，（0 -1表示获取所有）</p><p><code>lindex &lt;key&gt;&lt;index&gt;</code>：按照索引下标获得元素（从左到右）</p><p><code>llen &lt;key&gt;</code>：获得列表长度</p><p><code>linsert &lt;key&gt; before/after &lt;value&gt;&lt;newvalue&gt;</code>：在 <em><strong>value</strong></em> 的前面&#x2F;后面插入 <em><strong>newvalue</strong></em> 插入值</p><p><code>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</code>：从左边删除 <em><strong>n</strong></em> 个 <em><strong>value</strong></em>值（从左到右）</p><p><code>lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</code>：将列表 <em><strong>key</strong></em> 下标为 <em><strong>index</strong></em> 的值替换成 <em><strong>value</strong></em></p><p><strong>数据结构</strong></p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 <em><strong>ziplist</strong></em>，也即是压缩列表</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存，当数据量比较多的时候才会改成 <em><strong>quicklist</strong></em></p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间，<em><strong>Redis</strong></em> 将链表和 <em><strong>ziplist</strong></em> 结合起来组成了 <em><strong>quicklist</strong></em>。也就是将多个 <em><strong>ziplist</strong></em> 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p><em><strong>Set</strong></em> 对外提供的功能与 <em><strong>List</strong></em> 类似列表的功能，特殊之处在于 <em><strong>Set</strong></em> 是可以 <strong>自动排重</strong> 的，并且 <em><strong>Set</strong></em> 提供了判断某个成员是否在一个 <em><strong>Set</strong></em> 集合内的重要接口</p><p><em><strong>Redis</strong></em> 的 <em><strong>Set</strong></em> 是 <em><strong>String</strong></em> 类型的无序集合，底层其实是一个 <em><strong>value</strong></em> 为 <em><strong>null</strong></em> 的 <em><strong>hash</strong></em> 表，所以添加，删除，查找的复杂度都是 <em><strong>O(1)</strong></em></p><p>常用命令：</p><p><code>sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ... </code>：将一个或多个 <em><strong>member</strong></em> 元素加入到集合 <em><strong>key</strong></em> 中，已经存在的 <em><strong>member</strong></em> 元素将被忽略</p><p><code>smembers &lt;key&gt;</code>：取出该集合的所有值</p><p><code>sismember &lt;key&gt;&lt;value&gt;</code>：判断集合 <em><strong>key</strong></em> 是否为含有该 <em><strong>value</strong></em> 值，有返回 1，没有返回 0</p><p><code>scard &lt;key&gt;</code>：返回该集合的元素个数</p><p><code>srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ...</code>：删除集合中的某个元素</p><p><code>spop &lt;key&gt;</code>：随机从该集合中吐出一个值，值光键亡</p><p><code>srandmember &lt;key&gt;&lt;n&gt;</code>：随机从该集合中取出 <em><strong>n</strong></em> 个值，不会从集合中删除</p><p><code>smove &lt;key&gt;&lt;newkey&gt;&lt;value&gt;</code>：把集合中一个值从一个集合(key)移动到另一个集合(newkey)</p><p><code>sinter &lt;key1&gt;&lt;key2&gt;</code>：返回两个集合的交集元素</p><p><code>sunion &lt;key1&gt;&lt;key2&gt;</code>：返回两个集合的并集元素</p><p><code>sdiff &lt;key1&gt;&lt;key2&gt;</code>：返回两个集合的差集元素（<em><strong>key1</strong></em> 中的，不包含 <em><strong>key2</strong></em> 中的）</p><p><strong>数据结构</strong></p><p><em><strong>Set</strong></em> 数据结构是字典，字典是用哈希表实现的</p><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p><em><strong>Redis hash</strong></em> 是一个键值对集合</p><p><em><strong>Redis hash</strong></em> 是一个 <em><strong>String</strong></em> 类型的 <em><strong>field</strong></em> 和 <em><strong>value</strong></em> 的映射表，<em><strong>hash</strong></em> 特别适合用于存储对象</p><p>常用命令：</p><p><code>hset &lt;key&gt;&lt;field&gt;&lt;value&gt;</code>：给 <em><strong>key</strong></em> 集合中的 <em><strong>field</strong></em> 键赋值 <em><strong>value</strong></em></p><p><code>hget &lt;key1&gt;&lt;field&gt;</code>：从 <em><strong>key1</strong></em> 集合 <em><strong>field</strong></em> 取出 <em><strong>value</strong></em></p><p><code>hmset &lt;key1&gt;&lt;field1&gt;&lt;value1&gt;&lt;field2&gt;&lt;value2&gt;...</code>： 批量设置 <em><strong>hash</strong></em> 的值</p><p><code>hexists &lt;key1&gt;&lt;field&gt;</code>：查看哈希表 <em><strong>key</strong></em> 中，给定域 <em><strong>field</strong></em> 是否存在</p><p><code>hkeys &lt;key&gt;</code>：列出该 <em><strong>hash</strong></em> 集合的所有 <em><strong>field</strong></em></p><p><code>hvals &lt;key&gt;</code>：列出该 <em><strong>hash</strong></em> 集合的所有 <em><strong>value</strong></em></p><p><code>hincrby &lt;key&gt;&lt;field&gt;&lt;increment&gt;</code>：为哈希表 <em><strong>key</strong></em> 中的域 <em><strong>field</strong></em> 的值加上增量 1   -1</p><p><code>hsetnx &lt;key&gt;&lt;field&gt;&lt;value&gt;</code>：将哈希表 <em><strong>key</strong></em> 中的域 <em><strong>field</strong></em> 的值设置为 <em><strong>value</strong></em>（当域 <em><strong>field</strong></em> 不存在）</p><p><strong>数据结构</strong></p><p><em><strong>Hash</strong></em> 类型对应的数据结构是两种：<em><strong>ziplist</strong></em>（压缩列表），<em><strong>hashtable</strong></em>（哈希表）</p><p>当 <em><strong>field-value</strong></em> 长度较短且个数较少时，使用 <em><strong>ziplist</strong></em>，否则使用 <em><strong>hashtable</strong></em></p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><p>有序集合的每个成员都关联了一个评分（<em><strong>score</strong></em>），这个评分（<em><strong>score</strong></em>）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复的</p><p>因为元素是有序的，所以可以很快的根据评分（<em><strong>score</strong></em>）或者次序（<em><strong>position</strong></em>）来获取一个范围的元素</p><p>常用命令：</p><p><code>zadd &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;...</code>：将一个或多个 <em><strong>member</strong></em> 元素及其 <em><strong>score</strong></em> 值加入到有序集 <em><strong>key</strong></em> 当中</p><p><code>zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; [WITHSCORES] </code>：返回有序集 <em><strong>key</strong></em> 中，下标在 <em><strong>start和stop</strong></em> 之间的元素</p><p>当带 <em><strong>WITHSCORES</strong></em>，可以让分数一起和值返回到结果集</p><p><code>zrangebyscore &lt;key&gt; min max [withscores] [limit offset count]</code>：返回有序集 <em><strong>key</strong></em> 中，所有 <em><strong>score</strong></em> 值介于 <em><strong>min</strong></em> 和 <em><strong>max</strong></em> 之间（包括等于 <em><strong>min</strong></em> 或 <em><strong>max</strong></em> ）的成员，有序集成员按 <em><strong>score</strong></em> 值递增（从小到大）排列</p><p><code>zrevrangebyscore &lt;key&gt; max min [withscores] [limit offset count] </code>：同上，改为从大到小排列</p><p><code>zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;</code>：为元素的 <em><strong>score</strong></em> 加上增量</p><p><code>zrem &lt;key&gt;&lt;value&gt;</code>：删除该集合下，指定值的元素</p><p><code>zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;</code>：统计该集合，分数区间内的元素个数</p><p><code>zrank &lt;key&gt;&lt;value&gt;</code>：返回该值在集合中的排名，从 0 开始</p><p><strong>数据结构</strong></p><p><em><strong>SortedSet（zset）</strong></em>是 <em><strong>Redis</strong></em> 等价于 <em><strong>Java</strong></em> 的数据结构 ***Map&lt;String, Double&gt;***，可以给每一个元素 <em><strong>value</strong></em> 赋予一个权重 <em><strong>score</strong></em>，并且它又类似于 <em><strong>TreeSet</strong></em>，内部的元素会按照权重 <em><strong>score</strong></em> 进行排序，可以得到每个元素的名次，还可以通过 <em><strong>score</strong></em> 的范围来获取元素的列表</p><p><em><strong>zset</strong></em> 底层使用了两个数据结构</p><ul><li><em><strong>hash</strong></em>，<em><strong>hash</strong></em> 的作用就是关联元素 <em><strong>value</strong></em> 和权重 <em><strong>score</strong></em>，保障元素 <em><strong>value</strong></em> 的唯一性，可以通过元素 <em><strong>value</strong></em> 找到相应的 <em><strong>score</strong></em> 值</li><li>跳跃表，跳跃表的目的在于给元素 <em><strong>value</strong></em> 排序，根据 <em><strong>score</strong></em> 的范围获取元素列表</li></ul><h2 id="Redis6新数据结构"><a href="#Redis6新数据结构" class="headerlink" title="Redis6新数据结构"></a>Redis6新数据结构</h2><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>实际是字符串类型（key-value），但是可以对字符串的位进行操作，可以将value看做数组（将字符串使用二进制0和1表示，数组的每一个元素称为偏移量）</p><p>常用命令：</p><p><code>setbit &lt;key&gt;&lt;offset&gt;&lt;value&gt;</code>：设置Bitmaps中某个偏移量的值（0或1）</p><p><code>get &lt;key&gt;&lt;offset&gt;</code>：获取Bitmaps中某个偏移量的值</p><p><code>bitcount &lt;key&gt; [start end]</code>：统计字符串从start到end字节比特值是1的数量</p><p><code>bitop and(or/not/xor) &lt;destkey&gt; &lt;key&gt;&lt;key1&gt;...</code>：多个Bitmaps的交集，并集，非，异或操作，并将结果保存在destkey中</p><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p>用来做基数统计的（基数：集合中去除重复元素之后所得的集合中元素的个数）</p><p>常用命令：</p><p><code>pfadd &lt;key&gt;&lt;element&gt;&lt;element1&gt;...</code>：添加指定元素到HyperLogLog中</p><p><code>pfcount &lt;key&gt;&lt;key1&gt;...</code>：统计HLL的近似基数</p><p><code>pfmerge &lt;destkey&gt;&lt;sourvekey&gt;&lt;sourvekey1&gt;...</code>：将一个或多个HLL合并之后的结果存储在另一个HLL中</p><h3 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h3><p>元素的2维坐标，在地图上就是经度和纬度</p><p>常见命令：</p><p><code>geoadd &lt;key&gt;&lt;longitude&gt;&lt;latitude&gt;&lt;member&gt;&lt;longitude1&gt;&lt;latitude1&gt;&lt;member1&gt;...</code>：添加地理位置（经度-180<del>180，纬度-85.05</del>85.05，名称）</p><p><code>geopos &lt;key&gt;&lt;member&gt;&lt;member1&gt;...</code>：获得指定地区的坐标信息</p><p><code>geodist &lt;key&gt;&lt;member1&gt;&lt;member2&gt; [m|km|mi|ft]</code>：获取两个位置之间的直线距离（米（默认），千米，英里，英尺）</p><p><code>georadius &lt;key&gt;&lt;longitude&gt;&lt;latitude&gt;&lt;radius&gt; [m|km|mi|ft]</code>：以给定的经纬度为中心，找出某一半径内的元素</p><h2 id="Redis的发布与订阅"><a href="#Redis的发布与订阅" class="headerlink" title="Redis的发布与订阅"></a>Redis的发布与订阅</h2><p>Redis 发布订阅（ <em><strong>pub&#x2F;sub</strong></em> ）是一种消息通信模式：发送者（ <em><strong>pub</strong></em> ）发送消息，订阅者（ <em><strong>sub</strong></em> ）接收消息</p><p>Redis 客户端可以订阅任意数量的频道</p><p>客户端可以订阅频道</p><img src="/2021/11/16/Redis/image-20220402231459951.png" alt="image-20220402231459951" style="zoom:80%;"><p>当给这个频道发布消息后，消息就会发送给订阅的客户端</p><img src="/2021/11/16/Redis/image-20220402231509749.png" alt="image-20220402231509749" style="zoom:80%;"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">subscribe channel  <span class="hljs-comment">#订阅channel频道</span><br>publish channel hello  <span class="hljs-comment">#频道发送hello信息</span><br></code></pre></td></tr></table></figure><h2 id="事务和锁机制"><a href="#事务和锁机制" class="headerlink" title="事务和锁机制"></a>事务和锁机制</h2><p>Redis 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行，事务在执行的过程中，不会被其他客户端发送来的命令请求所打断</p><p>Redis 事务的主要作用就是<strong>串联多个命令</strong>防止别的命令插队</p><p><img src="/2021/11/16/Redis/image-20220402231519830.png" alt="image-20220402231519830" style="zoom:80%;"><img src="/2021/11/16/Redis/11/16/Redis/image-20220402231537723.png" class title="image-20220402231537723"></p><p>从输入 <em><strong>Multi</strong></em> 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入 <em><strong>Exec</strong></em> 后，<em><strong>Redis</strong></em> 会将之前的命令队列中的命令依次执行（组队的过程中可以通过 <em><strong>Discard</strong></em> 来放弃组队）</p><p>当组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消；执行时某个命令出现了错误报告，只是出错的命令不被执行，其他命令正常执行</p><ul><li><p>组队成功，提交成功</p><img src="/2021/11/16/Redis/image-20220402231541245.png" alt="image-20220402231541245" style="zoom:80%;"></li><li><p>放弃组队</p><img src="/2021/11/16/Redis/image-20220402231550506.png" alt="image-20220402231550506" style="zoom:80%;"></li></ul><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁（<em><strong>Pessimistic Lock</strong></em>），即每次去拿数据的时候都认为有其他线程会修改，所以每次在拿数据的时候都会上锁，这样其他线程想要拿到这个数据就会被 <em><strong>block</strong></em> 直到成功拿到锁（效率低）</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁（<em><strong>Optimistic Lock</strong></em>），即每次去拿数据的时候都认为其他线程不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间有没有其他线程去更新这个数据，可以使用版本号等机制（更新数据时版本号同样更新）</p><p><strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong></p><p>Redis就是利用 <em><strong>check-and-set</strong></em> （判断版本号是否相同）机制实现事务的</p><h4 id="Watch命令、unwatch命令"><a href="#Watch命令、unwatch命令" class="headerlink" title="Watch命令、unwatch命令"></a>Watch命令、unwatch命令</h4><p><strong>可以解决超卖的问题，但会造成库存遗留问题</strong></p><p><code>unwatch</code>：取消 <em><strong>WATCH</strong></em> 命令对所有 <em><strong>key</strong></em> 的监视，如果在执行 <em><strong>WATCH</strong></em> 命令之后，<em><strong>EXEC</strong></em> 命令或 <em><strong>DISCARD</strong></em> 命令先被执行，那么就不需要再执行 <em><strong>UNWATCH</strong></em></p><h3 id="事务三特性"><a href="#事务三特性" class="headerlink" title="事务三特性"></a>事务三特性</h3><ul><li><p>单独的隔离操作</p><p>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断</p></li><li><p>没有隔离级别的概念</p><p>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</p></li><li><p>不保证原子性</p><p>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</p></li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>在指定的时间间隔内将内存中的数据集快照写入磁盘， 即 <em><strong>Snapshot</strong></em> 快照，恢复时是将快照文件直接读到内存里</p><img src="/2021/11/16/Redis/image-20220402231605922.png" alt="image-20220402231605922" style="zoom:80%;"><p>Redis会单独创建一个子进程（<em><strong>fork</strong></em>）来进行持久化</p><p>先将数据写入到一个临时文件中，待持久化过程完成后，再将这个临时文件内容覆盖到 <em><strong>dump.rdb</strong></em></p><p>整个过程中，主进程是不进行任何 <em><strong>IO</strong></em> 操作的，这就确保了极高的性能，如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 <em><strong>RDB</strong></em> 方式要比 <em><strong>AOF</strong></em> 方式更加的高效</p><p><strong>RDB的缺点是最后一次持久化后的数据可能丢失</strong></p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><ul><li>作用是复制一个与当前进程一样的进程，新进程的所有数据（变量、环境变量、程序计数器等） 都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li><li>在Linux程序中，<em><strong>fork()</strong></em> 会产生一个和父进程完全相同的子进程，但子进程在此后多会 <em><strong>exec</strong></em> 系统调用，出于效率考虑，Linux中引入了 <strong>写时拷贝技术</strong></li><li><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程</li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>dump.rdb</strong>：文件名字，在 <em><strong>redis.conf</strong></em> 中配置文件名称，默认为 <em><strong>dump.rdb</strong></em></p><p><strong>dump.rdb</strong>：保存位置，<em><strong>rdb</strong></em> 文件的保存路径可以修改，默认为 <em><strong>Redis</strong></em> 启动时命令行所在的目录下</p><p><em><strong>stop-writes-on-bgsave-error</strong></em>：当 <em><strong>redis</strong></em> 无法写入磁盘，关闭 <em><strong>redis</strong></em> 的写入操作</p><p><em><strong>rdbcompression</strong></em>：持久化的文件是否进行压缩存储</p><p><em><strong>rdbchecksum</strong></em>：完整性的检查，即数据是否完整性、准确性</p><p><em><strong>save</strong></em>：表示写操作的次数（格式：save 秒 写操作次数，代表在该秒数内进行多少次写操作会将数据写入磁盘）</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><em><strong>Fork</strong></em> 的时候，内存中的数据被克隆了一份，大致 2 倍的膨胀性需要考虑</li><li>虽然Redis在 <em><strong>fork</strong></em> 时使用了<strong>写时拷贝技术</strong>，但是如果数据庞大时还是比较消耗性能</li><li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外 <em><strong>down</strong></em> 掉，就会丢失最后一次快照后的所有修改</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>以日志的形式来记录每个写操作（增量保存），将 Redis 执行过的所有写指令记录下来（读操作不记录）， 只许追加文件不可以修改文件，如果 Redis 重启就会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><p><strong>执行流程</strong></p><ul><li>客户端的请求写命令会被 <em><strong>append</strong></em> 追加到 <em><strong>AOF</strong></em> 缓冲区内</li><li><em><strong>AOF</strong></em> 缓冲区根据 <em><strong>AOF</strong></em> 持久化策略 <code>[always,everysec,no]</code> 将操作 <em><strong>sync</strong></em> 同步到磁盘的 <em><strong>AOF</strong></em> 文件中</li><li><em><strong>AOF</strong></em> 文件大小超过重写策略或手动重写时，会对 <em><strong>AOF</strong></em> 文件 <em><strong>Rewrite</strong></em> 重写，压缩 <em><strong>AOF</strong></em> 文件容量</li><li><em><strong>Redis</strong></em> 服务重启时，会重新 <em><strong>load</strong></em> 加载 <em><strong>AOF</strong></em> 文件中的写操作达到数据恢复的目的</li></ul><p><em><strong>AOF</strong></em> 和 <em><strong>RDB</strong></em> 同时开启时，系统默认读取 <em><strong>AOF</strong></em> 的数据（数据不会存在丢失）</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p><strong>AOF默认不开启</strong></p><p><strong>appendonly.aof</strong>：文件名字，保存路径容rdb一致</p><p><em><strong>appendfsync always</strong></em>：始终同步，每次 <em><strong>Redis</strong></em> 的写入都会立刻记入日志（性能较差但数据完整性比较好）</p><p><em><strong>appendfsync everysec</strong></em>：每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失</p><p><em><strong>appendfsync no</strong></em>：Redis 不主动进行同步，把同步时机交给操作系统</p><p><strong>Rewrite压缩</strong></p><p>当 <em><strong>AOF</strong></em> 文件的大小超过所设定的阈值时，Redis 就会启动 <em><strong>AOF</strong></em> 文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令 <em><strong>bgrewriteaof</strong></em></p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>备份机制更稳健，丢失数据概率更低</li><li>可读的日志文本，通过操作 <em><strong>AOF</strong></em> 稳健，可以处理误操作</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>比起 <em><strong>RDB</strong></em> 占用更多的磁盘空间</li><li>恢复备份速度要慢</li><li>每次读写都同步的话，有一定的性能压力</li><li>存在个别 <em><strong>Bug</strong></em>，造成不能恢复</li></ul><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>官方推荐两个都启用</p><p>如果对数据不敏感，可以选单独用 <em><strong>RDB</strong></em></p><p>不建议单独用 <em><strong>AOF</strong></em>，因为可能会出现 <em><strong>Bug</strong></em></p><p>如果只是做纯内存缓存，可以都不用</p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>主机数据更新后根据配置和策略， 自动同步到从机的 <em><strong>master&#x2F;slaver</strong></em> 机制，<em><strong>Master</strong></em> 以写为主，<em><strong>Slaver</strong></em> 以读为主</p><img src="/2021/11/16/Redis/image-20220402231618214.png" alt="image-20220402231618214" style="zoom:80%;"><ol><li>读写分离，性能扩展</li><li>容灾快速恢复</li><li>一主多从</li></ol><h3 id="搭建一主两从"><a href="#搭建一主两从" class="headerlink" title="搭建一主两从"></a>搭建一主两从</h3><p>将 <em><strong>redis.conf</strong></em> 复制到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/redis.conf /opt/etc/<br></code></pre></td></tr></table></figure><p>创建 3 个 <em><strong>redis.conf</strong></em> 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis6379.conf<br><br><span class="hljs-comment"># redis6379.conf</span><br>include /opt/etc/redis.conf <span class="hljs-comment">#引入原来的redis配置文件</span><br>pidfile /var/run/redis_6379.pid<br>port 6379<br>dbfilename dump6379.rdb<br></code></pre></td></tr></table></figure><p>启动 3 台 <em><strong>redis</strong></em> 服务器，并查看主机运行情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs baash">redis-server /etc/redis6379.conf<br>redis-cli -p 6379<br><br>info replication<br></code></pre></td></tr></table></figure><p>配从不配主</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">slaveof  &lt;ip&gt;&lt;port&gt;   <span class="hljs-comment">#成为某个实例的从服务器</span><br></code></pre></td></tr></table></figure><h3 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h3><p>一个主机，两个从机</p><p>当从机宕机，重新启动后不在是从机（重新设置为从机后会把主机的数据重新复制）</p><p>当主机宕机，从机仍然保持是从机，重新启动后仍然是主机</p><h3 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h3><img src="/2021/11/16/Redis/image-20220402231627461.png" alt="image-20220402231627461" style="zoom:80%;"><p>上一个 <em><strong>slave</strong></em> 可以是下一个 <em><strong>slave</strong></em> 的 <em><strong>master</strong></em>，<em><strong>slave</strong></em> 同样可以接收其他 <em><strong>slave</strong></em>的连接和同步请求，那么该 <em><strong>slave</strong></em> 作为了链条中下一个的 <em><strong>master</strong></em>，可以有效减轻 <em><strong>master</strong></em> 的写压力，去中心化降低风险</p><p>中途变更转向：会清除之前的数据，重新建立拷贝最新的</p><p>当某个 <em><strong>slave</strong></em> 宕机，后面的 <em><strong>slave</strong></em> 都没法备份</p><h3 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h3><p>当一个 <em><strong>master</strong></em> 宕机后，后面的 <em><strong>slave</strong></em> 可以立刻升为 <em><strong>master</strong></em>，其后面的 <em><strong>slave</strong></em> 不用做任何修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">slaveof no one<br></code></pre></td></tr></table></figure><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p><strong>反客为主的自动版</strong>，即能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><p>创建 <em><strong>sentinel.conf</strong></em> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /opt/etc/sentinel.conf<br></code></pre></td></tr></table></figure><p>配置哨兵</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mymaster：监控对象起的服务器名称</span><br><span class="hljs-comment"># 1表示至少有1个哨兵同意迁移的数量</span><br>sentinel monitor mymaster ip 端口号 1<br></code></pre></td></tr></table></figure><p>启动哨兵</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-sentinel  /opt/etc/sentinel.conf <br></code></pre></td></tr></table></figure><p>主机宕机，会从机选举中产生新的主机（宕机的主机重新启动后会变为从机）</p><p><strong>选举规则</strong></p><ul><li>根据优先级别<em><strong>slave-priority&#x2F;replica-priority</strong></em>，优先选择优先级靠前的</li><li>根据偏移量（从机和主机的数据一致性），优先选择偏移量大的</li><li>根据 <em><strong>runid</strong></em>（redis启动时会动生成的id），优先选择最小的服务</li></ul><h4 id="复制延时"><a href="#复制延时" class="headerlink" title="复制延时"></a>复制延时</h4><p>由于所有的写操作都是先在 <em><strong>master</strong></em> 上操作，然后同步更新到 <em><strong>slave</strong></em> 上，所以从 <em><strong>master</strong></em> 同步到 <em><strong>slave</strong></em> 有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，<em><strong>slave</strong></em> 机器数量的增加也会使这个问题更加严重</p><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ul><li><em><strong>slave</strong></em> 启动成功连接到 <em><strong>master</strong></em> 后会发送一个 <em><strong>sync</strong></em> 命令（同步命令）</li><li><em><strong>master</strong></em> 接到命令启动后台的存盘进程，对数据进行持久化操作，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，<em><strong>master</strong></em> 将传送整个数据文件（<em><strong>rdb</strong></em>）到 <em><strong>slave</strong></em>，以完成一次完全同步</li><li>连接成功之后当主服务进行写操作后，和从服务器进行数据同步</li><li>全量复制：<em><strong>slave</strong></em> 服务在接收到数据库文件数据后，将其存盘并加载到内存中</li><li>增量复制：<em><strong>master</strong></em> 继续将新的所有收集到的修改命令依次传给 <em><strong>slave</strong></em>，完成同步</li><li><em><strong>slave</strong></em>连接 <em><strong>master</strong></em>，一次完全同步（全量复制）将被自动执行</li></ul><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>解决容量不够和并发写操作问题</p><ul><li><p>代理主机（ <em><strong>之前</strong></em> ）</p><img src="/2021/11/16/Redis/image-20220402231639618.png" alt="image-20220402231639618" style="zoom:80%;"></li><li><p>无中心化集群配置（ <em><strong>redis3.0</strong></em> ）</p></li></ul><img src="/2021/11/16/Redis/image-20220402231651540.png" alt="image-20220402231651540" style="zoom:80%;"><p>Redis 集群实现了对 Redis 的水平扩容，即启动 <em><strong>N</strong></em> 个 Redis 节点，将整个数据库分布存储在这 <em><strong>N</strong></em> 个节点中，每个节点存储总数据的 <em><strong>1&#x2F;N</strong></em> </p><p>Redis 集群通过分区（<em><strong>partition</strong></em>）来提供一定程度的可用性（<em><strong>availability</strong></em>），即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求</p><h3 id="搭建-Redis-集群"><a href="#搭建-Redis-集群" class="headerlink" title="搭建 Redis 集群"></a>搭建 <em>Redis</em> 集群</h3><p>创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">include /opt/etc/redis.conf <span class="hljs-comment">#引入原来的redis配置文件</span><br>pidfile /var/run/redis_6379.pid<br>port 6379<br>dbfilename dump6379.rdb<br>cluster-enabled <span class="hljs-built_in">yes</span>  <span class="hljs-comment">#打开集群模式</span><br>cluster-config-file nodes-6379.conf  <span class="hljs-comment">#设置节点配置文件名称，需要更改</span><br>cluster-node-timeout 15000  <span class="hljs-comment">#设置节点失联事件，超过该时间（ms），集群自动进行主从切换</span><br></code></pre></td></tr></table></figure><p>创建集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入redis安装目录</span><br><span class="hljs-built_in">cd</span> /opt/redis-6.2.6/src<br><br><span class="hljs-comment"># 执行  （--cluster-replicas 1，表示希望为集群中的每个主节点创建一个从节点）</span><br>redis-cli --cluster create --cluster-replicas 1 172.16.88.168:6379 172.16.88.168:6380 172.16.88.168:6381 172.16.88.168:6389 172.16.88.168:6390 172.16.88.168:6391<br></code></pre></td></tr></table></figure><p>采用集群策略连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli -c -p 端口号  <span class="hljs-comment">#启动集群</span><br>cluster nodes  <span class="hljs-comment">#命令查看集群信息</span><br></code></pre></td></tr></table></figure><h4 id="集群分配"><a href="#集群分配" class="headerlink" title="集群分配"></a>集群分配</h4><p>一个集群至少要有三个主节点</p><p>分配原则尽量保证每个主数据库运行在不同的 <em><strong>IP</strong></em> 地址，每个从库和主库不在一个 <em><strong>IP</strong></em> 地址上</p><img src="/2021/11/16/Redis/image-20220402231700831.png" alt="image-20220402231700831" style="zoom:80%;"><h4 id="什么是-slots"><a href="#什么是-slots" class="headerlink" title="什么是 slots"></a>什么是 slots</h4><p>一个Redis集群包含 <em><strong>16384</strong></em> 个插槽（<em><strong>hash slot</strong></em>），数据库中的每个键都属于这 <em><strong>16384</strong></em> 个插槽的其中一个</p><p>集群使用公式 <em><strong>CRC16(key)%16384</strong></em> 来计算键 <em><strong>key</strong></em> 属于哪个槽，<em><strong>CRC16(key)</strong></em> 语句用于计算键 <em><strong>key</strong></em> 的 <em><strong>CRC16</strong></em> 校验和 </p><p>集群中的每个节点负责处理一部分插槽</p><p> 例如， 如果一个集群有三个主库， 其中：</p><ul><li>节点 <em><strong>A</strong></em> 负责处理 <em><strong>0</strong></em> 号至 <em><strong>5460</strong></em> 号插槽</li><li>节点 <em><strong>B</strong></em> 负责处理 <em><strong>5461</strong></em> 号至 <em><strong>10922</strong></em> 号插槽</li><li>节点 <em><strong>C</strong></em> 负责处理 <em><strong>10923</strong></em> 号至 <em><strong>16383</strong></em> 号插槽</li></ul><h4 id="集群中录入值"><a href="#集群中录入值" class="headerlink" title="集群中录入值"></a>集群中录入值</h4><p>在 <em><strong>redis-cli</strong></em> 每次录入、查询键值，redis 都会计算出该 <em><strong>key</strong></em> 应该送往的插槽，如果不是该客户端对应服务器的插槽，redis 会报错，并告知应前往的redis实例地址和端口</p><p><em><strong>redis-cli</strong></em> 客户端提供了 <em><strong>–c</strong></em> 参数实现自动重定向</p><p>例如 <em><strong>redis-cli -c –p 6379</strong></em> 登入后，再录入、查询键值对可以自动重定向</p><p>集群中要一次添加多个<em><strong>key</strong></em>，需要将给<em><strong>key</strong></em>添加组（key后使用{user}，表示添加到user组）</p><h4 id="查询集群中的值"><a href="#查询集群中的值" class="headerlink" title="查询集群中的值"></a>查询集群中的值</h4><p>每个主机只能查询自己范围内的插槽的值</p><p><code>cluster keyslot &lt;key&gt;</code>：查询某个 <em><strong>key</strong></em> 的 **<em>slot</em> **</p><p><code>cluster countkeysinslot &lt;slot&gt;</code>：查询某个 <em><strong>slot</strong></em> 是否有值</p><p><code>CLUSTER GETKEYSINSLOT &lt;slot&gt;&lt;count&gt;</code>：返回 <em><strong>count</strong></em> 个 <em><strong>slot</strong></em> 槽中的键</p><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p>主节点下线，从节点会自动升为主节点（注意：<em><strong>15</strong></em> 秒超时），主节点恢复后会变成从机</p><p>如果所有某一段插槽的主从节点都宕掉，redis 服务是否还能继续</p><ul><li><em><strong>cluster-require-full-coverage&#x3D;yes</strong></em>：整个集群都挂掉</li><li><em><strong>cluster-require-full-coverage&#x3D;no</strong></em>：该插槽数据全都不能使用，也无法存储</li></ul><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>实现扩容</li><li>分摊压力</li><li>无中心配置相对简单</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>多键操作是不被支持的，需要给键分在同组，根据组给键分槽</li><li>多键的Redis事务和<em><strong>lua</strong></em> 脚本不被支持</li><li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至<em><strong>redis cluster</strong></em>，需要整体迁移而不是逐步过渡，复杂度较大</li></ul><h2 id="Jedis操作Redis"><a href="#Jedis操作Redis" class="headerlink" title="Jedis操作Redis"></a>Jedis操作Redis</h2><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>连接 Redis</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.57.101&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pong</span> <span class="hljs-operator">=</span> jedis.ping();<br>        System.out.println(<span class="hljs-string">&quot;连接成功：&quot;</span> + pong);<br>        jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Key</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>Set&lt;String&gt; keys = jedis.keys(<span class="hljs-string">&quot;*&quot;</span>);<br><span class="hljs-keyword">for</span> (String key : keys) &#123;<br> System.out.println(key);<br>&#125;<br>System.out.println(jedis.exists(<span class="hljs-string">&quot;k1&quot;</span>));<br>System.out.println(jedis.ttl(<span class="hljs-string">&quot;k1&quot;</span>));                <br>System.out.println(jedis.get(<span class="hljs-string">&quot;k1&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>String</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.mset(<span class="hljs-string">&quot;str1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;str2&quot;</span>,<span class="hljs-string">&quot;v2&quot;</span>,<span class="hljs-string">&quot;str3&quot;</span>,<span class="hljs-string">&quot;v3&quot;</span>);<br>System.out.println(jedis.mget(<span class="hljs-string">&quot;str1&quot;</span>,<span class="hljs-string">&quot;str2&quot;</span>,<span class="hljs-string">&quot;str3&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>List</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = jedis.lrange(<span class="hljs-string">&quot;mylist&quot;</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (String element : list) &#123;<br> System.out.println(element);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Set</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order01&quot;</span>);<br>Set&lt;String&gt; smembers = jedis.smembers(<span class="hljs-string">&quot;orders&quot;</span>);<br><span class="hljs-keyword">for</span> (String order : smembers) &#123;<br> System.out.println(order);<br>&#125;<br>jedis.srem(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order02&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>Hash</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.hset(<span class="hljs-string">&quot;hash1&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>);<br>System.out.println(jedis.hget(<span class="hljs-string">&quot;hash1&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>));<br><br>Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();<br>map.put(<span class="hljs-string">&quot;telphone&quot;</span>,<span class="hljs-string">&quot;13810169999&quot;</span>);<br>jedis.hmset(<span class="hljs-string">&quot;hash2&quot;</span>,map);<br>List&lt;String&gt; result = jedis.hmget(<span class="hljs-string">&quot;hash2&quot;</span>, <span class="hljs-string">&quot;telphone&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>);<br><span class="hljs-keyword">for</span> (String element : result) &#123;<br> System.out.println(element);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>zset</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">100d</span>, <span class="hljs-string">&quot;z3&quot;</span>);<br>Set&lt;String&gt; zrange = jedis.zrange(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (String e : zrange) &#123;<br> System.out.println(e);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Jedis-主从复制"><a href="#Jedis-主从复制" class="headerlink" title="Jedis 主从复制"></a><em>Jedis</em> 主从复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisSentinelPool jedisSentinelPool=<span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Jedis <span class="hljs-title function_">getJedisFromSentinel</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-keyword">if</span>(jedisSentinelPool==<span class="hljs-literal">null</span>)&#123;<br>        Set&lt;String&gt; sentinelSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        sentinelSet.add(<span class="hljs-string">&quot;172.16.88.168:26379&quot;</span>); <span class="hljs-comment">// 端口为sentinal</span><br>        <span class="hljs-comment">//创建自定义pool连接池类</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">jedisPoolConfig</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        jedisPoolConfig.setMaxTotal(<span class="hljs-number">10</span>); <span class="hljs-comment">// 最大可用连接数</span><br>        jedisPoolConfig.setMaxIdle(<span class="hljs-number">5</span>); <span class="hljs-comment">// 最大闲置连接数</span><br>        jedisPoolConfig.setMinIdle(<span class="hljs-number">5</span>); <span class="hljs-comment">// 最小闲置连接数</span><br>        jedisPoolConfig.setBlockWhenExhausted(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 连接耗尽是否等待</span><br>        jedisPoolConfig.setMaxWaitMillis(<span class="hljs-number">2000</span>); <span class="hljs-comment">// 等待时间</span><br>        jedisPoolConfig.setTestOnBorrow(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 取连接的时候进行测试</span><br><br>        jedisSentinelPool=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisSentinelPool</span>(<span class="hljs-string">&quot;mymaster&quot;</span>,sentinelSet,jedisPoolConfig); <span class="hljs-comment">// 服务主机名</span><br>        <span class="hljs-keyword">return</span> jedisSentinelPool.getResource();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> jedisSentinelPool.getResource();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="集群的-Jedis-开发"><a href="#集群的-Jedis-开发" class="headerlink" title="集群的 Jedis 开发"></a>集群的 <em>Jedis</em> 开发</h3><p>即使连接的不是主机，集群会自动切换主机存储（主机写，从机读）</p><p>无中心化主从集群，无论从哪台主机写的数据，其他主机上都能读到数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisClusterTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br>        Set&lt;HostAndPort&gt;set =<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;HostAndPort&gt;();<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HostAndPort</span>(<span class="hljs-string">&quot;172.16.88.168&quot;</span>,<span class="hljs-number">6379</span>)); <span class="hljs-comment">// 任何一个端口</span><br>        <span class="hljs-comment">//创建集群</span><br>        <span class="hljs-type">JedisCluster</span> <span class="hljs-variable">jedisCluster</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisCluster</span>(set);<br>        jedisCluster.set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>        System.out.println(jedisCluster.get(<span class="hljs-string">&quot;k1&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="应用问题解决"><a href="#应用问题解决" class="headerlink" title="应用问题解决"></a>应用问题解决</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><img src="/2021/11/16/Redis/image-20220402231713881.png" alt="image-20220402231713881" style="zoom: 80%;"><p><em><strong>key</strong></em> 对应的数据在数据源并不存在，每次针对此 <em><strong>key</strong></em> 的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源</p><p>比如用一个不存在的用户 <em><strong>id</strong></em> 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库</p><ol><li>应用服务器压力变大</li><li>redis 命中率下降，一直查询数据库</li></ol><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><ul><li><p><strong>对空值缓存</strong></p><p>如果一个查询返回的数据为空（不管是数据是否不存在），仍然把这个空结果（<em><strong>null</strong></em>）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p></li><li><p><strong>设置可访问的名单（白名单）</strong></p><p>使用 <em><strong>bitmaps</strong></em> 类型定义一个可以访问的名单，名单 <em><strong>id</strong></em> 作为 <em><strong>bitmaps</strong></em> 的偏移量，每次访问和 <em><strong>bitmap</strong></em> 里面的 <em><strong>id</strong></em> 进行比较，如果访问 <em><strong>id</strong></em> 不在 <em><strong>bitmaps</strong></em> 里面，进行拦截，则不允许访问</p></li><li><p><strong>采用布隆过滤器</strong></p><p>布隆过滤器（<em><strong>Bloom Filter</strong></em>）是1970年由布隆提出的。它实际上是一个很长的二进制向量（位图）和一系列随机映射函数（哈希函数）</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难</p><p>将所有可能存在的数据哈希到一个足够大的 <em><strong>bitmaps</strong></em> 中，一个一定不存在的数据会被这个 <em><strong>bitmaps</strong></em> 拦截掉，从而避免了对底层存储系统的查询压力</p></li><li><p><strong>进行实时监控</strong></p><p>当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p></li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><img src="/2021/11/16/Redis/image-20220402231733279.png" alt="image-20220402231733279" style="zoom:80%;"><p><em><strong>key</strong></em> 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端<em><strong>DB</strong></em> 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 <em><strong>DB</strong></em> 压垮</p><ol><li>数据库访问压力瞬间增大</li><li>redis中没有出现大量 <em><strong>key</strong></em> 过期，<em><strong>redis</strong></em> 正常运行（即某个经常访问的 <em><strong>key</strong></em> 过期，突然大量访问这个数据）</li></ol><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><ul><li><p><strong>预先设置热门数据</strong></p><p>在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 <em><strong>key</strong></em> 的时长</p></li><li><p><strong>实时调整</strong></p><p>现场监控哪些数据热门，实时调整 <em><strong>key</strong></em> 的过期时长</p></li><li><p><strong>使用锁</strong></p></li></ul><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p><em><strong>key</strong></em> 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端<em><strong>DB</strong></em> 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 <em><strong>DB</strong></em> 压垮</p><p>缓存雪崩与缓存击穿的区别在于这里针对很多 <em><strong>key</strong></em> 缓存，前者则是某一个 <em><strong>key</strong></em></p><ol><li>数据库压力变大</li><li>即极少的时间段，查询大量 <em><strong>key</strong></em> 的集中过期情况</li></ol><h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><ul><li><p><strong>构建多级缓存架构</strong></p><p><em><strong>nginx</strong></em> 缓存 + <em><strong>redis</strong></em> 缓存 + 其他缓存（<em><strong>ehcache</strong></em>等）</p></li><li><p><strong>使用锁或队列</strong></p><p>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p></li><li><p><strong>设置过期标志更新缓存</strong></p><p>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 <em><strong>key</strong></em> 的缓存</p></li><li><p><strong>将缓存失效时间分散开</strong></p><p>比如我们可以在原有的失效时间基础上增加一个随机值，比如 1～5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件</p></li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux8</title>
    <link href="/2021/11/13/Linux8/"/>
    <url>/2021/11/13/Linux8/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux8"><a href="#Linux8" class="headerlink" title="Linux8"></a>Linux8</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ol><li>**&#x2F;**：根目录</li><li><strong>bin</strong>：存储一些二进制文件，文件都是可以被运行的</li><li><strong>sbin</strong>：存储一些可以被执行的二进制文件，但必须有super权限的用户才能执行</li><li><strong>dev</strong>：存储外接设备，外接设备不能直接使用，需要挂载</li><li><strong>etc</strong>：存储一些配置文件</li><li><strong>home</strong>：除了root用户以外的其他用户的家目录</li><li><strong>proc</strong>：存储linux运行时的进程</li><li><strong>root</strong>：root用户的家目录</li><li><strong>tmp</strong>：临时的，存储系统运行产生的临时文件</li><li><strong>lib</strong>：库文件</li><li><strong>usr</strong>：存放用户自己安装的软件</li><li><strong>var</strong>：存放的程序或系统的日志文件</li><li><strong>boot</strong>：系统内核</li><li><strong>media</strong>：移动设备默认挂载点</li><li><strong>mnt</strong>：外接设备手动挂载在mnt目录</li></ol><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>tcpdump -nn -i 网卡名称(eth0) port 端口</p><h3 id="命令管理"><a href="#命令管理" class="headerlink" title="命令管理"></a>命令管理</h3><h4 id="别名机制"><a href="#别名机制" class="headerlink" title="别名机制"></a>别名机制</h4><p>创建自定的命令，依靠别名映射文件~&#x2F;.bashrc</p><h4 id="快捷键："><a href="#快捷键：" class="headerlink" title="快捷键："></a>快捷键：</h4><p>Ctrl+U：删除光标前的内容</p><p>Ctrl+C：终止命令执行</p><p>Ctrl+Shift+C：复制</p><p>Ctrl+Shift+V：粘贴</p><p>clear或Ctrl+L：清除终端中的命令或信息</p><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><p>type 命令：查看命令是内部命令（Shell内部）还是外部命令</p><p>功能：获取命令说明</p><p>格式：内部命令：<code>help 命令</code></p><p>​外部命令：<code>命令 --help</code></p><h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><p>功能：查看命令详细说明</p><p>格式：<code>man 命令</code></p><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><p>功能：查看命令的绝对路径</p><p>格式：<code>which 命令</code></p><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><p>功能：查看命令的绝对路径以及文档手册信息</p><p>格式：<code>whereis 命令</code></p><h4 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h4><p>管道不能单独使用，要结合其他命令使用</p><ol><li>管道前边命令的输出结果用于管道后边命令的输入</li><li>|xargs：结合管道使用，让上一个的标准输出作为下一个命令的参数</li></ol><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><ol><li>sudo可以让管理员事先定义某些特殊命令谁可以执行</li><li>sudo的配置文件：&#x2F;etc&#x2F;sudoers</li><li>使用visudo命令打开配置文件，进行修改，允许的命令建议用which查看完整路径在写入</li></ol><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>功能：列出当前目录下所有内容</p><p>格式：<code>ls [选项] [文件名或目录名]</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-s</td><td>显示每个文件的大小</td></tr><tr><td>-S</td><td>按文件大小排序</td></tr><tr><td>-a</td><td>显示目录中全部文件（包括隐藏文件）</td></tr><tr><td>-l</td><td>使用长列表格式，显示文件详细信息</td></tr><tr><td>-t</td><td>按文件修改的时间排序</td></tr><tr><td>-F</td><td>显示文件类型描述符</td></tr><tr><td>-h</td><td>通过可读性高的形式展示</td></tr></tbody></table><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>功能：切换用户所在目录</p><p>格式：<code>cd [路径名或特殊符号]</code></p><p>特殊符号及作用：</p><table><thead><tr><th>特殊符号</th><th>作用</th></tr></thead><tbody><tr><td>&#x2F;</td><td>从当前目录跳转到根目录</td></tr><tr><td>.</td><td>前往当前目录</td></tr><tr><td>. .</td><td>前往上一级目录</td></tr><tr><td>-</td><td>进入当前目录之前操作的目录</td></tr><tr><td>~或无参数</td><td>回到当前用户的家目录</td></tr></tbody></table><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p>功能：显示当前目录的绝对路径</p><p>格式：<code>pwd</code></p><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p>功能：创建一个新的目录</p><p>格式：<code>mkdir [选项] 目录名</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-m 权限</td><td>对新建目录设置存取权限，权限有744、755等</td></tr><tr><td>-p</td><td>一次性创建多级目录（以递归形式创建）</td></tr></tbody></table><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h4><p>功能：删除一个空目录</p><p>格式：<code>rmdir [-p] 目录名</code>（-p代表递归删除各级目录）</p><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><p>功能：创建一个空文件</p><p>格式：<code>touch 文件名</code></p><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>功能：显示某文件的内容</p><p>格式：<code>cat [选项] [文件名]...</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有字符（换行符、制表符、其它非打印字符）</td></tr><tr><td>-n</td><td>对文件中所有的行进行编号并显示行号</td></tr><tr><td>-b</td><td>除了空行不编号，文件中其它行都进行编号并显示行号</td></tr><tr><td>-s</td><td>将连续的空行压缩为一个空行</td></tr></tbody></table><p>其它特殊格式：</p><table><thead><tr><th>特殊格式</th><th>作用</th></tr></thead><tbody><tr><td>cat 文件名 | ls</td><td>按页显示文件内容</td></tr><tr><td>cat</td><td>此命令没有任何参数，即cat单独使用。在开始执行时，光标停留在下一行，等待键盘输入，当用户输入一行后，按下回车，就会显示一行相同的内容。当用户结束输入时，按下Ctrl+D键退出，回到命令提示符下。</td></tr><tr><td>cat &gt; 新文件名</td><td>“&gt;”这个大于号是重导向符号。代表把键盘输入的信息重导向输入到新文件中。内容输入结束后，同样也是按Ctrl+D键退出新文件的制作。</td></tr><tr><td>cat 文件名2 &gt;&gt; 文件名1</td><td>该用法实现了把文件2的全部内容追加到文件1的末尾</td></tr><tr><td>cat 文件名1 文件名2 &gt; 文件名3</td><td>该用法实现了把文件1和文件2的内容合并输入到文件3中。文件3中的内容是按文件1和文件2的顺序排列的。</td></tr></tbody></table><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>功能：查看文件开头部分的内容</p><p>格式：<code>head [数字选项] 文件名</code></p><p>数字选项及作用：</p><table><thead><tr><th>数字选项</th><th>作用</th></tr></thead><tbody><tr><td>-3</td><td>显示文件前3行的内容</td></tr><tr><td>-n</td><td>显示文件前n行的内容</td></tr></tbody></table><p>说明：如果不指定数字选项，则默认只显示文件前10行。</p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>功能：查看文件结尾部分的内容</p><p>格式：<code>tail [数字选项] 文件名</code></p><p>数字选项及作用：</p><table><thead><tr><th>数字选项</th><th>作用</th></tr></thead><tbody><tr><td>-3</td><td>显示文件末尾3行的内容</td></tr><tr><td>-n</td><td>显示文件末尾n行的内容</td></tr></tbody></table><p>说明：如果不指定数字选项，则默认只显示文件末尾10行的内容。</p><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>功能：对文件内容或查询结果分屏显示</p><p>格式：<code>more [选项] 文件名</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-p</td><td>清屏，不滚屏</td></tr><tr><td>-s</td><td>把连续的空行压缩为一个空行</td></tr><tr><td>+n</td><td>从第n行开始显示</td></tr></tbody></table><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>功能：对文件内容或查询结果分屏显示</p><p>格式：<code>less [选项] 文件名</code></p><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>功能：在指定的文件中查找指定的字符串</p><p>格式：<code>grep [选项] 关键字 文件名</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-i</td><td>不区分大小写</td></tr></tbody></table><h5 id="规则表达式"><a href="#规则表达式" class="headerlink" title="规则表达式"></a>规则表达式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">^    # 锚定行的开始 如：&#x27;^grep&#x27;匹配所有以grep开头的行。    <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">   <span class="hljs-comment"># 锚定行的结束 如：&#x27;grep$&#x27; 匹配所有以grep结尾的行。</span></span><br>.    # 匹配一个非换行符的字符 如：&#x27;gr.p&#x27;匹配gr后接一个任意字符，然后是p。    <br>*    # 匹配零个或多个先前字符 如：&#x27;*grep&#x27;匹配所有一个或多个空格后紧跟grep的行。    <br>.*   # 一起用代表任意字符。   <br>[]   # 匹配一个指定范围内的字符，如&#x27;[Gg]rep&#x27;匹配Grep和grep。    <br>[^]  # 匹配一个不在指定范围内的字符，如：&#x27;[^A-FH-Z]rep&#x27;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。    <br>\(..\)  # 标记匹配字符，如&#x27;\(love\)&#x27;，love被标记为1。    <br>\&lt;      # 锚定单词的开始，如:&#x27;\&lt;grep&#x27;匹配包含以grep开头的单词的行。    <br>\&gt;      # 锚定单词的结束，如&#x27;grep\&gt;&#x27;匹配包含以grep结尾的单词的行。    <br>x\&#123;m\&#125;  # 重复字符x，m次，如：&#x27;0\&#123;5\&#125;&#x27;匹配包含5个o的行。    <br>x\&#123;m,\&#125;   # 重复字符x,至少m次，如：&#x27;o\&#123;5,\&#125;&#x27;匹配至少有5个o的行。    <br>x\&#123;m,n\&#125;  # 重复字符x，至少m次，不多于n次，如：&#x27;o\&#123;5,10\&#125;&#x27;匹配5--10个o的行。   <br>\w    # 匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#x27;G\w*p&#x27;匹配以G后跟零个或多个文字或数字字符，然后是p。   <br>\W    # \w的反置形式，匹配一个或多个非单词字符，如点号句号等。   <br>\b    # 单词锁定符，如: &#x27;\bgrep\b&#x27;只匹配grep。  <br></code></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p>功能：进行文件的复制</p><p>格式：<code>cp [选项] 源文件 目标路径</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-i</td><td>以安全询问方式进行源文件的复制</td></tr><tr><td>-r</td><td>递归复制</td></tr><tr><td>-p</td><td>保留源文件或目录的属性</td></tr><tr><td>-a</td><td>递归复制，并保留源文件或目录的属性</td></tr></tbody></table><p>说明：该命令实现了把源文件复制到目标路径中，文件名不变。如果为目标路径下的文件名，则以文件的重命名方式实现文件的复制。目标路径可以是相对路径，也可以是绝对路径。</p><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p>功能：删除指定的文件</p><p>格式：<code>rm [选项] 文件名或目录名</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-i</td><td>以安全询问方式进行删除文件</td></tr><tr><td>-r</td><td>递归处理，将指定目录下的所有文件及子目录一并处理</td></tr><tr><td>-f</td><td>强制删除文件或目录</td></tr><tr><td>-v</td><td>显示指令执行过程</td></tr></tbody></table><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p>功能：移动指定的文件，可用于重命名文件</p><p>格式：<code>mv 文件名 路径名</code></p><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><p>功能：统计文件的行数、单词数、字符数。</p><p>格式：<code>wc [选项] 文件名</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-l</td><td>显示文件的行数</td></tr><tr><td>-w</td><td>显示文件的单词数</td></tr><tr><td>-m</td><td>显示文件的字符数</td></tr></tbody></table><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><p>功能：查看文件类型  （d文件夹，-文件，l软链接，c输入输出设备，b存储设备，p管道文件）</p><p>格式：<code>file 文件名</code></p><h4 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h4><p>功能：查看文件详细信息</p><p>格式：<code>stat 文件路径</code></p><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><p>功能：创建链接</p><p>格式：硬链接：<code>ln 原始文件路径 快捷方式路径</code></p><p>​软链接：<code>ln -s 原始文件路径 快捷方式路径</code></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>功能：对文件内容或查询结果进行排序</p><p>格式：<code>sort [选项] 文件名</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-f</td><td>忽略大小写</td></tr><tr><td>-r</td><td>反向排序</td></tr><tr><td>-t</td><td>指定分隔符</td></tr><tr><td>-i</td><td>只考虑可以打印的字符，忽略任何非显示字符</td></tr></tbody></table><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>功能：查找文件或目录</p><p>格式：<code>find 路径 选项 关键字</code></p><p>选项：</p><p>​-name：按照文档名字进行搜索</p><p>​-iname：忽略大小写按照文档名字进行搜索</p><p>​-size：根据文件大小（-表示小于，+表示大于）</p><p>​-type：按照文档类型进行搜索（-表示文件，d表示文件夹）</p><p><code>find 路径 选项 关键字 动作</code></p><p>动作：</p><p>​-exec 命令：将找出的文件按照命令执行</p><p>​-ok 命令：将找出的文件按照命令询问执行       命令后加{}表示find查找到的数据      然后必须以空格、反斜杠、  分号结尾</p><p>​-ls：将找出的文件详细信息列出</p><p>​-delete：将找出的文件删除</p><h4 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h4><p>**”&gt;”**：覆盖输出，会覆盖原先文件的内容；1&gt;覆盖正确输出，会覆盖原先文件的内容；2&gt;覆盖错误输出，会覆盖原先文件的内容</p><p>**&amp;&gt;**：覆盖正确和错误输出，会覆盖原先文件的内容</p><p>**”&gt;&gt;”**：追加输出，在原先的文件末尾继续添加</p><p>格式：<code>查看文件指令 &gt; 文件（文件可以不存在，不存在会创建）</code></p><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><p>功能：显示命令行中的字符串</p><p>格式：<code>echo [选项] [字符串]</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-n</td><td>输出字符串后，光标不换行</td></tr></tbody></table><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p>ls -l查看的信息的第一个十位字符含义：</p><p>​第1位：文档类型（d文件夹，-文件，l软链接，c输入输出设备，b存储设备，p管道文件）</p><p>​第2-4位：文档所有者的权限情况   （读：r -，-写：w -，执行：x -）（按照读、写、执行依次取值）</p><p>​第5-7位：与所有者同在一个组的权限情况</p><p>​第8-10位：其他用户的权限情况</p><p>功能：修改文件的权限和属性</p><p>格式： <code>chmod [&lt;文件使用者&gt;&lt;操作符号&gt;&lt;权限类型&gt;] 文件名1 文件名2...</code></p><p><strong>注：</strong>[&lt;文件使用者&gt;&lt;操作符号&gt;&lt;权限类型&gt;] 作为一个部分，中间不加空格。</p><ol><li><p>文件使用者有（ u、g、o、a） 4种类型，在使用时，可以采用其中的任何一个，也可以组合使用。</p><p>u：表示user（文件主），就是文件或目录的所有者</p><p>g：表示group（组群），文件主所在组群的用户</p><p>o：表示other，其他用户</p><p>a：表示all，所有用户</p></li><li><p>操作符号有3种类型，分别是 +、-、&#x3D;。</p><p>+：表示增加权限</p><p>-：表示删除或取消权限</p><p>&#x3D;：表示给文件使用者设定的权限</p></li><li><p>权限类型有3种基本类型，分别是r、w、x，-，这些类型可以组合使用。</p><p>r：代表可读权限</p><p>w：代表可写权限</p><p>x：代表可执行权限</p><p>-：表示没有相对应的权限</p></li></ol><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>a+rw</td><td>为所有用户增加可读、可写的权限</td></tr><tr><td>g+w</td><td>为组群用户加可写权限</td></tr><tr><td>a-rwx</td><td>取消所有用户可读、可写、可执行权限</td></tr><tr><td>o-rwx</td><td>取消其他用户可读、可写、可执行权限</td></tr><tr><td>a+rw</td><td>为所有用户加读、写的权限</td></tr><tr><td>ug+r</td><td>为所有者和组群用户增加读权限</td></tr><tr><td>g&#x3D;rx</td><td>只允许组群用户可读、可执行，并删除其他权限</td></tr><tr><td>自定义</td><td>可以根据实际需要进行组合</td></tr></tbody></table><p>其他格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod [mode] 文件名<br></code></pre></td></tr></table></figure><p>mode是指 3个 0~7 范围的八进制数值，分别代表user、group、other 的权限，并且按照文件所有者，文件所有者所在群组的用户，其他人的顺序</p><p>权限也可以用数字来表示：0表示没有权限，1表示可执行权限，2表示可写权限，4表示可读权限。</p><p><strong>举例1：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod a=rwx filename<br>chmod 777 filename<br></code></pre></td></tr></table></figure><p>对以上的两个例子分析：</p><p>a&#x3D;rwx表示允许所有用户可读、可写、可执行。</p><p>777指三个八进制数值，即第一个数字“7”指允许user的可读、可写、可执行，第二个数字“7”指允许group的可读、可写、可执行，第三个数字“7”指允许other的可读、可写、可执行。</p><p>rwx权限&#x3D;4+2+1&#x3D;7（可读、可写、可执行）</p><p>rw权限&#x3D;4+2&#x3D;6（可读、可写）</p><p>rx权限&#x3D;4+1&#x3D;5（可读、可执行）</p><p><strong>举例2：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod ug=rwx,o=x filename<br>chmod 771 filename<br></code></pre></td></tr></table></figure><ol><li><p>冒险位</p></li><li><p>强制位</p></li><li><p>粘滞位：公共目录中只能创建者和root你让那个删除文件（x位变为t）</p><p>chmod o+t 路径：添加粘滞位</p></li><li><p>默认权限：目录的默认权限最大为0777，文件的额默认权限最大为0666</p><ol><li><p>临时修改默认权限：用户名 umask 四位数     （目录默认权限&#x3D;0777-umask；文件默认权限&#x3D;0666-umask【文件默认没有x权限，如果算出来有x权限，权限进行加1，变成读或写权限】）</p></li><li><p>永久控制默认权限：</p><p>全部用户生效：vim &#x2F;etc&#x2F;bashrc配置文件最后添加umask 四位数字</p><p>某个用户生效：vim ~&#x2F;.bashrc配置文件最后添加umask 四位数字</p></li></ol></li><li><p>ACL策略：对某个文件添加权限（ll后权限字段有+）</p><ol><li>给文件添加用户权限：setfacl -m u:用户名:权限(rwx) 文件名</li><li>给文件添加用户组权限：setfacl -m g:用户组名:权限(rwx) 文件名</li><li>查看文件的ACL策略：getfacl 文件名</li><li>删除文件的所有ACL策略：setfacl -b 文件名</li></ol></li></ol><h4 id="setfacl"><a href="#setfacl" class="headerlink" title="setfacl"></a>setfacl</h4><p>功能：设置文件权限</p><p>格式： </p><ol><li><p>给某个用户添加权限：<code>setfacl -m u:用户:rwx 文件</code></p><ol start="2"><li>给某个用户组添加权限：<code>setfacl -m g:用户组:rwx 文件</code></li><li>删除某个用户添加权限：<code>setfacl -x u:用户:rwx 文件</code></li><li>删除某个用户组添加权限：<code>setfacl -x g:用户组:rwx 文件</code></li></ol></li></ol><p><strong>getfacl 文件</strong>：查看文件的权限</p><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>功能：编辑文件</p><p>格式：<code>vim 文件路径</code></p><p>​<code>vim 文件路径1 文件路径2</code></p><p>打开文件并将光标移动到指定行：<code>vim +数字 文件路径</code></p><p>打开文件并将高亮显示关键词：<code>vim +/关键词 文件路径</code></p><h5 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h5><ol><li><p><strong>命令模式</strong>：在该模式下是不能对文件直接编辑，可以输入快捷键进行删除行，复制行，移动光标，粘贴等操作（打开文件默认进入）</p><ol><li>光标的移动：<ol><li>光标移动到行首：shift+6或^</li><li>光标移动到行尾：shift+4或$</li><li>光标移动到首行：gg</li><li>光标移动到末行：G</li><li>光标移动到指定行：数字G</li><li>以当前光标为基准移动指定行：数字上键&#x2F;下键&#x2F;左键&#x2F;右键</li><li>向上翻屏：ctrl+b</li><li>向下翻屏：ctrl+f</li></ol></li><li>复制操作<ol><li>复制光标所在行：yy</li><li>以光标为准向下复制n行：nyy</li><li>可视化复制：ctrl+v，按上下左右选中，再按yy键复制</li></ol></li><li>剪切&#x2F;删除<ol><li>剪切&#x2F;删除光标所在行：dd</li><li>以光标为准向下剪切&#x2F;删除n行：ndd</li><li>剪切&#x2F;删除光标所在行，但下一行不向上移动：D</li></ol></li><li>粘贴：在想要粘贴的地方按p键</li><li>撤销&#x2F;恢复<ol><li>撤销：输入：u 或u</li><li>恢复：ctrl+r，恢复之前的撤销操作</li></ol></li></ol></li><li><p><strong>编辑模式</strong>：在该模式下可以对文件的内容进行编辑  i或a进入编辑模式</p></li><li><p><strong>末行模式</strong>：可以在末行输入命令对文件进行操作（替换，保存，搜索，退出，撤销，高亮等）</p><p>在命令模式按：或&#x2F;进入末行模式</p><ol><li>保存文件：：w</li><li>另存文件：：w  路径</li><li>退出：：q</li><li>保存并退出：：wq 或：x(修改则保存退出，不修改则原样退出)</li><li>强制退出：：q！</li><li>搜索&#x2F;查找：&#x2F;关键词（结果上下切换N&#x2F;n）</li><li>取消高亮：：nohl</li><li>替换光标所在行的第一处：：s&#x2F;搜索的关键词&#x2F;替换的内容</li><li>替换光标所在行的全部符合内容：：s&#x2F;搜索的关键词&#x2F;替换的内容&#x2F;g</li><li>替换每行的第一个符合内容：：%s&#x2F;搜索的关键词&#x2F;替换的内容</li><li>替换文档的全部符合内容：：%s&#x2F;搜索的关键词&#x2F;替换的内容&#x2F;g</li><li>显示行号：set nu     取消行号：set nonu</li><li>同时打开多个文件时切换打开的文件：<ol><li>查看当前已经打开的文件名称：：files</li><li>切换文件：：open 文件名称           切换下一个文件：：bn      切换上一个文件：：bp</li></ol></li><li>代码着色：syntax on     不显示：syntax off</li></ol></li></ol><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p><strong>针对同一个配置项，若个人配置文件有该项，则以个人配置文件为准</strong></p><ol><li>个人配置文件~&#x2F;.vimrc<ol><li>没有该文件，可以进行新建   .vimrc</li></ol></li><li>全局配置文件（vim自带）</li></ol><h5 id="异常退出"><a href="#异常退出" class="headerlink" title="异常退出"></a>异常退出</h5><p>将交换文件删除：rm -f .passwd.swp</p><h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><h4 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h4><p>需要下载好rpm包到本地</p><p>获取rpm包，RedHat&#x2F;CentOS光盘；<a href="http://www.pbone.net;相应软件官方下载/">www.pbone.net；相应软件官方下载</a></p><p>命令：</p><ol><li><p>查询：rpm -q 软件名：查询软件的安装情况</p><p>​rpm -ql 软件名：查询软件的安装列表</p></li><li><p>卸载：rpm -e 软件名</p></li><li><p>卸载有依赖关系的软件：rpm -e 软件名 –nodeps</p></li><li><p>安装：rpm -ivh 软件包完整名称</p></li><li><p>升级：rpm -Uvh 软件包（没安装，会自动安装）或rpm -Fvh 软件包</p></li></ol><h4 id="yum-x2F-dnf"><a href="#yum-x2F-dnf" class="headerlink" title="yum&#x2F;dnf"></a>yum&#x2F;dnf</h4><p>需要配置软件仓库</p><ol><li>配置本地仓库<ol><li>挂载镜像：mount -o ro &#x2F;dev&#x2F;sr0 &#x2F;media</li><li>配置.repo的文件</li></ol></li><li>配置网络仓库</li></ol><p>命令：</p><ol><li>清空缓存：yum clear all</li><li>创建yum缓存：yum makecache</li><li>查看仓库：yum repolist</li><li>查看仓库软件包：yum list</li><li>安装软件包：dnf install 软件包名</li><li>卸载：dnf -y remove 软件包</li><li>升级：dnf update 软件包</li></ol><h4 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h4><p><strong>systemctl命令</strong> 是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。</p><table><thead><tr><th>任务</th><th>旧指令</th><th>新指令</th></tr></thead><tbody><tr><td>使某服务自动启动</td><td>chkconfig –level 3 httpd on</td><td>systemctl <strong>enable</strong> httpd.service</td></tr><tr><td>使某服务不自动启动</td><td>chkconfig –level 3 httpd off</td><td>systemctl <strong>disable</strong> httpd.service</td></tr><tr><td>检查服务状态</td><td>service httpd status</td><td>systemctl <strong>status</strong> httpd.service （服务详细信息）                       systemctl is-active httpd.service （仅显示是否 Active)</td></tr><tr><td>显示所有已启动的服务</td><td>chkconfig –list</td><td>systemctl list-units –type&#x3D;service</td></tr><tr><td>启动服务</td><td>service httpd start</td><td>systemctl <strong>start</strong> httpd.service</td></tr><tr><td>停止服务</td><td>service httpd stop</td><td>systemctl <strong>stop</strong> httpd.service</td></tr><tr><td>重启服务</td><td>service httpd restart</td><td>systemctl <strong>restart</strong> httpd.service</td></tr><tr><td>重载服务</td><td>service httpd reload</td><td>systemctl <strong>reload</strong> httpd.service</td></tr></tbody></table><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>功能：查看服务器进程信息</p><p>格式：<code>ps -ef</code></p><p>​-e：表示列出全部的进程</p><p>​-f：显示全部的列</p><p>查看某个进程的信息：<code>ps -ef | grep 进程路径名</code></p><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>功能：查看进程资源</p><p>top：查看服务器的进程占的资源（Q键退出）</p><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>功能：杀死进程</p><p>格式：<code>kill 进程PID</code>或<code>killall 进程名称</code></p><h4 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h4><p>功能：重启计算机</p><p>格式：<code>reboot</code></p><p>模拟重启，但不重启：<code>reboot -w</code></p><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><p>shutdown -h now：现在关机</p><p>shutdown -h 10：10分钟后关机</p><p>shutdown -r now：现在重启</p><p>shutdown -r 10：10分钟后重启</p><p>shutdown -c：取消关机、重启</p><h4 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h4><p>功能：获取操作系统信息</p><p>​uname -a：获取操作系统的详细信息</p><h4 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h4><p>&#x2F;etc&#x2F;inittab：运行级别配置文件</p><h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><p>功能：创建计划任务</p><p>格式：<code>at 选项 时间 </code>   ctrl+D退出</p><p>时间：<code>now + count time-units</code>，now就是当前时间，time-units是时间单位，这里能够是minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count是时间的数量，究竟是几天，还是几小时，等等。 更有一种计时方法就是直接使用today（今天）、tomorrow（明天）来指定完成命令的时间</p><p>选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">-f：指定包含具体指令的任务文件；<br>-q：指定新任务的队列名称；<br>-l：显示待执行任务的列表；<br>-d：删除指定的待执行任务；<br>-m：任务执行完成后向用户发送E-mail。<br></code></pre></td></tr></table></figure><h4 id="crond"><a href="#crond" class="headerlink" title="crond"></a>crond</h4><p>功能：设定计划任务</p><p>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表g</p><p>格式：<code>crontab 选项</code></p><p>常用选项： -l：列出指定用户的计划任务列表</p><p>​-e：编辑指定用户的计划任务列表</p><p>编辑计划任务的语法规则：</p><table><thead><tr><th align="left">字段</th><th align="left">描述</th><th align="left">允许的值</th></tr></thead><tbody><tr><td align="left">分钟</td><td align="left">一小时的第几分</td><td align="left">0-59</td></tr><tr><td align="left">小时</td><td align="left">一天的第几小时</td><td align="left">0-23</td></tr><tr><td align="left">日期</td><td align="left">一个月的的第几天</td><td align="left">1-31</td></tr><tr><td align="left">月份</td><td align="left">一年的第几个月</td><td align="left">1-12</td></tr><tr><td align="left">周几</td><td align="left">一周的第几天</td><td align="left">0-6</td></tr><tr><td align="left">命令</td><td align="left">命令</td><td align="left">可以被执行的任何命令</td></tr></tbody></table><p>​分(0<del>23) 时(0</del>59) 日(1<del>31) 月(1</del>12) 周(0~7) 操作</p><p>*：表示取每个数字</p><p>-：表示取连续的区间（比如1-6）</p><p>&#x2F;：表示每多少个（比如每十分钟一次可以在分的位置写*&#x2F;10）</p><p>，：表示多个取值</p><p>管理用户不能设置计划任务：&#x2F;etc&#x2F;cron.deny</p><p>管理用户设置计划任务白名单：&#x2F;etc&#x2F;cron.allow</p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>功能：查看当前硬盘的分区信息</p><p>格式：<code>df [选项]</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示每个文件系统和各分区的磁盘使用情况</td></tr><tr><td>-i</td><td>显示i节点的使用量</td></tr><tr><td>-k</td><td>以千字节（KB）的方式显示分区大小和挂上来的文件分区大小</td></tr><tr><td>-h</td><td>以兆字节（MB）的方式显示分区大小和挂上来的文件分区大小</td></tr><tr><td>-t</td><td>列出某个文件系统的所有分区磁盘空间使用量</td></tr></tbody></table><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><p>功能：查看当前目录下所有文件及目录信息</p><p>格式：<code>du [选项]</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有文件及目录的大小</td></tr><tr><td>-h</td><td>以兆字节（MB）或吉字节（GB）为单位显示文件或目录的大小</td></tr><tr><td>-b</td><td>以字节（B）为单位显示文件或目录的大小</td></tr><tr><td>-s</td><td>列出各文件大小的总和</td></tr></tbody></table><h4 id="fsck"><a href="#fsck" class="headerlink" title="fsck"></a>fsck</h4><p>功能：对硬盘进行检测</p><p>格式：<code>fsck 分区名</code></p><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p>功能：查看内存</p><p>格式：<code>free -m</code></p><p>​-m单位为mb</p><h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><h4 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h4><p>uptime：输出计算机持续在线时间</p><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><ol><li><p>date：读取时间</p></li><li><p>date +%F：读取时间，年月日</p></li><li><p>date “+%F %T”：读取时间，年月日时分秒</p></li><li><p>date -d “-1 day” “+%Y-%m-%d %H:%M:%S”：输出一天前的时间</p></li></ol><h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><p>功能：查看日历</p><p>格式：<code>cal [选项] [月] [年]</code></p><p>选项:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">-l # 显示单月输出；<br>-3 # 显示临近三个月的日历；<br>-s # 将星期日作为月的第一天；<br>-m # 显示星期一作为一周的第一天..  (缺省为星期日.)<br>-j # 显示儒略历的(Julian)日期 (以 1 为基的天数, 从 1 月 1 日开始计数) .<br>-y # 显示当前年份的日历..<br></code></pre></td></tr></table></figure><h4 id="ntpdate"><a href="#ntpdate" class="headerlink" title="ntpdate"></a>ntpdate</h4><p>功能：使用网络计时协议（NTP）设置日期和时间</p><p>格式：<code>ntpdate [选项]</code></p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-aKeyid</td><td>使用 Keyid 来认证全部数据包。</td></tr><tr><td>-b</td><td>通过调用 settimeofday 子例程来增加时钟的时间。</td></tr><tr><td>-d</td><td>指定调试方式。判断 ntpdate 命令会产生什么结果（不产生实际的结果）。结果再现在屏幕上。这个标志使用无特权的端口。</td></tr><tr><td>-eAuthenticationDelay</td><td>指定延迟认证处理的时间秒数。</td></tr><tr><td>-kKeyFile</td><td>当不使用缺省值 &#x2F;etc&#x2F;ntp.keys 文件时，为包含密钥的文件指定一个不同的名称。 请参阅文件KeyFile的描述。</td></tr><tr><td>-oVersion</td><td>当轮询它的发出数据包时，指定使用的 NTP 版本实现。 Version 的值可以是 1，2，3。缺省值是 3。</td></tr><tr><td>-pSamples</td><td>指定从每个服务器获取的样本的数目。 Samples 的值在 1 和 8 之间，并包括 1 和 8。它的缺省值是 4。</td></tr><tr><td>-s</td><td>指定日志操作 syslog 设施的使用，而不是使用标准输出。 当运行 ntpdate 命令和 cron命令时，它是很有用的。</td></tr><tr><td>-tTimeOut</td><td>指定等待响应的时间。给定 TimeOut 的值四舍五入为 0.2 秒的倍数。缺省值是 1 秒。</td></tr><tr><td>-u</td><td>指定使用无特权的端口发送数据包。 当在一个对特权端口的输入流量进行阻拦的防火墙后是很有益的， 并希望在防火墙之外和主机同步。防火墙是一个系统或者计算机，它控制从外网对专用网的访问。</td></tr></tbody></table><p>启动时间同步服务：systemctl start chronyd</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h4><p>功能：查看完整的主机名</p><p>格式：<code>hostname</code></p><p>​-f：输出当前主机名中的FQDN（全限定域名）</p><p>设置主机名：<code>hostnamectl set-hostname 主机名</code></p><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>功能：显示用户信息，默认显示当前用户的的信息</p><p>格式：<code>id [用户名]</code></p><h4 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h4><p>whoami：显示当前登录的用户名</p><h4 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h4><p>&#x2F;etc&#x2F;passwd：存储用户的关键信息      用户名：密码：用户id：用户主组id：注释：家目录：解释器shell</p><p>&#x2F;etc&#x2F;group：存储用户组的关键信息      用户名：密码：用户组id：组内用户名</p><p>&#x2F;etc&#x2F;shadow：存储用户密码的关键信息</p><h5 id="用户管理-1"><a href="#用户管理-1" class="headerlink" title="用户管理"></a>用户管理</h5><ol><li><p><strong>添加用户</strong>：useradd [选项] 用户名</p><p>选项： -g：指定用户的用户主组（用户主组名或id）</p><p>​-G：指定用户的的附加组（用户附加组名或id）</p><p>​-u：自定义用户的uid</p><p>​-s：修改shell，不能登录</p><p>​-d：家目录</p><p>​-c：添加用户注释</p></li><li><p><strong>设置密码</strong>：passwd 用户名        <strong>修改用户密码</strong>：chage -d 0：下次登录时必须设置密码</p></li><li><p><strong>修改用户</strong>：usermod 选项 用户名</p><p>选项： -g：指定用户的用户主组（用户主组名或id）</p><p>​-G：指定用户的的附加组（用户附加组名或id）</p><p>​-u：自定义用户的uid</p><p>​-l：修改用户名</p></li><li><p><strong>删除用户</strong>：userdel [选项] 用户名</p><p>选项：-r：删除用户的同时，删除家目录</p></li><li><p><strong>切换用户</strong>：su 用户名</p></li></ol><h5 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h5><ol><li><p><strong>添加用户组</strong>：groupadd [选项] 用户组名</p><p>选项： -g：自定义用户组的id</p></li><li><p><strong>设置用户组密码</strong>：gpasswd 组名</p></li><li><p><strong>修改用户组</strong>：groupmod 选项 用户组名</p><p>选项： -g：自定义用户组的id</p><p>​-u：修改用户组的名称</p></li><li><p><strong>删除用户组</strong>：groupdel 用户组名</p><p>当该组是某个组的主组时，不允许删除</p></li><li><p><strong>管理组成员</strong>：gpasswd 选项  用户 组名</p><p>选项：-a：添加用户到组</p><p>​-d：从组中删除成员</p><p>​-M：指定组的成员</p><p>​-A：指定管理员</p><p>​-r：删除组密码</p></li></ol><h5 id="修改文档所属的用户和用户组-当要删除用户时，就要更改文档对应的属主和属组信息"><a href="#修改文档所属的用户和用户组-当要删除用户时，就要更改文档对应的属主和属组信息" class="headerlink" title="修改文档所属的用户和用户组    当要删除用户时，就要更改文档对应的属主和属组信息"></a>修改文档所属的用户和用户组    当要删除用户时，就要更改文档对应的属主和属组信息</h5><p><strong>chown 用户名: 文档路径</strong>：修改文件的属主</p><p><strong>chown 用户名:用户组名 文档路径</strong>：修改文件的属主和属组</p><p><strong>chgrp 用户组名 文档路径</strong>：修改文件的属组</p><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><h4 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h4><p>功能：压缩文件</p><p>格式：<code>bzip2 文件名1 [文件名2]...</code></p><p>说明：使用该命令对文件进行压缩后，压缩前的原始文件消失，系统会生成一个新的压缩文件，压缩文件的后缀为.bz2。而且，使用该命令压缩的文件，必须用bunzip2来进行解压操作。</p><h5 id="bunzip2"><a href="#bunzip2" class="headerlink" title="bunzip2"></a>bunzip2</h5><p>功能：解压文件</p><p>格式：<code>bunzip2 文件名1 [文件名2]...</code></p><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><p>功能：压缩或解压文件</p><p>格式：<code>gzip [选项] 文件名</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>解压操作</td></tr><tr><td>-n</td><td>指定压缩级别，n的范围是1~9</td></tr></tbody></table><h5 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h5><p>功能：解压以.zip为后缀的压缩文件</p><p>格式：<code>unzip [选项] 文件名.zip</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>将文件解压到指定目录中</td></tr><tr><td>-n</td><td>不覆盖原来已存在的文件</td></tr><tr><td>-v</td><td>查看文件目录列表但不解压</td></tr><tr><td>-o</td><td>已默认方式覆盖已存在的文件</td></tr></tbody></table><p>举例： <code>unzip -n filename.zip -d /home/ubuntu</code>将文件filename.zip解压到&#x2F;home&#x2F;ubuntu目录中。</p><h4 id="zcat和bzcat"><a href="#zcat和bzcat" class="headerlink" title="zcat和bzcat"></a>zcat和bzcat</h4><p>功能：这两个都是用来查看压缩文件内容的，压缩文件不用解压也能查看。</p><p>格式：<code>zcat 文件名</code>或<code>bzcat 文件名</code></p><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>功能：对文件或目录进行打包或解包操作</p><p>格式：<code>tar [选项] [备份包的文件名] [要打包或解包的文件或目录]</code></p><p>选项及作用：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>创建新的打包文件</td></tr><tr><td>-t</td><td>查看打包文件里的文件目录</td></tr><tr><td>-f</td><td>使用文件或设备</td></tr><tr><td>-v</td><td>显示打包压缩或解包压缩后的文件的详细清单</td></tr><tr><td>-x</td><td>抽取.tar文件的内容</td></tr><tr><td>-z</td><td>打包后直接用gzip命令进行压缩或解压文件</td></tr><tr><td>-j</td><td>打包后直接用bzip2命令进行压缩或解压文件</td></tr></tbody></table><p>常用：</p><p>​tar –czvf jpg.tar *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成tar.jpg</p><p>​tar -xzvf file.tar.gz &#x2F;&#x2F;解压tar.g</p><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>ifconfig：获取网卡信息</p><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>netstat -hnlp：查看网络的连接状态</p><p>​-t：表示只列出tcp协议的连接</p><p>​-n：将地址从字母组合转化成ip地址，将协议转化成端口号表示</p><p>​-l：过滤出“state”状态列中其值为LISTEN（监听）的连接</p><p>​-p：显示发起连接的进程PID和进程名称</p><p>​-a：全部网络的连接信息</p><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>功能：检测当前主机与目标主机是否联通</p><p>格式：<code>ping 主机id</code></p><h4 id="traceroute-主机地址"><a href="#traceroute-主机地址" class="headerlink" title="traceroute 主机地址"></a>traceroute 主机地址</h4><p>功能：查找当前主机与目标主机之间的网关，会沿途给各个路由器发送ICMP数据包（需要安装）</p><p>格式：<code>traceroute 主机地址</code></p><p>在线查询工具：<a href="http://tool.chinaz.com/">http://tool.chinaz.com</a></p><h4 id="arp-a"><a href="#arp-a" class="headerlink" title="arp -a"></a>arp -a</h4><p>功能：根据ip地址获取物理地址</p><h4 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h4><p>功能：抓包</p><p>格式：<code>tcpdump 协议 port端口</code></p><h4 id="配置静态ip"><a href="#配置静态ip" class="headerlink" title="配置静态ip"></a>配置静态ip</h4><ol><li><p>修改&#x2F;etc&#x2F;sysconfig&#x2F;network-scriptsifcfg-ens160文件； </p><p>重写加载配置文件：nmcli connection reload ens160；</p><p>激活网卡：nmcli connection up ens160</p></li><li><p>nmcli命令</p></li><li><p>nmtui图形界面</p></li></ol><h4 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h4><p>ssh：安全外壳协议，用于远程连接，文件传输，默认端口22</p><p>安装openssh-server软件</p><p>ssh配置文件：&#x2F;etc&#x2F;ssh&#x2F;sshd_config</p><p>启动&#x2F;停止&#x2F;重启ssh服务：systemctl  start sshd.service</p><ol><li>linux下安装openssh-clients软件，远程连接linux服务器；<ol><li>登录服务器：ssh -p 端口号 -l 用户名 ip地址</li><li>执行命令：ssh -p 端口号哦 -l 用户名 IP地址 命令</li><li>本地文件拷贝到远端：scp -P 端口号 [-r] 本地文件 id地址:远端路径</li><li>远端文件拷贝到本地：scp -P 端口号 用户名@id地址:&#x2F;文件 本地路径</li></ol></li></ol><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>CentOS8中防火墙是：firewalld</p><p>防火墙的启动&#x2F;停止&#x2F;重启&#x2F;查看：systemctl start&#x2F;stop&#x2F;restart&#x2F; status firewalld.service</p><p>开启防火墙22端口：firewall-cmd –add-port&#x3D;5672&#x2F;tcp –permanent</p><p>firewall-cmd –list-ports&#x2F;&#x2F;查看已经放行的所有端口</p><p>firewall-cmd –reload&#x2F;&#x2F;让③中有permanent（永久生效）需重新加载</p><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><p>功能：挂在物理设备</p><p>格式：<code>mount设备原始地址 要挂在的路径</code></p><h4 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h4><p>功能：解挂物理设备</p><p>格式：<code>umount 当前设备挂载的路径</code></p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="编写规范"><a href="#编写规范" class="headerlink" title="编写规范"></a>编写规范</h3><ol><li><p>代码规范：</p><p>​#!&#x2F;bin&#x2F;base（首行必须编写）</p><p>​Shell相关指令</p></li><li><p>文件命名规范：文件名.sh</p></li></ol><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol><li>创建.sh文件</li><li>编写shell代码</li><li>执行shell脚本（必须得有执行权限）</li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li>定义：变量名&#x3D;变量值（&#x3D;左右不能有空格）变量值为指令时，需要使用&#96;&#96;括起来(tab上边的反引号)</li><li>使用：$变量名</li><li>只读变量：readonly 变量名    在一个变量复制之后再使用</li><li>接收用户输入：read -p 提示信息 变量名</li><li>删除变量：unset 变量名</li></ol><h3 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h3><p>if 条件</p><p>then</p><p>​语句</p><p>elif 条件</p><p>then </p><p>​语句</p><p>else</p><p>​语句</p><p>fi</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>expr 数字 运算符 数字</p><h2 id="web控制台"><a href="#web控制台" class="headerlink" title="web控制台"></a>web控制台</h2><ol><li>启动cockpit.service服务</li><li>登录：通过ip地址:9090登录</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/2021/01/30/Maven/"/>
    <url>/2021/01/30/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>maven可以管理jar文件</p><p>自动下载jar文件和它的文档，源代码</p><p>管理jar文件的直接依赖</p><p>管理需要的jar版本</p><p>编译程序，测试程序，打包成jar、war文件，部署项目</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>maven的生命周期是清理、编译、测试、打包、安装、部署</p><p><strong>当执行命令时生命周期前边的命令也会依次执行</strong></p><p><strong>清理(mvn clean)</strong></p><p>将之前项目编译的东西删除</p><p><strong>编译(mvn compile)(mvn test-compile)</strong></p><p>那程序源代码编译为可执行代码文件，同时编译多个文件</p><p><strong>测试(mvn test)</strong></p><p>执行测试程序的代码，验证你的功能是否正确，同时测试验证多个代码和功能</p><p><strong>报告</strong></p><p>生成测试结果文件</p><p><strong>打包(mvn package)</strong></p><p>将项目的main目录中的所有class文件、配置文件等多有资源放到一个压缩文件中</p><p>java文件压缩为.jar，javaweb文件压缩为.war</p><p><strong>安装(mvn install)</strong></p><p>将打包的文件安装到maven本机仓库</p><p><strong>部署(mvn deploy)</strong></p><p>将安装好的程序进行部署</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>idea中要先完成目录结构，在点击Mark Directory设置目录属性</p><p>项目根目录：</p><p>​–src：源码</p><p>​–main：主工程代码</p><p>​–java：主工程代码</p><p>​–resources：需要使用的配置文件</p><p>​–webapp：web项目的资源目录</p><p>​–test：测试代码</p><p>​–java：测试代码</p><p>​–resources：测试需要的配置文件</p><p>​–pom.xml：项目的核心配置文件</p><h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><p>项目对象模型</p><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p>唯一值，在互联网中唯一标识一个项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>公司域名的倒写<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>自定义项目名称<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>自定义版本号<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>dependencies和dependency，相当于java中的import</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入项目依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>公司域名的倒写<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>自定义项目名称<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>自定义版本号<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>依赖的范围有compile、test、provided、默认采用compile</p><p>​compile：主程序（编译）、测试程序、打包、部署（运行）有效</p><p>​test：测试程序有效</p><p>​provided：主程序（编译）、测试程序有效（不参与打包和部署）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入项目依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>公司域名的倒写<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>自定义项目名称<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>自定义版本号<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--项目依赖的范围--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>依赖范围<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--maven自带属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在&lt;properties&gt;标签中进行声明定义&lt;标签名&gt;&lt;/标签名&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>属性值<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-comment">&lt;!--在pom.xml其他文职使用，$&#123;标签名&#125;--&gt;</span><br>$&#123;mysql.version&#125;<br></code></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>test2<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--插件版本--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="资源插件"><a href="#资源插件" class="headerlink" title="资源插件"></a>资源插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resoutces</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--此时maven下的默认导入资源目录不存在，不会导入资源目录只会导入设置的目录文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>要导入的资源存在的目录(src开始)<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>目录下的文件类型<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--不启用过滤器，&lt;include&gt;相当于过滤器--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resoutces</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h2><h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><p>非compile范围的依赖不能传递</p><p>若存在依赖冲突，则验证路径最短者优先，验证路径相同时先声明者优先</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>创建父工程，打包方式是pom</p><p>在父工程中统一管理junit依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--导入项目依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--项目依赖的范围--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在子工程中声明对父工程的引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zhq.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--以当前文件为基准的父工程的pom.xml文件的相对路径（可不写）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>../Parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将子工程的坐标和父工程的坐标中重复的内容删除，删除junit的版本号，使用父工程统一管理</p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>一键安装各个模块工程</p><p>在一个总模块工程中配置各个参与聚合的模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置聚合--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定各个子工程的相对路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../Hello<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2021/01/30/MySQL/"/>
    <url>/2021/01/30/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>windows中服务的启动和关闭：net stop mysql、net start mysql</p><p>Linux中<strong>启动&#x2F;关闭mysql</strong><br>service mysqld start<br>service mysqld stop<br>service mysqld restart</p><p>登录：mysql -u用户名 -p  输入密码</p><p>​mysql -h ip地址 -u用户名 -p 输入密码</p><p>退出：exit</p><h3 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h3><p>创建数据库语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database;<br></code></pre></td></tr></table></figure><p>展示所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>使用指定数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE database;<br></code></pre></td></tr></table></figure><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student(<br>    s_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">PRIMARY</span> KEY COMMENT<span class="hljs-string">&#x27;学生学号&#x27;</span>,<br>    s_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学生姓名 不能为空&#x27;</span>,<br>    s_sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学生性别&#x27;</span>,<br>    s_birthday DATETIME COMMENT<span class="hljs-string">&#x27;学生生日&#x27;</span>,<br>    s_class <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT<span class="hljs-string">&#x27;学生所在的班级&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>展示表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESCRIBE</span> <span class="hljs-keyword">table</span>;<br></code></pre></td></tr></table></figure><img src="/2021/01/30/MySQL/image-20220402230725522.png" alt="image-20220402230725522"><h3 id="对表的数据操作"><a href="#对表的数据操作" class="headerlink" title="对表的数据操作"></a>对表的数据操作</h3><h4 id="查看操作"><a href="#查看操作" class="headerlink" title="查看操作"></a>查看操作</h4><p>查看表中的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span>;<br></code></pre></td></tr></table></figure><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>...);<br></code></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">WHERE</span> cow <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">SET</span> cow1 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">WHERE</span> cow2 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>能够唯一确定表中的一条记录。我们通过给某个字段添加该约束，就可以使得该字段不重复且不为空。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> (<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user2 (<br>id <span class="hljs-type">INT</span>,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY(id, name)<br>);<br></code></pre></td></tr></table></figure><p>此处字段id和name一同作为主键，联合主键要求每个字段<strong>加起来不同即可</strong>（无需每个字段都不同）</p><h4 id="建表后添加主键"><a href="#建表后添加主键" class="headerlink" title="建表后添加主键"></a>建表后添加主键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ALERT <span class="hljs-keyword">TABLE</span> user2 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (id);<br></code></pre></td></tr></table></figure><p>或者通过<strong>修改字段</strong>的方式来添加主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ALERT <span class="hljs-keyword">TABLE</span> user2 MODIFY id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br></code></pre></td></tr></table></figure><h4 id="建表后删除主键"><a href="#建表后删除主键" class="headerlink" title="建表后删除主键"></a>建表后删除主键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ALERT <span class="hljs-keyword">TABLE</span> user2 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY (id);<br></code></pre></td></tr></table></figure><h3 id="自增约束"><a href="#自增约束" class="headerlink" title="自增约束"></a>自增约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user3 (<br>id <span class="hljs-type">INT</span> AUTO_INCREAMENT,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> user3 (name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;name&#x27;</span>); <span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入成功，自动生成了id<br></code></pre></td></tr></table></figure><p>自增约束一般<strong>与主键搭配使用</strong></p><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>约束修饰的字段不可以重复</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user4 (<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">UNIQUE</span>,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user4 (<br>id <span class="hljs-type">INT</span>,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br><span class="hljs-keyword">UNIQUE</span>(id, name)<br>);<br></code></pre></td></tr></table></figure><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user4 (<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>);<br></code></pre></td></tr></table></figure><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user4 (<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">10</span>,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>);<br></code></pre></td></tr></table></figure><p>如果我们插入字段时没有传值，就会<strong>使用默认值</strong></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>主表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> master(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><p>从表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> pet(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>master_id <span class="hljs-type">int</span>,<br><span class="hljs-keyword">FOREIGN</span> KEY(master_id) <span class="hljs-keyword">REFERENCES</span> master(id)<br>);<br></code></pre></td></tr></table></figure><ul><li>主表中没有的数据，在副表中是不可以使用的</li><li>主表中的数据被副标引用时，是不可以删除的</li></ul><h2 id="数据库的三大范式"><a href="#数据库的三大范式" class="headerlink" title="数据库的三大范式"></a>数据库的三大范式</h2><h3 id="多表之间的关系"><a href="#多表之间的关系" class="headerlink" title="多表之间的关系"></a>多表之间的关系</h3><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>可以在任意一方建立外键，指向一方的主键</p><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>在多的一个方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>多对多关系的实现需要借助第三张中间表，中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</p><p><strong>函数依赖</strong>：如果通过A属性（属性组）的值可以唯一确定B属性的值，则称B依赖于A</p><p><strong>完全函数依赖</strong>：如果A是一个属性组，则B属性值的确定需要依赖于A属性组中的所有属性值</p><p><strong>部分函数依赖</strong>：如果A是一个属性组，则B属性值的确定值需要依赖于A属性组中的某一些属性值</p><p><strong>传递函数依赖</strong>：如果通过A属性（属性组）的值可以唯一确定B属性的值，在通过B属性（属性组）的值可以唯一确定C属性的值，则称C传递函数依赖于A</p><p><strong>码</strong>：如果一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称该属性（属性组）为该表的码</p><p><strong>主属性</strong>：码属性组中的所有属性</p><p><strong>非主属性</strong>：除码属性组的其他属性</p><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p><strong>数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值</strong></p><p>建表如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCRAEMENT,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>province <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>city <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>area <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>street: <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><p>就是<strong>符合第一范式</strong>的，但<strong>并不是拆分的越详细越好</strong></p><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><ul><li>满足第一范式的条件下，第二范式要求：<strong>除主键外的每一列，都必须完全依赖于主键[ 消除部分函数依赖 ]</strong></li><li>如果出现不完全依赖，则只可能发生在<strong>联合主键</strong>的情况下</li></ul><p><strong>不满足第二范式的例子</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">order</span>(<br>product_id <span class="hljs-type">INT</span>,<br>customer_id <span class="hljs-type">INT</span>,<br>product_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>customer_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY(product_id, customer_id)<br>);<br></code></pre></td></tr></table></figure><p>此处product_name只依赖于product_id，customer_name只依赖于customer_id，是部分函数依赖</p><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p><strong>满足第二范式，除主键外的其他列之间不能有传递依赖关系[消除传递函数依赖]</strong></p><p><strong>不满足第三范式的例子</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">order</span>(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>product_id <span class="hljs-type">INT</span>,<br>customer_id <span class="hljs-type">INT</span>,<br>customer_phone <span class="hljs-type">INT</span><br>);<br></code></pre></td></tr></table></figure><p>此处customer_phone又依赖于customer_id，存在传递依赖关系，不满足第三范式</p><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><ul><li>查询student表中所有记录的s_name,s_sex和s_class列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_no,s_name,s_class <span class="hljs-keyword">FROM</span>  student;<br></code></pre></td></tr></table></figure><ul><li>查询教师所有的单位但是不重复的t_depart列——DISTINCT(列名)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>(t_depart) <span class="hljs-keyword">FROM</span> teacher;<br></code></pre></td></tr></table></figure><ul><li>查询score表中成绩在60-80之间所有的记录(sc_degree)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_no, sc_degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> sc_degree <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">80</span>;<br><span class="hljs-keyword">SELECT</span> s_no, sc_degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> sc_degree <span class="hljs-operator">&gt;</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> sc_degree <span class="hljs-operator">&lt;</span> <span class="hljs-number">80</span>;<br></code></pre></td></tr></table></figure><ul><li>查询score表中成绩为85, 86, 或者88的记录(sc_degree)——IN(结果集合)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_no, sc_degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> sc_degree <span class="hljs-keyword">IN</span>(<span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">88</span>);<br></code></pre></td></tr></table></figure><ul><li>查询student表中’95031’班或者性别为’女’的同学记录——OR</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_class <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95031&#x27;</span> <span class="hljs-keyword">OR</span> s_sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>以sc_degree降序查询score表中所有的记录——ORDER BY 列名 DESC</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_no, sc_degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sc_degree <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><ul><li>查询’95031’班的学生人数——COUNT(*)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_class <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95031&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>查询score表中的最高分数的学生号和课程号——MAX(列名)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_no, c_no <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> sc_degree <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(sc_degree) <span class="hljs-keyword">FROM</span> score);<br></code></pre></td></tr></table></figure><ul><li>查询每门课的平均成绩——AVG(列名)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c_no, <span class="hljs-built_in">AVG</span>(sc_degree) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c_no;<br></code></pre></td></tr></table></figure><ul><li>查询score表中至少有2名学生选修的,并且以3开头的课程的平均分——GROUP BY 列名 HAVING 条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c_no, <span class="hljs-built_in">AVG</span>(sc_degree) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c_no <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(c_no) <span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span> <span class="hljs-keyword">AND</span> c_no <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;3%&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>查询所有的学生 s_name , c_no, sc_degree列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_name, c_no, sc_degree <span class="hljs-keyword">FROM</span> student, score <span class="hljs-keyword">WHERE</span> student.s_no <span class="hljs-operator">=</span> score.s_no;<br></code></pre></td></tr></table></figure><ul><li>查询所有学生的s_no, c_name, sc_degree列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_no, c_name, sc_degree <span class="hljs-keyword">FROM</span> student, score, course <span class="hljs-keyword">WHERE</span> student.s_no <span class="hljs-operator">=</span> score.s_no <span class="hljs-keyword">AND</span> score.c_no <span class="hljs-operator">=</span> course.c_no;<br></code></pre></td></tr></table></figure><ul><li>查询所有的学生 s_name , c_name, sc_degree列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_name, c_name, sc_degree <span class="hljs-keyword">FROM</span> student, score, course <span class="hljs-keyword">WHERE</span> student.s_no <span class="hljs-operator">=</span> score.s_no <span class="hljs-keyword">AND</span> score.c_no <span class="hljs-operator">=</span> course.c_no;<br></code></pre></td></tr></table></figure><ul><li>查询班级是’95031’班学生每门课的平均分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c_no, <span class="hljs-built_in">AVG</span>(sc_degree) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> s_no <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> s_no <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_class <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95031&#x27;</span>) <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>(c_no);<br><br><span class="hljs-keyword">SELECT</span> c_no, <span class="hljs-built_in">AVG</span>(sc_degree) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> score <span class="hljs-keyword">AS</span> sc <span class="hljs-keyword">ON</span> s.s_no <span class="hljs-operator">=</span> sc.s_no <span class="hljs-keyword">WHERE</span> s_class <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95031&#x27;</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c_no;<br><br><span class="hljs-comment">--查询内容包含课程名（c_name）</span><br><span class="hljs-keyword">SELECT</span> c.c_no, c.c_name, <span class="hljs-built_in">AVG</span>(sc.sc_degree) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s, course <span class="hljs-keyword">AS</span> c, score <span class="hljs-keyword">AS</span> sc <span class="hljs-keyword">WHERE</span> s.s_no <span class="hljs-operator">=</span> sc.s_no <span class="hljs-keyword">AND</span> sc.c_no <span class="hljs-operator">=</span> c.c_no <span class="hljs-keyword">AND</span> s.s_class <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95031&#x27;</span>  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c.c_no;<br></code></pre></td></tr></table></figure><ul><li>查询选修”3-105”课程的成绩高于’109’号同学’3-105’成绩 的所有同学的记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s, score <span class="hljs-keyword">AS</span> sc <span class="hljs-keyword">WHERE</span> sc.sc_degree <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span> sc_degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> s_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;109&#x27;</span> <span class="hljs-keyword">AND</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-105&#x27;</span>) <span class="hljs-keyword">AND</span> sc.c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> s.s_no <span class="hljs-operator">=</span> sc.s_no;<br></code></pre></td></tr></table></figure><ul><li>查询所有与学号为108.101的同学同年出生的所有学生的s_no,s_name和s_birthday</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">YEAR</span>(s_birthday) <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(s_birthday) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_no <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-string">&#x27;108&#x27;</span>));<br></code></pre></td></tr></table></figure><ul><li>查询 张旭 教师任课的学生的成绩</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.s_name, sc.sc_degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">AS</span> sc, student <span class="hljs-keyword">AS</span> s <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> c_no <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> t_no <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> t_no <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> t_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张旭&#x27;</span>)) <span class="hljs-keyword">AND</span> s.s_no <span class="hljs-operator">=</span> sc.s_no;<br></code></pre></td></tr></table></figure><ul><li>查询95033班和95031班全体学生的记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_class <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;95033&#x27;</span>, <span class="hljs-string">&#x27;95031&#x27;</span>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> s_class;<br></code></pre></td></tr></table></figure><ul><li>查询存在85分以上成绩的c_name和对应的老师</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t_name, c_name <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">AS</span> c, teacher <span class="hljs-keyword">AS</span> t <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> c_no <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> sc_degree <span class="hljs-operator">&gt;</span> <span class="hljs-number">85</span>) <span class="hljs-keyword">AND</span> c.t_no <span class="hljs-operator">=</span> t.t_no;<br></code></pre></td></tr></table></figure><ul><li>查出所有’计算机系’ 教师所教课程的教师信息、课程信息及学生信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">AS</span> t, course <span class="hljs-keyword">AS</span> c, student <span class="hljs-keyword">AS</span> s, score <span class="hljs-keyword">AS</span> sc <br><span class="hljs-keyword">WHERE</span> s.s_no <span class="hljs-operator">=</span> sc.s_no <br><span class="hljs-keyword">AND</span> c.t_no <span class="hljs-operator">=</span> t.t_no <br><span class="hljs-keyword">AND</span> sc.c_no <span class="hljs-operator">=</span> c.c_no <br><span class="hljs-keyword">AND</span> t.t_no <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> t_no <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> t_depart <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机系&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>查询’计算机系’与’电子工程系’ 不同职称的教师的name和rof</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> t_depart <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机系&#x27;</span> <br><span class="hljs-keyword">AND</span> t_rof <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> t_rof <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> t_depart <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;电子工程系&#x27;</span>)<br><span class="hljs-keyword">UNION</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> t_depart <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;电子工程系&#x27;</span> <br><span class="hljs-keyword">AND</span> t_rof <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> t_rof <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> t_depart <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机系&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>查询选修编号为”3-105”课程且成绩<strong>至少</strong>高于选修编号为’3-245’同学的c_no,s_no和sc_degree,并且按照sc_degree从高到地次序排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> sc_degree <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ANY</span>(<span class="hljs-keyword">SELECT</span> sc_degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-245&#x27;</span>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sc_degree <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><ul><li>查询选修编号为”3-105”且成绩高于选修编号为”3-245”课程的同学c_no.s_no和sc_degree</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-105&#x27;</span> <br><span class="hljs-keyword">AND</span> sc_degree <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALL</span>(<span class="hljs-keyword">SELECT</span> sc_degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-245&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sc_degree <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><ul><li>查出学生的信息,课程名称,分数(s_name c_name,sc_degree)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.s_name, c.c_name, sc.sc_degree <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s, course <span class="hljs-keyword">AS</span> c, score <span class="hljs-keyword">AS</span> sc<br><span class="hljs-keyword">WHERE</span> s.s_no <span class="hljs-operator">=</span> sc.s_no<br><span class="hljs-keyword">AND</span> c.c_no <span class="hljs-operator">=</span> sc.c_no<br><span class="hljs-keyword">AND</span> sc.sc_degree <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALL</span>(<span class="hljs-keyword">SELECT</span> sc_degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-245&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sc_degree <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>总结:</p><ul><li><p>ANY 和 ALL</p><ul><li>ANY:表示任何一个就行了,如;数组A中的值比数组B中任何一个都要大,那么只要A和B中最小的比较就行了</li><li>ALL:表示所有都要比较,如:数组A中的值比数组B中所有的数都要大,那么A要和B中最大的值比较才行</li></ul></li><li><p>查询所有教师和同学的 name ,sex, birthday</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_name, s_sex, s_birthday <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> t_name, t_sex, t_birthday <span class="hljs-keyword">FROM</span> teacher;<br></code></pre></td></tr></table></figure><ul><li>查询所有’女’教师和’女’学生的name,sex,birthday</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_name, s_sex, s_birthday <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> t_name, t_sex, t_birthday <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> t_sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>查询成绩比该课程平均成绩低的同学的成绩表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">AS</span> a <span class="hljs-keyword">WHERE</span> sc_degree <span class="hljs-operator">&lt;</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sc_degree) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">AS</span> b <span class="hljs-keyword">WHERE</span> a.c_no <span class="hljs-operator">=</span> b.c_no);<br></code></pre></td></tr></table></figure><ul><li>查询成绩比该课程平均成绩低的同学的成绩表，并显示出学生name,课程name以及分数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.s_name <span class="hljs-keyword">AS</span> 学生姓名, c.c_name <span class="hljs-keyword">AS</span> 课程名, a.sc_degree <span class="hljs-keyword">AS</span> 成绩  <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">AS</span> a, student <span class="hljs-keyword">AS</span> s, course <span class="hljs-keyword">AS</span> c <br><span class="hljs-keyword">WHERE</span> sc_degree <span class="hljs-operator">&lt;</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sc_degree) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">AS</span> b <span class="hljs-keyword">WHERE</span> a.c_no <span class="hljs-operator">=</span> b.c_no)<br><span class="hljs-keyword">AND</span> s.s_no <span class="hljs-operator">=</span> a.s_no<br><span class="hljs-keyword">AND</span> c.c_no <span class="hljs-operator">=</span> a.c_no;<br></code></pre></td></tr></table></figure><ul><li>查询所有任课教师的t_name 和 t_depart(要在分数表中可以查得到)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> t_no <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> t_no <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> c_no <span class="hljs-keyword">FROM</span> score));<br></code></pre></td></tr></table></figure><ul><li>查出至少有2名男生的班号</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_class <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span> <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> s_class <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(s_no) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>查询student 表中 不姓”王”的同学的记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_name <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;王%&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>查询student 中每个学生的姓名和年龄(当前时间 - 出生年份)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_name <span class="hljs-keyword">AS</span> 姓名, (<span class="hljs-keyword">YEAR</span>(NOW())<span class="hljs-operator">-</span><span class="hljs-keyword">YEAR</span>(s_birthday)) <span class="hljs-keyword">AS</span> 年龄 <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure><ul><li>查询student中最大和最小的 s_birthday的值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(s_birthday), <span class="hljs-built_in">MIN</span>(s_birthday) <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure><ul><li>以班级号和年龄从大到小的顺序查询student表中的全部记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> s_class <span class="hljs-keyword">DESC</span>, (<span class="hljs-keyword">YEAR</span>(NOW()) <span class="hljs-operator">-</span> <span class="hljs-keyword">YEAR</span>(s_birthday)) <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><ul><li>查询”男”教师 及其所上的课</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.t_name, c.c_name <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">AS</span> t, course <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">WHERE</span> t.t_sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>  <span class="hljs-keyword">AND</span> t.t_no <span class="hljs-operator">=</span> c.t_no;<br></code></pre></td></tr></table></figure><ul><li>查询最高分同学的s_no c_no 和 sc_degree;</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_no <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> s_no <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> sc_degree  <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(sc_degree) <span class="hljs-keyword">FROM</span> score));<br></code></pre></td></tr></table></figure><ul><li>查询和”李军”同性别的所有同学的s_name</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_name <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_sex <span class="hljs-operator">=</span>  (<span class="hljs-keyword">SELECT</span> s_sex <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李军&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>查询和”李军”同性别并且同班的所有同学的s_name</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s_name <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_sex <span class="hljs-operator">=</span>  (<span class="hljs-keyword">SELECT</span> s_sex <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李军&#x27;</span>)<br><span class="hljs-keyword">AND</span> s_class <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> s_class <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> s_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李军&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>查询所有选修’计算机导论’课程的’男’同学的成绩表，并显示出s_name,c_name</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.s_name, c.c_name, sc.sc_degree <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s, score <span class="hljs-keyword">AS</span> sc, course <span class="hljs-keyword">AS</span> c <br><span class="hljs-keyword">WHERE</span> s.s_no <span class="hljs-operator">=</span> sc.s_no <span class="hljs-keyword">AND</span> c.c_no <span class="hljs-operator">=</span> sc.c_no <br><span class="hljs-keyword">AND</span> c.c_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机导论&#x27;</span><br><span class="hljs-keyword">AND</span> s.s_sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p><strong>没有创建外键时，可以使用内外查询将两个表的内容合并在一起查询</strong></p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> ... <span class="hljs-keyword">ON</span> ...<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">AS</span> p <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> card  <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> p.card_id <span class="hljs-operator">=</span> c.id;<br></code></pre></td></tr></table></figure><p><strong>内联查询：两张表通过某个字段合并起来，查询出相关数据</strong></p><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> ... <span class="hljs-keyword">ON</span> ...<br>或<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> ... <span class="hljs-keyword">ON</span> ...<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">AS</span> p <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> p.card_id <span class="hljs-operator">=</span> c.id;<br>或者<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">AS</span> p <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> p.card_id <span class="hljs-operator">=</span> c.id;<br></code></pre></td></tr></table></figure><p><strong>左外连接：</strong></p><ul><li>会把左表里的所有数据都取出来</li><li>对于右表，如果有数据就取出，如果没有就为空</li></ul><h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> ... <span class="hljs-keyword">ON</span> ...<br>或<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> ... <span class="hljs-keyword">ON</span> ...<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">AS</span> p <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> p.card_id <span class="hljs-operator">=</span> c.id;<br>或<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">AS</span> p <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> p.card_id <span class="hljs-operator">=</span> c.id;<br></code></pre></td></tr></table></figure><p><strong>右外连接</strong></p><ul><li>会把右表中的所有数据都取出来</li><li>对于左表，如果有数据就取出，如果没有就为空</li></ul><h5 id="三种连接的图解"><a href="#三种连接的图解" class="headerlink" title="三种连接的图解"></a>三种连接的图解</h5><img src="/2021/01/30/MySQL/image-20220402230403970.png" alt="image-20220402230403970" style="zoom:80%;"><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一个最小的不可分割的单元，事务能够保证一个业务的完整性</p><p>多条sql语句<strong>要么同时成功，要么同时失败</strong></p><h3 id="自动提交、手动提交和回滚"><a href="#自动提交、手动提交和回滚" class="headerlink" title="自动提交、手动提交和回滚"></a>自动提交、手动提交和回滚</h3><p>通过**ROLLBACK;**指令可以回滚，但需要关闭自动提交</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">SET</span> autocommit <span class="hljs-comment">= 0</span><br>查看自动提交状态<br>SELECT <span class="hljs-comment">@@autocommit</span>;<br></code></pre></td></tr></table></figure><p>但如果在进行操作之后，执行提交事务**COMMIT;**则无法再进行回滚（持久化）</p><h3 id="手动开启事务"><a href="#手动开启事务" class="headerlink" title="手动开启事务"></a>手动开启事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>;<br>或者<br><span class="hljs-keyword">START</span> TRANSACTION;<br></code></pre></td></tr></table></figure><h3 id="四大特征-ACID"><a href="#四大特征-ACID" class="headerlink" title="四大特征 ACID"></a>四大特征 ACID</h3><ul><li>原子性：事务是最小的单位，<strong>不可再分</strong></li><li>一致性：同一事务中的sql语句<strong>要么同时成功，要么同时失败</strong></li><li>隔离性：事务1和事务2之间具有隔离性</li><li>持久性：事物<strong>一旦结束</strong>（commit），就<strong>不可返回</strong>（rollback）</li></ul><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><ul><li>事务的隔离级别<ul><li>读未提交 read uncommitted</li><li>读已提交 read committed</li><li>可以重复读 repeatable read</li><li>串行化 serializable</li></ul></li></ul><img src="/2021/01/30/MySQL/image-20220402230523842.png" alt="image-20220402230523842" style="zoom:80%;"><ul><li>事务的并发问题<ul><li>脏读：事务A读取了事务B更新的数据，然后<strong>B回滚操作</strong>，那么<strong>A读取到的数据是脏数据</strong></li><li>不可重复读：事务 A 多次读取同一数据，事务B在事务A多次读取的过程中，对数据作了<strong>更新并提交</strong>，<strong>导致事务A多次读取同一数据时，结果不一致</strong></li><li>幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读</li></ul></li></ul><p><strong>总结</strong>：<strong>不可重复读侧重于修改，幻读侧重于新增或删除</strong></p><p> 解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p><ul><li>查看数据库的隔离级别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">版本 <span class="hljs-number">5.</span>x<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@global</span>.tx_isolation;<br><br>版本 <span class="hljs-number">8.0</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@global</span>.transaction_isolation;<br></code></pre></td></tr></table></figure><ul><li>修改数据库的隔离级别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> transaction isolation level read committed;<br></code></pre></td></tr></table></figure><h2 id="BeanUtils工具类"><a href="#BeanUtils工具类" class="headerlink" title="BeanUtils工具类"></a>BeanUtils工具类</h2><p>简化数据封装，用于封装javaBean的</p><h3 id="javaBean"><a href="#javaBean" class="headerlink" title="javaBean"></a>javaBean</h3><p>标准java类</p><ol><li>类必须被public修饰</li><li>必须提供空参public修饰的构造函数</li><li>成员变量必须使用private修饰</li><li>提供公共public修饰的setter和getter方法</li></ol><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>ssetter和getter方法截取后的产物，例如getUsername() —-username就是属性</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li>setProperty() 设置bean的属性值      </li><li>getProperty()获取bean的属性值        </li><li>populate(Object obj, Map map)将map集合的键值对信息封装到JavaBean对象中</li></ol><p>注意：需要导入commons-beanutils-1.8.3.jar该包需要，两个jar包的支持：commons-collections-3.2.1.jar，commons-logging-1.1.1.jar</p><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h2><ul><li><p>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</p></li><li><p>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</p></li></ul><h3 id="两种思想"><a href="#两种思想" class="headerlink" title="两种思想"></a>两种思想</h3><h4 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h4><p>将数据库的实现类封装成接口，直接使用接口</p><h4 id="ORM编程思想"><a href="#ORM编程思想" class="headerlink" title="ORM编程思想"></a>ORM编程思想</h4><p>object relationship mapping 对象关系映射</p><p>一个数据表对应一个java类</p><p>表中一条记录对应java类的一个对象</p><p>表中一个字段对应java类的一个属性</p><h3 id="两种技术"><a href="#两种技术" class="headerlink" title="两种技术"></a>两种技术</h3><h4 id="ResultSetMetaData元数据"><a href="#ResultSetMetaData元数据" class="headerlink" title="ResultSetMetaData元数据"></a>ResultSetMetaData元数据</h4><ol><li>getColumnCount()：获取列数</li><li>getColumnLabel()：获取列别名（没有别名获取的是列的名称）</li></ol><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><ol><li>创建对应运行时类的对象——newIncentive()</li><li>在运行时，动态的调用指定运行时类的属性，方法</li></ol><h3 id="数据库与SQL类型转化"><a href="#数据库与SQL类型转化" class="headerlink" title="数据库与SQL类型转化"></a>数据库与SQL类型转化</h3><p><img src="https://dot-grill-f98.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F050ac75a-59c7-4787-a78d-97b29e8991bf%2FUntitled.png?table=block&id=85c87d1a-bfae-4711-a62e-9c4e3db7ad63&spaceId=65247838-fa1c-443f-8939-5945fc1748c5&width=1950&userId=&cache=v2" alt="img"></p><h2 id="JDBC编写步骤"><a href="#JDBC编写步骤" class="headerlink" title="JDBC编写步骤"></a>JDBC编写步骤</h2><img src="/2021/01/30/MySQL/image-20220402230638657.png" alt="image-20220402230638657" style="zoom:80%;"><p>ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p><h3 id="加载驱动到项目"><a href="#加载驱动到项目" class="headerlink" title="加载驱动到项目"></a>加载驱动到项目</h3><ul><li>在项目文件下创建lib文件夹，拷贝驱动文件到lib文件夹下</li><li>添加依赖：选中对应模块或者项目，将lib中的jar包添加到模块或者项目中</li></ul><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//1. 通过类加载器 获取 数据库文件中的配置信息</span><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> JDBCTest1.class.getClassLoader();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> loader.getResourceAsStream(<span class="hljs-string">&quot;jdbcTest.properties&quot;</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>info.load(is);<br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> info.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> info.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> info.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> info.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br><br><span class="hljs-comment">//2. 通过反射加载驱动类</span><br>Class.forName(driver);<br><span class="hljs-comment">//3. 连接数据库</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>System.out.println(con);<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件<strong>Properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ks</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">4213</span><br><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p><strong>好处</strong>：实现了代码与数据库连接信息的分离，解耦 ；如果需要修改配置文件信息，可以避免程序重新打包</p><h2 id="JDBC相关操作"><a href="#JDBC相关操作" class="headerlink" title="JDBC相关操作"></a>JDBC相关操作</h2><h3 id="JDBC相关类"><a href="#JDBC相关类" class="headerlink" title="JDBC相关类"></a>JDBC相关类</h3><h4 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h4><p>驱动管理对象</p><p>作用：</p><ol><li>注册驱动：告诉程序使用哪个数据库驱动jar（一般使用Class.forName(“驱动”)）</li><li>获取数据库连接：DriverManager.getConnection(String url, String user, String password)</li></ol><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>数据库连接对象</p><ol><li>获取执行sql语句的对象：connection.createStatement()或connection.prepareStatement(String sql)</li><li>管理事务：<ol><li>开启事务：setAutoCommit(false)</li><li>提交事务：commit()</li><li>回滚事务：rollback()</li></ol></li></ol><h4 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h4><p>结果集对象，封装查询结果</p><ol><li>resultSet.next()：游标向下移动</li><li>resultSet.getXxx()：获取数据</li></ol><h4 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h4><ul><li>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</li><li>Statement 接口中定义了下列方法用于执行 SQL 语句：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">excuteUpdate</span><span class="hljs-params">(String sql)</span>：执行更新操作INSERT、UPDATE、DELETE<br>ResultSet <span class="hljs-title function_">executeQuery</span><span class="hljs-params">(String sql)</span>：执行查询操作SELECT<br></code></pre></td></tr></table></figure><ul><li>但是使用Statement操作数据表存在弊端：</li></ul><h5 id="问题一：存在拼串操作，繁琐"><a href="#问题一：存在拼串操作，繁琐" class="headerlink" title="问题一：存在拼串操作，繁琐"></a><strong>问题一：存在拼串操作，繁琐</strong></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;SELECT user,password FROM user_table WHERE USER = &#x27;&quot; <span class="hljs-operator">+</span> userName <span class="hljs-operator">+</span> &quot;&#x27; AND PASSWORD = &#x27;&quot; <span class="hljs-operator">+</span> password <span class="hljs-operator">+</span> &quot;&#x27;&quot;;<br></code></pre></td></tr></table></figure><h5 id="问题二：存在SQL注入问题"><a href="#问题二：存在SQL注入问题" class="headerlink" title="问题二：存在SQL注入问题"></a><strong>问题二：存在SQL注入问题</strong></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-keyword">user</span>:<span class="hljs-number">1</span><span class="hljs-string">&#x27; OR </span><br><span class="hljs-string">#password:=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; = &#x27;</span><span class="hljs-number">1</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>,PASSWORD <span class="hljs-keyword">FROM</span> user_table <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">OR</span> <span class="hljs-string">&#x27; AND PASSWORD = &#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">OR</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement 取代 Statement 就可以了。</p><h4 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h4><p>PreparedStatement 是一个特殊的Statement对象</p><h5 id="PreparedStatement对比Statement"><a href="#PreparedStatement对比Statement" class="headerlink" title="PreparedStatement对比Statement"></a>PreparedStatement对比Statement</h5><ul><li>拼串和SQL注入的问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.Statement中，直接输入SQL语句进行执行，就会出现SQL注入问题</span><br>SELECT USER,PASSWORD FROM user_table <span class="hljs-type">WHERE</span> <span class="hljs-variable">USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> OR <span class="hljs-string">&#x27; AND PASSWORD = &#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span> OR <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span><br><br><span class="hljs-comment">//2.在PreparStatement中则是先进行SQL的预编译, 使用占位符，不用拼串，后续填充占位符，也不会改变SQL原有的逻辑，解决SQL注入</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM admin WHERE username = ? AND PASSWORD = ?;&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br></code></pre></td></tr></table></figure><ul><li><p>Statement无法操作Blob类型的数据</p></li><li><p>repaerStatement便于批量操作，Statement批量操作：执行一次SQL语句，需要校验一次SQL，repaerStatement批量操作：无论执行多少次SQL，都只校验一次，效率更高</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong>语句在被DBServer的编译器编译后的执行代码被缓存下来，下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</p></li></ul><h4 id="ResultSetMetaData"><a href="#ResultSetMetaData" class="headerlink" title="ResultSetMetaData"></a>ResultSetMetaData</h4><p>结果集的元数据：ResultSetMetaData rsmd &#x3D; res.getMetaData();</p><p>获取列数：</p><p>​int columnCount &#x3D; rsmd.getColumnCount();</p><p> 获取列名：</p><p>​String columnName &#x3D; rsmd.getColumnLabel(i + 1);</p><h3 id="CURD操作"><a href="#CURD操作" class="headerlink" title="CURD操作"></a>CURD操作</h3><ul><li>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</li><li>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：<ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。</li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul></li></ul><img src="/2021/01/30/MySQL/image-20220402230653825.png" alt="image-20220402230653825" style="zoom:80%;"><h4 id="增-x2F-删-x2F-改：通用"><a href="#增-x2F-删-x2F-改：通用" class="headerlink" title="增&#x2F;删&#x2F;改：通用"></a>增&#x2F;删&#x2F;改：通用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commonUpdate</span><span class="hljs-params">(String sql, Object... args)</span>&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//数据库建立连接</span><br>        conn = JDBCUtils.getConnection();<br>        <span class="hljs-comment">//预编译SQL</span><br>        ps = conn.prepareStatement(sql);<br>        <span class="hljs-comment">//填充占位符</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            ps.setObject(i+<span class="hljs-number">1</span>,args[i]);<br>        &#125;<br>        <span class="hljs-comment">//执行SQL</span><br>        ps.execute();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭连接</span><br>        JDBCUtils.closeResource(conn,ps);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查询：通用"><a href="#查询：通用" class="headerlink" title="查询：通用"></a>查询：通用</h4><ul><li><p>查询与增删改的区别，查询返回结果集ResultSet</p></li><li><p>使用next方法检查结果集中是否存在数据</p></li><li><p>有数据则指针下移看，指向数据，无数据则指针不下移</p><p>resultSet.next方法类似iterate.hasNext 与 iterate.next的功能综合版本，但是不会返回数据</p></li><li><p>是通过索引获取当前行的数据</p></li><li><p>推荐将存储到对象之中</p></li></ul><p><strong>针对单表进行查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Customer 表进行查询</span><br><span class="hljs-keyword">public</span> Customer <span class="hljs-title function_">CommonqueryTest</span><span class="hljs-params">(String sql,Object... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//连接数据库</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-comment">//预编译SQL</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><span class="hljs-comment">//填充占位符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>ps.setObject(i+<span class="hljs-number">1</span>,args[i]);<br>&#125;<br><span class="hljs-comment">//返回结果集</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ps.executeQuery();<br><span class="hljs-comment">//获取结果集的元数据</span><br><span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> res.getMetaData();<br>    <span class="hljs-comment">//获取结果集的列数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br><span class="hljs-comment">//判断结果集中是否存在对象，将指针指向数据行</span><br><span class="hljs-keyword">if</span>(res.next())<br>&#123;<br><span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br><span class="hljs-comment">//获取列值</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">columnValue</span> <span class="hljs-operator">=</span> res.getObject(i + <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">//获取列名（属性名）</span><br><span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//通过反射修改类的属性值</span><br>                <span class="hljs-comment">//反射类字段值</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Customer.class.getDeclaredField(columnName);<br><span class="hljs-comment">//访问私有字段</span><br>field.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//设置值</span><br>field.set(customer,columnValue);<br>&#125;<br><span class="hljs-keyword">return</span> customer;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>针对通用表进行查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">CommonqueryTest2</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql,Object... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//连接数据库</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-comment">//预编译</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><span class="hljs-comment">//填充占位符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>ps.setObject(i+<span class="hljs-number">1</span>,args[i]);<br>&#125;<br><span class="hljs-comment">//查询获取结果集</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ps.executeQuery();<br><span class="hljs-comment">//获取结果集的元数据</span><br><span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> res.getMetaData();<br><span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br><span class="hljs-comment">//获取结果集</span><br><span class="hljs-keyword">if</span>(res.next())<br>&#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br><span class="hljs-comment">//获取列名、值</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">columnValue</span> <span class="hljs-operator">=</span> res.getObject(i + <span class="hljs-number">1</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">//getColumnLabel：先获取别名，没有别名获取字段名</span><br><span class="hljs-comment">//反射类字段值</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(columnName);<br><span class="hljs-comment">//访问私有字段</span><br>field.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//设置值</span><br>field.set(t,columnValue);<br>&#125;<br><span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>返回查询的集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">CommonqueryTest3</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//连接数据库</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-comment">//预编译</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><span class="hljs-comment">//填充占位符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>ps.setObject(i+<span class="hljs-number">1</span>,args[i]);<br>&#125;<br><span class="hljs-comment">//查询获取结果集</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ps.executeQuery();<br><span class="hljs-comment">//获取结果集的元数据</span><br><span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> res.getMetaData();<br><span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>ArrayList&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//获取结果集</span><br><span class="hljs-keyword">while</span>(res.next())<br>&#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br><span class="hljs-comment">//获取列名、值</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">columnValue</span> <span class="hljs-operator">=</span> res.getObject(i + <span class="hljs-number">1</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//反射类字段值</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(columnName);<br><span class="hljs-comment">//访问私有字段</span><br>field.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//设置值</span><br>field.set(t,columnValue);<br>&#125;<br>list.add(t);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>ResultSetMetaData ：结果集的元数据：对结果集进行描述的数据 </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>根据ORM编程思想，数据库一行数据对应一个Java对象，数据库一个字段对应Java类的一个属性，所以当数据库字段与Java属性名不一致会报错</p><p><strong>数据库字段名要与Java类中属性名不一致：则必须在SQL语句中给字段起别名</strong></p><p><strong>思维导图</strong></p><p><img src="/2021/01/30/MySQL/image-20220402230725522.png" alt="image-20220402230725522" style="zoom:80%;"><img src="/2021/01/30/MySQL/01/30/MySQL/image-20220402230801923.png" class title="image-20220402230801923"></p><h3 id="JDBCUtils工具类"><a href="#JDBCUtils工具类" class="headerlink" title="JDBCUtils工具类"></a>JDBCUtils工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtils</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//通过类加载器 获取 数据库文件中的配置信息</span><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> loader.getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>info.load(is);<br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> info.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> info.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> info.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> info.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br><span class="hljs-comment">//通过反射加载驱动类</span><br>Class.forName(driver);<br><span class="hljs-comment">//连接数据库</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br><span class="hljs-keyword">return</span> con;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeResource</span><span class="hljs-params">(Connection con, Statement ps, ResultSet re)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (re != <span class="hljs-literal">null</span>)<br>re.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>throwables.printStackTrace();<br>&#125;<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>)<br>ps.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>throwables.printStackTrace();<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (con != <span class="hljs-literal">null</span>)<br>con.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>throwables.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="操作Blob"><a href="#操作Blob" class="headerlink" title="操作Blob"></a>操作Blob</h3><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p><img src="/2021/01/30/MySQL/image-20220402230806064.png" alt="image-20220402230806064" style="zoom:80%;"></li><li><p>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</p></li><li><p>需要注意的是：如果存储的文件过大，数据库的性能会下降。</p></li><li><p>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数：<strong>max_allowed_packet&#x3D;16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</p></li></ul><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> ~~<span class="hljs-keyword">throws</span> Exception~~ &#123; <span class="hljs-comment">//正式应该使用Try catch进行操作</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>        <span class="hljs-comment">//改使用update进行操作</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO customers(NAME,email,photo) VALUES(?,?,?);&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>ps.setObject(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br>ps.setObject(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;Tom@163.com&quot;</span>);<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a1.jpg&quot;</span>));<br>ps.setBlob(<span class="hljs-number">3</span>,is);<br>ps.execute();<br>is.close();<br>JDBCUtils.closeResource(conn,ps);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> ~~<span class="hljs-keyword">throws</span> Exception~~ &#123; <span class="hljs-comment">//正式应该使用Try catch进行操作</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT NAME,email,photo FROM customers WHERE id = ?;&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>ps.setObject(<span class="hljs-number">1</span>,<span class="hljs-number">27</span>);<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> ps.executeQuery();<br><span class="hljs-keyword">if</span>(rs.next())&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;Name&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;email&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Name: &quot;</span> + name + <span class="hljs-string">&quot;email: &quot;</span> + email);<br><br><span class="hljs-comment">//将Blob类型的数据保存到本地</span><br><span class="hljs-type">Blob</span> <span class="hljs-variable">photo</span> <span class="hljs-operator">=</span> rs.getBlob(<span class="hljs-string">&quot;photo&quot;</span>);<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> photo.getBinaryStream();<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;pic.jpg&quot;</span>));<br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>fis.write(buffer,<span class="hljs-number">0</span>,len);<br>&#125;<br>fis.close();<br>is.close();<br>&#125;<br>JDBCUtils.closeResource(conn,ps);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>使用Statement进行批量添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO goods(NAME) VALUES(&#x27;Jack_&quot;</span>+i+<span class="hljs-string">&quot;&#x27;)&quot;</span>;<br>        st.execute(sql);<br>    &#125;<br>    JDBCUtils.closeResource(conn,st);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>使用PrepaerStatement进行批量添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO goods(NAME) VALUES(?);&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>        ps.setObject(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;jack_&quot;</span>+i);<br>        ps.execute();<br>    &#125;<br>    JDBCUtils.closeResource(conn,ps);<br>&#125;<br></code></pre></td></tr></table></figure><p>方式一：每次都会创建字符串变量，并且对SQL进行检查 </p><p>方式二：创建SQL缓存，不会多次创建，只对SQL检查一次 </p><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><p>通过将需要执行的SQL缓存下来，批量执行，提升效率，5.1.7之前不支持批处理</p><ul><li><p>使用 <strong>addBatch() &#x2F; executeBatch() &#x2F; clearBatch()</strong></p></li><li><p>mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</p><p><code>?rewriteBatchedStatements=true</code> 写在配置文件的url后面</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO goods(NAME) VALUES(?)&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100000</span>; i++) &#123;<br>        ps.setObject(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;jack_&quot;</span>+i);<br>        <span class="hljs-comment">//缓存SQL</span><br>        ps.addBatch();<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">500</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//将缓存的SQL批量执行</span><br>            ps.executeBatch();<br>            <span class="hljs-comment">//清理缓存</span><br>            ps.clearBatch();<br>        &#125;<br>    &#125;<br>    JDBCUtils.closeResource(conn,ps);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h4><p>将自动提交事务关闭，全部SQL执行完毕之后再提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>    <span class="hljs-comment">//关闭事务自动提交</span><br>    conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO goods(NAME) VALUES(?)&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000000</span>; i++) &#123;<br>        ps.setObject(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;jack_&quot;</span>+i);<br>        ps.addBatch();<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">500</span> == <span class="hljs-number">0</span>)&#123;<br>            ps.executeBatch();<br>            ps.clearBatch();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//提交事务</span><br>    conn.commit();<br>    JDBCUtils.closeResource(conn,ps);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h2><ul><li>数据一旦提交，就不可回滚</li><li>哪些操作会导致数据的自动提交<ol><li>DDL操作一旦执行，就会自行提交 【set_autocommit &#x3D; false 对DDL操作无效】</li><li>DML默认情况下一旦执行，就会自动提交</li><li>默认再关闭连接时，会自动的提交数据</li></ol></li></ul><h3 id="模拟事务"><a href="#模拟事务" class="headerlink" title="模拟事务"></a>模拟事务</h3><ul><li>调用 Connection 对象的 **setAutoCommit(false)**取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit()</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback()</strong> 方法回滚事务</li><li>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//1. 获取连接</span><br>        conn = JDBCUtills.getConnection();<br>        <span class="hljs-comment">//2. 开启事务</span><br>        conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE user_table SET balance = 1100 WHERE USER = ?&quot;</span>;<br>        <span class="hljs-comment">//3. 进行数据库操作</span><br>        updateWithTx(conn,sql1,<span class="hljs-string">&quot;AA&quot;</span>);<br>        <span class="hljs-comment">//模拟网络异常</span><br>        System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE user_table SET balance = 900 WHERE USER = ?&quot;</span>;<br>        updateWithTx(conn,sql2,<span class="hljs-string">&quot;BB&quot;</span>);<br>        <span class="hljs-comment">//4.提交事务</span><br>        conn.commit();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//5.异常回滚</span><br>            conn.rollback();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//6.恢复DML自动提交,主要针对数据库连接池</span><br>            conn.setAutoCommit(<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//7.关闭资源</span><br>        JDBCUtills.closeResource(conn,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//通用更新操作，再updateWithTx方法之中不要进行数据库的关闭 数据库连接的关闭会导致事务自动提交</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateWithTx</span><span class="hljs-params">(Connection conn,String sql, Object... args)</span>&#123;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ps = conn.prepareStatement(sql);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            ps.setObject(i+<span class="hljs-number">1</span>,args[i]);<br>        &#125;<br>        ps.execute();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        JDBCUtills.closeResource(<span class="hljs-literal">null</span>,ps);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE，默认的事务隔离级别为: <strong>READ COMMITED</strong></li><li>Mysql 支持 4 种事务隔离级别：Mysql 默认的事务隔离级别为: REPEATABLE READ</li></ul><h3 id="隔离级别问题"><a href="#隔离级别问题" class="headerlink" title="隔离级别问题"></a>隔离级别问题</h3><img src="/2021/01/30/MySQL/image-20220402230843770.png" alt="image-20220402230843770" style="zoom:80%;"><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p> T2在T1读取数据的时候，对数据进行了更新，后续对数据进行了回滚操作 所以T1在后续的两次读取中看到的数据并不相同.</p><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>当T1第一次读取数据时与第二次读取数据中间的时间 T2对数据进行了更新，并且提交 然后T1再对数据进行读取，发现两次数据并不一致。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>当T1第一次读取数据后，T2插入了一条新数据，并且提交 T1再对数据进行了更新，发现受影响行数与第一次读取到数据行数不一致</p><h2 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h2><h3 id="Dao相关实现类"><a href="#Dao相关实现类" class="headerlink" title="Dao相关实现类"></a>Dao相关实现类</h3><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD，而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级</li></ul><h3 id="BaseDao的实现"><a href="#BaseDao的实现" class="headerlink" title="BaseDao的实现"></a>BaseDao的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*通用的增删改查操作</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDao</span> &#123;<br>    <span class="hljs-comment">//事务通用多条数据查询</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Connection conn, Class&lt;T&gt; clazz, String sql, Object... args)</span> &#123;<br>        List&lt;T&gt; list = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepareStatement(sql);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>            &#125;<br>            rs = ps.executeQuery();<br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>            list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">columnLabel</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br>                    <span class="hljs-comment">//反射类所有字段，并且赋值</span><br>                    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(columnLabel);<br>                    field.setAccessible(<span class="hljs-literal">true</span>);<br>                    field.set(t, value);<br>                &#125;<br>                list.add(t);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtills.closeResource(<span class="hljs-literal">null</span>, ps, rs);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">//事务通用更新</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-type">int</span> <span class="hljs-title function_">getUpdate</span><span class="hljs-params">(Connection conn, String sql, Object... args)</span> &#123;<br>        List&lt;T&gt; list = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepareStatement(sql);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>            &#125;<br>            row = ps.executeUpdate();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtills.closeResource(<span class="hljs-literal">null</span>, ps);<br>            <span class="hljs-keyword">return</span> row;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//事务通用一条数据查询</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getValue</span><span class="hljs-params">(Connection conn, String sql, Object... args)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepareStatement(sql);<br>            val = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>            &#125;<br>            rs = ps.executeQuery();<br>            <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>                val = rs.getObject(<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtills.closeResource(<span class="hljs-literal">null</span>, ps, rs);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (T) val;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Dao接口"><a href="#Dao接口" class="headerlink" title="Dao接口"></a>Dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CustomerDao</span> &#123;<br><br>    <span class="hljs-comment">//将cust对象添加到数据库之中</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Connection conn, Customer cust)</span>;<br><br>    <span class="hljs-comment">//根据id号删除数据库中customer数据</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Connection conn, <span class="hljs-type">int</span> id)</span>;<br>    <br>    <span class="hljs-comment">//根据id号修改数据库中customer数据</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(Connection conn,Customer cust, <span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//根据id号查詢数据库中customer数据</span><br>    Customer <span class="hljs-title function_">getCustomerById</span><span class="hljs-params">(Connection conn, <span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//查询数据库customer表中所有的数据</span><br>    List&lt;Customer&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">(Connection conn)</span>;<br><br>    <span class="hljs-comment">//查询数据库customer表中所有的行数</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">(Connection conn)</span>;<br><br>    <span class="hljs-comment">//查询数据库customer表中年龄最大的生日</span><br>    Date <span class="hljs-title function_">getMaxBirth</span><span class="hljs-params">(Connection conn)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Dao接口实现类"><a href="#Dao接口实现类" class="headerlink" title="Dao接口实现类"></a>Dao接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CustomerDao</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Connection conn, Customer cust)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into customers(name,email,birth) values(?,?,?)&quot;</span>;<br>        getUpdate(conn,sql,cust.getName(),cust.getEmial(),cust.getBirth());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Connection conn, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from customers where id = ?&quot;</span>;<br>        getUpdate(conn,sql,id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(Connection conn, Customer cust, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update customers set name = ?, email = ?, birth = ? where id = ?&quot;</span>;<br>        getUpdate(conn,sql,cust.getName(),cust.getEmial(),cust.getBirth(),id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Customer <span class="hljs-title function_">getCustomerById</span><span class="hljs-params">(Connection conn, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name, email, birth from customers where id = ?&quot;</span>;<br>        List&lt;Customer&gt; list = getInstance(conn, Customer.class, sql, id);<br>        <span class="hljs-keyword">return</span> list.size() &gt; <span class="hljs-number">0</span> ? list.get(<span class="hljs-number">0</span>) :<span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Customer&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">(Connection conn)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name, email, birth from customers&quot;</span>;<br>        List&lt;Customer&gt; list = getInstance(conn, Customer.class, sql);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">(Connection conn)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from customers&quot;</span>;<br>        <span class="hljs-keyword">return</span>  getValue(conn,sql);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getMaxBirth</span><span class="hljs-params">(Connection conn)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select max(birth) from customers&quot;</span>;<br>        <span class="hljs-keyword">return</span> getValue(conn,sql);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>BaseDao</strong>：实现对表的通用操作：通用增删改查</p><p><strong>Dao接口</strong>：实现对于某个表的的抽象方法</p><p><strong>Dao接口实现类</strong>：实现接口中的抽象方法</p><p>BaseDao类中增删改查的方法，没有关闭conn的操作 conn关闭会自动提交事务</p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>数据库连接池技术</p><ul><li><p><strong>数据库连接池的基本思想</strong>：为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li><li><p>工作原理</p></li></ul><img src="/2021/01/30/MySQL/image-20220402230859968.png" alt="image-20220402230859968" style="zoom:80%;"><p><strong>数据库连接池技术的优点</strong></p><ol><li>提高程序的响应速度（减少创建连接的响应时间）</li><li>降低资源的消耗（重复使用已经创建好的连接）</li><li>便于连接的管理</li></ol><p><strong>多种开源的数据库连接池</strong></p><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以。hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li><strong>DataSource</strong> 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池，DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h3 id="c3p0数据库连接池"><a href="#c3p0数据库连接池" class="headerlink" title="c3p0数据库连接池"></a>c3p0数据库连接池</h3><p>连接方式1：不推荐</p><ol><li>加载启动，导入c3p0的jar包</li><li>c3p0连接数据库</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">cpds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>        cpds.setDriverClass( <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> ); <span class="hljs-comment">//loads the jdbc driver</span><br>        cpds.setJdbcUrl( <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span> );<br>        cpds.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>        cpds.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br><br>        <span class="hljs-comment">//设置数据库连接池</span><br>        <span class="hljs-comment">//设置初始化数据库连接池的连接数</span><br>        cpds.setInitialPoolSize(<span class="hljs-number">10</span>);<br>        <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> cpds.getConnection();<br><br><span class="hljs-comment">//销毁c3p0连接池，一般不销毁</span><br>        <span class="hljs-comment">//DataSources.destroy( cpds );</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>连接方式2：推荐  使用xml配置文件连接</p><p>c3p0-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> standalone=<span class="hljs-string">&quot;no&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- This app is massive! --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">named-config</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;C3po&quot;</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatements&quot;</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">named-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据库连接池-饿汉式</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">cpds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>(<span class="hljs-string">&quot;C3po&quot;</span>);<br><span class="hljs-comment">//返回连接</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> cpds.getConnection();<br>    <span class="hljs-keyword">return</span> conn;<br>&#125;<br></code></pre></td></tr></table></figure><p>💡创建c3p0-config.xml配置文件的方式进行数据库的连接，c3p0-config.xml配置文件创建在src项目根目录下会自动加载配置文件</p><h3 id="dbcp数据库连接池"><a href="#dbcp数据库连接池" class="headerlink" title="dbcp数据库连接池"></a>dbcp数据库连接池</h3><ul><li>加载驱动，导入dbcp的jar包</li><li>dbcp依赖pool，需要导入pool的jar包</li></ul><p>方式一：硬编码，不推荐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">//创建dbcp的数据库连接池</span><br>    <span class="hljs-type">BasicDataSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicDataSource</span>();<br>    source.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>    source.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>    source.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>    source.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);<br>    <span class="hljs-comment">//设置数据库连接池</span><br>    source.setInitialSize(<span class="hljs-number">10</span>);<br>    source.setMaxActive(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：配置文件，推荐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//读取properties配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> ClassLoader.getSystemResourceAsStream(<span class="hljs-string">&quot;dbcp2.properties&quot;</span>);<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    info.load(is);<br>    <span class="hljs-comment">//创建dbcp的数据库连接池</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> BasicDataSourceFactory.createDataSource(info);<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br>    System.out.println(conn);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⭐druid数据库连接池"><a href="#⭐druid数据库连接池" class="headerlink" title="⭐druid数据库连接池"></a>⭐druid数据库连接池</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ks</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">4213</span><br><span class="hljs-comment">##初始化连接数量</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">5</span><br><span class="hljs-comment">##最大连接数量</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">10</span><br><span class="hljs-comment">##最大等待时间</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">3000</span><br></code></pre></td></tr></table></figure><ul><li>加载驱动，导入druid的jar包</li><li>方式一：不推荐，硬编码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        <span class="hljs-comment">//硬编码加载</span><br>        source.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        source.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        source.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);<br>        source.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br>        <span class="hljs-comment">//多态调用连接方法</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> source;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> s1.getConnection();<br>        System.out.println(conn);<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>方式二：推荐，配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//类加载器</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> ClassLoader.getSystemResourceAsStream(<span class="hljs-string">&quot;dbcp.properties&quot;</span>);<br>        info.load(is);<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(info);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br>        System.out.println(conn);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><p>提供了一个JDBCTemplate对象</p><ol><li><p>导入jar包</p></li><li><p>创建jdbcTemplate对象，依赖数据源DataSource</p><p>jdbcTemplate template &#x3D; new jdbcTemplate(ds);</p></li><li><p>调用jdbctemplate的方法是来完成操作，直接执行sql语句</p><p>update(sql, ?, ?)：执行增删改操作</p><p>queryForMap()：查询结果将结果封装为Map集合；查询的结果只能为1</p><p>queryForList()：查询结果将结果封装为List集合；将查询的每个结果封装为Map集合</p><p>query()：将结果封装为JavaBean对象；利用BeanPropertyRowMapper实现类</p><p>queryForObject()：将结果封装为对象</p></li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><p>相比c3p0、dbcp数据库连接池，更加推荐druid</p></li><li><p>获取数据库连接池的方法时，推荐使用单例模式（饱汉式&#x2F;饿汉式）</p></li><li><p>注意：如果在servlet中使用数据库连接池，要将数据库连接池的jar包导入到WEB-INF目录下的lib目录中，因为servler项目部署到Tomcat服务器中</p><p>1）src 下的源文件（如：.java）经过了编译之后放在 WEB-INF&#x2F;classes 目录下</p><p>2）lib 包在编译前需要放在 WEB-INF 下编译后才能出现在 WEB-INF&#x2F;lib 目录下，所以除了 tomcat 自带的 jar 包（JRE）外，项目所需 jar 包都应放在 WEB-INF 的 lib 目录下，否则部署的web项目就会缺少lib包</p></li></ul><h1 id="Apache-DBUtils"><a href="#Apache-DBUtils" class="headerlink" title="Apache-DBUtils"></a>Apache-DBUtils</h1><p>使用PreparedStatement对CURD进行封装，底层一致，导入dbutils的jar包</p><ul><li>主要使用到QueryRunner、ResultSetHandler<T>这两个类</T></li><li>获取QueryRunner类：<strong>QueryRunner runner &#x3D; new QueryRunner();</strong><ul><li><strong>query</strong>方法，是用来做查询的         (connection，sql，对象，参数)</li><li><strong>update</strong>方法，用来做增删改操作</li><li><strong>batch</strong>方法，用来做批处理</li></ul></li></ul><h3 id="ResultSetHandler接口及实现类"><a href="#ResultSetHandler接口及实现类" class="headerlink" title="ResultSetHandler接口及实现类"></a>ResultSetHandler接口及实现类</h3><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据结果集按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 可以理解为接收结果的</p></li><li><p>接口的主要实现类：</p><ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li><li>BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li><li>BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li><li>MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li><li>MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li><li>ScalarHandler：查询单个值对象</li></ul><p>ArrayHandler：把结果集中的第一行数据转成Object数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Object[] result = runner.query(con, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayHandler</span>());<br>    <span class="hljs-keyword">for</span>(Object obj : result)&#123;<br>    System.out.print(obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object[]&gt; result=  runner.query(con, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayListHandler</span>());<br><span class="hljs-comment">//集合的遍历</span><br>    <span class="hljs-keyword">for</span>( Object[] objs  : result)&#123;<br>    <span class="hljs-comment">//遍历对象数组</span><br>        <span class="hljs-keyword">for</span>(Object obj : objs)&#123;<br>            System.out.print(obj+<span class="hljs-string">&#x27;  &#x27;</span>);<br>        &#125;<br>    System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Sort</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> runner.query(con, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;Sort&gt;(Sort.class));<br>System.out.println(s);<br></code></pre></td></tr></table></figure><p>BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean对象中，存放到List集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Sort&gt; list = runner.query(con, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;Sort&gt;(Sort.class));<br><span class="hljs-keyword">for</span>(Sort s : list)&#123;<br>   System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><p>ColumnListHandler： 结果集指定列的数据,存储到List集合 List 每个列数据类型不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list = runner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ColumnListHandler</span>&lt;Object&gt;(<span class="hljs-string">&#x27;id&#x27;</span>));<br>    <span class="hljs-keyword">for</span>(Object obj :list)&#123;<br>    System.out.println(obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>ScalarHandler: 对于查询后,只有1个结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> runner.query(con, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>&lt;Object&gt;());<br>System.out.println(count);<br></code></pre></td></tr></table></figure><p>MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; map = runner.query(con, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapHandler</span>());<br>   <span class="hljs-comment">//遍历Map集合</span><br>   <span class="hljs-keyword">for</span>(String key : map.keySet())&#123;<br>    System.out.println(key+<span class="hljs-string">&#x27;..&#x27;</span>+map.get(key));<br>&#125;<br></code></pre></td></tr></table></figure><p>MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Map&lt;String, Object&gt;&gt; list = runner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapListHandler</span>());<br><span class="hljs-comment">//遍历集合list</span><br><span class="hljs-keyword">for</span>(Map map :list)&#123;<br>   <span class="hljs-keyword">for</span>(String key : map.keySet())&#123;<br>      System.out.print(key+<span class="hljs-string">&#x27;...&#x27;</span>+map.get(key));<br>   &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Druid连接池</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br>        <span class="hljs-comment">//DBUtills</span><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into user_table values(?,?,?)&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> runner.update(conn, sql, <span class="hljs-string">&quot;jack1&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">2000</span>);<br>        System.out.println(<span class="hljs-string">&quot;insert successed&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><p><strong>查询单条记录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 测试查询:查询一条记录</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * 使用ResultSetHandler的实现类：BeanHandler</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">querySingleTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-comment">//Druid连接池</span><br>      <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br>   <span class="hljs-comment">//DBUtills</span><br>      <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>      <span class="hljs-comment">//查询单条结果</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM customers WHERE id = ?&quot;</span>;<br>      BeanHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>(Customer.class);<br>      <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> runner.query(conn, sql, handler, <span class="hljs-number">1</span>);<br>      System.out.println(customer);<br><br><span class="hljs-comment">//释放连接到资源池</span><br>      JDBCUtills.closeResource(conn,<span class="hljs-literal">null</span>);<br>  &#125;    <br></code></pre></td></tr></table></figure><p><strong>查询多条记录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 测试查询:查询多条记录构成的集合</span><br><span class="hljs-comment">* 使用ResultSetHandler的实现类：BeanListHandler</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryMultipleTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//Druid连接池</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br>    <span class="hljs-comment">//DBUtills</span><br>    <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>    <span class="hljs-comment">//查询多条结果集</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM customers&quot;</span>;<br>    BeanListHandler&lt;Customer&gt; listHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>(Customer.class);<br>    List&lt;Customer&gt; list = runner.query(conn, sql2, listHandler);<br>    list.forEach(System.out::println);<br><br>    <span class="hljs-comment">//释放连接到资源池</span><br>    JDBCUtills.closeResource(conn,<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>查询单个值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 测试查询:查询单个值</span><br><span class="hljs-comment"> * 使用ResultSetHandler的实现类：ScalarHandler</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryValueTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//Druid连接池</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br>    <span class="hljs-comment">//DBUtills</span><br>    <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>    <span class="hljs-comment">//查询单条结果</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT Count(*) FROM customers&quot;</span>;<br>    <span class="hljs-type">ScalarHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) runner.query(conn, sql, handler);<br>    System.out.println(o);<br><br>    <span class="hljs-comment">//释放连接到资源池</span><br>    JDBCUtills.closeResource(conn,<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义Handler"><a href="#自定义Handler" class="headerlink" title="自定义Handler"></a>自定义Handler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//自定义resultHandler</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">//Druid连接池</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br>    <span class="hljs-comment">//DBUtills</span><br>    <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>    <span class="hljs-comment">//查询单条结果</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM customers where id = 1&quot;</span>;<br>    ResultSetHandler&lt;Customer&gt; selfDefineHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetHandler</span>&lt;Customer&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Customer <span class="hljs-title function_">handle</span><span class="hljs-params">(ResultSet resultSet)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> resultSet.getMetaData();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>            <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>                <span class="hljs-type">Customer</span> <span class="hljs-variable">cust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">columnLabel</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> resultSet.getObject(i + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Customer.class.getDeclaredField(columnLabel);<br>                        field.setAccessible(<span class="hljs-literal">true</span>);<br>                        field.set(cust,value);<br>                        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        <span class="hljs-keyword">finally</span> &#123;<br>                            <span class="hljs-keyword">if</span>(resultSet!=<span class="hljs-literal">null</span>)<br>                                resultSet.close();<br>                        &#125;      <br>                    &#125;<br>                    <span class="hljs-keyword">return</span> cust;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> runner.query(conn, sql, selfDefineHandler);<br>        System.out.println(query);<br><br>        <span class="hljs-comment">//释放连接到资源池</span><br>        JDBCUtills.closeResource(conn,<span class="hljs-literal">null</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>自定义ResultSetHandler接口的实现类，实现Handler方法 核心handle方法就是处理ResultSet 结果集，自定义返回类型</p><h3 id="资源关闭"><a href="#资源关闭" class="headerlink" title="资源关闭"></a>资源关闭</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">(Connection con, Statement st, ResultSet rs)</span>&#123;<br>    <span class="hljs-comment">//方式1</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        DbUtils.close(con);<br>        DbUtils.close(st);<br>        DbUtils.close(rs);<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>        throwables.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">//方式2</span><br>    DbUtils.closeQietly(rs);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2020/12/02/JavaScript/"/>
    <url>/2020/12/02/JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript概述"><a href="#JavaScript概述" class="headerlink" title="JavaScript概述"></a>JavaScript概述</h2><ol><li><p>JavaScript语言是一种脚本语言（解释型语言），JavaScript的“目标程序”是以普通文本的形式保存。用记事本是可以直接打开的。浏览器打开就直接解释执行了。</p></li><li><p>JavaScript是一门编程语言，专门用来操作HTML页面中的节点，让网页产生动态效果的。JavaScript中也有变量、数据类型、运算符、if语句、for循环、标识符、关键字等。</p></li><li><p>JavaScript和Java的区别</p><p>​JavaScript运行在浏览器当中，浏览器中有执行JS代码的内核。</p><p>​Java运行在JVM当中。JavaScript和Java没有任何关系。</p><p>​Java语言是SUN公司开发的，JavaScript这个名字是SUN公司给起的名。</p></li></ol><h2 id="JavaScript包括三块：ECMAScript、DOM、BOM"><a href="#JavaScript包括三块：ECMAScript、DOM、BOM" class="headerlink" title="JavaScript包括三块：ECMAScript、DOM、BOM"></a>JavaScript包括三块：ECMAScript、DOM、BOM</h2><ol><li><p>ECMAScript是ECMA制定的262标准，JavaScript和JScript都遵守这个标准，ECMAScript是JavaScript核心语法</p></li><li><p>DOM编程是通过JavaScript对HTML中的dom节点进行操作，DOM规范是W3C制定的。（Document Object Model：文档对象模型）</p></li><li><p>BOM编程是对浏览器本身操作，例如：前进、后退、地址栏、关闭窗口、弹窗等。由于浏览器有不同的厂家制造，所以BOM缺少规范，一般只是有一个默认的行业规范。（Browser Object Model：浏览器对象模型）</p></li></ol><h2 id="嵌入JS三种方式"><a href="#嵌入JS三种方式" class="headerlink" title="嵌入JS三种方式"></a>嵌入JS三种方式</h2><h3 id="行间事件"><a href="#行间事件" class="headerlink" title="行间事件"></a>行间事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.alert(&#x27;hello js&#x27;)&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ol><li>JS中的任何一个事件都对应一个事件句柄，例如鼠标单击事件click，对应的事件句柄就是onclick，事件句柄都是以标签的属性方式存在。在事件句柄后面可以编写JS代码，当触发这个事件之后，这段JS代码则执行了。</li><li>window是JS中的内置BOM顶级对象，代表当前浏览器窗口，window对象有一个alert()函数，该函数可以在浏览器上弹出消息框。</li><li>window.alert()中的window.可以省略。</li></ol><h3 id="页面script标签嵌入"><a href="#页面script标签嵌入" class="headerlink" title="页面script标签嵌入"></a>页面script标签嵌入</h3><ol><li>&#96;&#96;&#96;html<script type="text/javascript">JS代码</script><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>2. window.alert()的执行会阻塞当前页面的加载<br>3. 一个页面中可以写多个脚本块，脚本块的位置没有限制<br>4. 暴露在脚本块中的JS代码在页面打开的时候遵循自上而下的顺序依次逐行执行<br><br><br><br><span class="hljs-comment">### 外部引入</span><br><br>1. ```html<br>   &lt;script <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;js文件路径&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h2><p>标识符命名规则和规范按照java执行</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的声明与赋值"><a href="#变量的声明与赋值" class="headerlink" title="变量的声明与赋值"></a>变量的声明与赋值</h3><ol><li>变量未赋值，系统默认赋值undefined</li><li>JS是一种弱类型编程语言，一个变量var可以接收任何类型的数据</li><li>一行上也可以声明多个变量</li></ol><h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3><p><strong>局部变量</strong>：函数的形参是局部变量，另外使用var关键字在函数体中声明的变量是局部变量，函数执行结束之后，局部变量的内存就释放了。</p><p><strong>全局变量</strong>：在函数体外声明的变量属于全局变量，另外不使用var关键字声明的变量无论位置在哪，它都是全局变量（没有var声明的变量，必须&#x3D;手动赋值，没有默认值undefined），全局变量在浏览器关闭时销毁。</p><h2 id="函数的定义与调用"><a href="#函数的定义与调用" class="headerlink" title="函数的定义与调用"></a>函数的定义与调用</h2><p>函数类似于java语言中的方法，是一段可以完成某个功能的可以被重复利用的代码片段</p><h3 id="普通函数定义"><a href="#普通函数定义" class="headerlink" title="普通函数定义"></a>普通函数定义</h3><p>function 函数名(形式参数列表){                                         function sum(a, b){</p><p>​函数体;                                                                              return a + b;</p><p>}                                                                                               }     </p><p>注意：</p><ol><li><p>JS中的函数<strong>不需要指定返回值类型</strong>，因为JS是弱类型编程语言，变量可以接收任何类型的数据，也就是说JS中的函数可以返回任何类型的数据，当然也可以不返回任何数据。返回数据使用return语句。</p></li><li><p>JS中的函数在调用的时候，实参可以随意，例如调用以上的sum函数</p><p>​（1）sum()，没有传任何实参的时候a和b变量没有赋值，则a和b都是undefined</p><p>​（2）sum(10)，这样就表示a变量赋值10，b变量仍然是undefined</p><p>​（3）sum(1,2)，这样则表示a是1，b是2。</p></li></ol><h3 id="把函数的声明当做类进行定义"><a href="#把函数的声明当做类进行定义" class="headerlink" title="把函数的声明当做类进行定义"></a>把函数的声明当做类进行定义</h3><p>函数名 &#x3D; function(形式参数列表){sum &#x3D; function(a, b){</p><p>​函数体;  return a + b;</p><p>}}  </p><ol><li><p>JS中的函数定义在脚本块中，页面在打开的时候，函数并不会自动执行，函数是需要手动调用才能执行的。</p></li><li><p>由于JS是一种弱类型编程语言，所以函数不能同名，没有重载机制，同名会将前边的函数消灭掉</p></li><li><p>这样的代码顺序是可以的，页面打开的时候会先进行所有函数的声明，函数声明优先级较高。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-title function_">sayHello</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello JS&quot;</span>);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>用户点击按钮，调用函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sayHello();&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>Undefined：</strong></p><p>（1）只有一个值undefined，变量声明没赋值，系统默认赋值undefined</p><p><strong>Number：</strong></p><p>（1）Number类型包括哪些值：0,1，-1,3.14,12,300，NaN，Infinity        NaN：表示数学表达式的结果应该是数字，但未返回数字时，返回NaN               Infinity：表示无穷大</p><p>（2）parseInt()：取整，不会四舍五入</p><p>（3）parseFloat()</p><p>（4）Math.ceil()：向上取整</p><p>（5）isNaN()：判断是否是数字类型的，先试图将类型转换为数字，成功了返回的是false</p><p>（6）Number()：可以把能转化为数组的数据但不是数字转化为数字</p><p><strong>String：</strong></p><p>（1）可以使用单引号，也可以用双引号</p><p>（2）JS中的字符串包括小String，也包括大String，小String属于原始类型，大String是JS的内置对象，大String属于Object类型。（小String是直接赋值字符串类型，大String是new String(“”)创建的）</p><p>（3）无论大String还是小String，它们的属性和方法都是通用的。</p><p>（4）字符串的substr()和substring()的区别。</p><p><strong>Null：</strong></p><p>（1）该类型只有一个值：null</p><p>（2）typeof运算符的执行结果是”object”</p><p><strong>Boolean：</strong></p><p>（1）只有两个值：true和false</p><p>（2）Boolean()：将不是Boolean类型的转化为Boolean类型</p><p>（3）JS中的if语句自动调用Boolean()函数</p><p><strong>Object</strong></p><p>（1）JS中定义一个类和定义一个函数语法是相同的</p><p>（2）JS中创建一个对象：new 类名()</p><p>（3）JS中访问对象属性：this.属性名；调用对象的方法：this.方法名 &#x3D; function(){}</p><p>（4）JS中的一个函数，既是函数声明，又是类的定义，同时函数名也可以看做构造方法名。直接调用函数表示普  通函数调用，如果使用new运算符来调用该函数则会创建对象</p><p>（5）使用prototype属性动态的给对象扩展属性以及方法</p><p>ES6版本及之后添加了：<strong>Symbol</strong>和<strong>BigInt</strong></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><p>blur失去焦点</p><p>focus获得焦点</p><p>click鼠标单击</p><p>dblclick鼠标双击</p><p>keydown键盘按下</p><p>keyup键盘弹起</p><p>mousedown鼠标按下</p><p>mouseup鼠标弹起</p><p>mouseover鼠标经过</p><p>mousemove鼠标移动</p><p>mouseout鼠标离开</p><p>submit表单提交</p><p>reset表单重置</p><p>select文本被选定</p><p>load页面加载完毕</p><p>change下拉列表选中项改变，或文本框内容改变</p><h3 id="注册事件的两种方式"><a href="#注册事件的两种方式" class="headerlink" title="注册事件的两种方式"></a>注册事件的两种方式</h3><p>在标签中使用事件句柄的方式注册事件,当事件发生之后，注册在标签的代码执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;sayHello()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>隐含的内置对象：</p><p>​window：代表整个web窗口，是BOM的顶级对象</p><p>​document：代表整个HTML文档，是DOM的顶级对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = sayHello;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>或<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="代码的执行顺序"><a href="#代码的执行顺序" class="headerlink" title="代码的执行顺序"></a>代码的执行顺序</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mybtn&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> elt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> elt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mybtn&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h4 id="void运算符"><a href="#void运算符" class="headerlink" title="void运算符"></a>void运算符</h4><p>执行表达式，但不返回任何结果</p><p>void(表达式)</p><p>在a标签中的href中写javascript:void(0)就可以不跳转页面</p><h4 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h4><p>动态获取变量的数据类型</p><p>typeof a  获得a的数据类型，返回的是六个类型的字符串undefined，number，string，boolean，object，function（全部小写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;number&quot;</span> === <span class="hljs-keyword">typeof</span> a &amp;&amp; <span class="hljs-string">&quot;number&quot;</span> === <span class="hljs-keyword">typeof</span> b)&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;数据格式不合法&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&#x3D;、&#x3D;&#x3D;、&#x3D;&#x3D;&#x3D;三者的区别</strong></p><p>​&#x3D;&#x3D;：等同运算符，比价值是否相等</p><p>​&#x3D;&#x3D;&#x3D;：全等运算符，即比较值是否相等，还比较数据类型是否相等</p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>for..in语句遍历数组，以及遍历一个对象的属性</p><p>遍历数组：for(var index in 数组){}    index为数组元素的下标，和foreach有区别</p><p>遍历对象属性：for(var index in 对象){}  index为对象的属性名</p><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>创建数组：</p><p>​var arr &#x3D; [元素1,元素2];       js中的数组长度可变</p><p>​var arr &#x3D; new Array(3,2,1,5)</p><p>​var arr &#x3D; new Array(3)创建数组长度为3的数组</p><p>JS中数组对象常用方法：push压栈，pop出栈，join连接，reverse翻转等</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>（1）new Date() 获取当前系统时间</p><p>（2）new Date().getTime()获取时间戳</p><p>（3）new Date().getFullYear()、getMonth()等方法</p><h2 id="BOM和DOM"><a href="#BOM和DOM" class="headerlink" title="BOM和DOM"></a>BOM和DOM</h2><p><strong>BOM</strong>: Browser Object Model（浏览器对象模型），通过BOM的对象和方法可以完成浏览器窗口的操作，例如：关闭浏览器，前进，后退，修改地址栏上的地址等，BOM是包含DOM的。BOM的顶级内置对象是window</p><p><strong>DOM</strong>: Document Object Model（文档对象模型），通过DOM的对象和方法可以完成网页中元素的增删改，让网页产生动态效果，DOM的顶级内置对象是document</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml\wps746F.tmp.png" alt="img"> </p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h3><p>（1）正则表达式是一门独立的学科，不止用在JS中</p><p>（2）正则表达式专门用来做字符串格式匹配的</p><h3 id="常用的正则表达式符号"><a href="#常用的正则表达式符号" class="headerlink" title="常用的正则表达式符号"></a>常用的正则表达式符号</h3><p>参考30分钟入门正则表达式：</p><p>^   字符串开始</p><p>$   字符串结束</p><p>\s   空白</p><p>*   0~N次</p><p>+   1~N次</p><p>?   0或1次</p><p>{3}   3次</p><p>{3,}   3~N次</p><p>{3,5}   3~5次</p><p>(a|b)   a或b</p><p>[a-z]   a到z</p><p>[^abc]   不是abc</p><h3 id="会创建JS中的正则表达式对象"><a href="#会创建JS中的正则表达式对象" class="headerlink" title="会创建JS中的正则表达式对象"></a>会创建JS中的正则表达式对象</h3><p>var regExp &#x3D; new RegExp(“正则表达式”,”标记”)</p><p>var regExp &#x3D; &#x2F;正则表达式&#x2F;标记</p><p>标记（可忽略不写）：g全局，i忽略大小写</p><p>（2）var regExp &#x3D; &#x2F;^[1-9][0-9]{4,}$&#x2F;;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA</title>
    <link href="/2020/11/16/JAVA/"/>
    <url>/2020/11/16/JAVA/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/PorkBird/article/details/113666542?spm=1001.2014.3001.5501">https://blog.csdn.net/PorkBird/article/details/113666542?spm=1001.2014.3001.5501</a></p><h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><p>JavaSE：标准版</p><p>JavaEE：企业版</p><p>JavaME：微型版</p><p>JDK：java开发工具箱</p><p>JRE：java运行环境</p><p>JVM：java虚拟机</p><p>JDK包括JRE，JRE包括JVM</p><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><p>类名，接口名：首字母大写，后边每个单词的首字母大写</p><p>变量名，方法名：首字母小写，后边每个单词的首字母大写</p><p>常量名：全部大写，单词之间用_隔开</p><h3 id="经典异常"><a href="#经典异常" class="headerlink" title="经典异常"></a>经典异常</h3><p>空指针异常：NullpointerException</p><p>类型转换异常：ClassCastException</p><p>数组下标越界异常：ArraysIndexOutOfBoundsException</p><p>数字格式化异常：NumberFormatException</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>组成：数字，字母，下划线，美元字符$</p><p>要求：不能由数字开头，区分大小写，不能是关键字</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>组成：数据类型，名称，字面值（数据）</p><p>变量是内存中存储数据的最基本单元</p><p>局部变量：在方法体中声明的变量</p><p>成员变量(实例变量和静态变量)：在方法体外并在类体内声明的变量，若没手动赋值，系统会自动赋默认值</p><p>成员变量（堆内存）局部变量（栈内存）</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>整形：byte(1),short(2),int(4),long(8)java中将整数型默认为int，要将字面值后加L表示整数型为long</p><p>浮点型：float(4), double(8)浮点型默认为double</p><p>布尔型：boolean(1)java中只有两个值 float和true</p><p>字符型：char(2)   在c中字符型占用一个字节</p><p>一字节（byte）等于八比特位（bit）1byte &#x3D; 8bit</p><p>byte的取值范围为-128~127</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>自动类型转换（向上转型）：自动从小容量到大容量转换byte&lt;short&lt;int&lt;long&lt;float&lt;double&lt;char</p><p>强制类型转换（向下转型）：大容量到小容量转换，可能会丢失精度</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>算术运算符：+，-，*，&#x2F;,%,++,–</p><p>​整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p><p>关系运算符：&lt;,&gt;,&lt;&#x3D;,&gt;&#x3D;,&#x3D;&#x3D;,!&#x3D;</p><p>逻辑运算符：&amp;,|,!,^,&amp;&amp;,||（&amp;（|）和&amp;&amp;（||）最终的结果是一样的，但是&amp;&amp;（||）存在短路现象）</p><p>​短路现象：第二个表达式可能不执行，执行效率较高</p><p>赋值运算符：&#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;+，%&#x3D;</p><p>​先执行等号右边的表达式，在将执行结果赋值给左边</p><p>字符串连接运算符：+</p><p>​当+两边只要有一个是字符串，就会进行字符串连接运算</p><p>​将一个变量塞到一个字符串当中应该是：“+变量+”</p><p>三目运算符：布尔表达式？表达式1：表达式2</p><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p>选择结构：if{}，if{}else{}，if{}else if{}，switch{}case  :{}</p><p>循环结构：for{}，while{}，do{}while{}</p><p>改变控制语句顺序：break，continue</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>相当于c语言中的函数</p><p>语法：</p><p>​[修饰符列表] 返回值类型 方法名 （形式参数列表）{</p><p>​方法体；</p><p>​}</p><p>定义在类体中，方法体中不能再定义方法</p><p>调用方法：</p><p>​修饰符列表中有static时，调用该方法是:类名.方法名(实际参数列表）</p><p>​当执行的程序和要调用的程序在一个类里类名.可以省略</p><h4 id="方法体"><a href="#方法体" class="headerlink" title="方法体"></a>方法体</h4><p>方法体中编写java语句</p><p>主方法是程序的入口</p><h4 id="方法重载（名称相同，参数不同）"><a href="#方法重载（名称相同，参数不同）" class="headerlink" title="方法重载（名称相同，参数不同）"></a>方法重载（名称相同，参数不同）</h4><p>要求：在同一类中，方法名相同，参数列表不同，参数数量不同，参数类型不同，参数顺序不同</p><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，<strong>与返回值无关</strong>，换句话说不能通过返回值来判定两个方法是否相互构成重载</li></ul><h4 id="方法重写（覆盖）"><a href="#方法重写（覆盖）" class="headerlink" title="方法重写（覆盖）"></a>方法重写（覆盖）</h4><p>发生在具有继承关系的父子类之间（返回值，方法名，形参列表相同）</p><p>方法重写注意事项和要求</p><ol><li>重写方法的名称、形参列表必须与被重写方法的名称和参数列表一致。</li><li>子类重写父类方法时，访问权限必须大于或者等于父类 （暂时了解 ：缺省 &lt; protected &lt; public）</li><li>子类不能重写父类的静态方法和私有方法</li></ol><p>子类中所有的构造器默认都会先访问父类中无参的构造器，再执行自己。<strong>没有无参构造器，需要手动调用父类的有参构造器（super(参数)）</strong></p><h4 id="方法递归"><a href="#方法递归" class="headerlink" title="方法递归"></a>方法递归</h4><p>容易造成栈内存溢出</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>构造方法：普通方法：</p><p>​[修饰符列表] 构造方法名 （形式参数列表{[修饰符列表]  返回值类型  方法名 （形式参数列表{</p><p>​构造方法体；方法体；</p><p>​} }</p><p>构造方法名和类名必须保持一致 </p><p>构造方法不需要手动调用，创建对象时自动调用构造方法</p><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><p>封装之后才会产生独立体–对象</p><p>安全性高，可重复利用性强</p><p>private私有化修饰，只能在本类中访问</p><p>封装：</p><p>​private修饰</p><p>操作入口：</p><p>​setters方法（外部修改）：</p><p>​puhlic void setAge (int a){</p><p>​ age &#x3D; a;</p><p>​}</p><p>​getters方法（外部读取）：</p><p>​puhlic int  getAge (){</p><p>​ return age;</p><p>​}</p><p>自动抒写：右键–Source–setters and getters ；alt+insert快速生成</p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>语法：</p><p>​[修饰符列表] class 类名 extends 父类名{</p><p>​类体；</p><p>​}</p><p>java中只有单继承，只能继承一个类，但可以继承多个接口</p><p>私有的类和构造方法不支持继承，私有的成员可以被继承，只是不能直接访问</p><p>有了继承才有了“方法覆盖”和“多态机制”，可以重复利用代码</p><p>在子类方法中访问成员（成员变量、成员方法）满足：就近原则</p><ol><li>先子类局部范围找</li><li>然后子类成员范围找</li><li>然后父类成员范围找，如果父类范围还没有找到则报错。</li></ol><h3 id="多态性（必需有继承关系）"><a href="#多态性（必需有继承关系）" class="headerlink" title="多态性（必需有继承关系）"></a>多态性（必需有继承关系）</h3><p>向上转型：子类型–&gt;父类型（自动类型转换） 强制类型转换有安全隐患</p><p>向下转型：父类型–&gt;子类型（强制类型转换）</p><p>子类型中特有的，必须进行强制类型转换</p><p>采用（引用 instanceof  An）判断引用是否指向An类型的对象</p><p>父类型引用指向子类型对象（降低程序的耦合度，提高程序的扩展力）</p><p>方法调用：编译看左边，运行看右边。<br>变量调用：编译看左边，运行也看左边。（多态侧重行为多态）</p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>类体：类体中不能直接编写java语句，除声明变量除外</p><p>语法：</p><p>​[修饰符列表]  class 类名{</p><p>​属性；一般用变量形式来定义（状态信息）</p><p>​方法；(行为信息)</p><p>​}</p><h3 id="对象的创建于使用"><a href="#对象的创建于使用" class="headerlink" title="对象的创建于使用"></a>对象的创建于使用</h3><p>new 类名()创建了一个对象，或者利用反射机制创建一个对象</p><p>Student s &#x3D; new Student();将新创建的对象的地址用局部变量保存（局部变量存放在栈中）（s为引用，引用了对象的地址，来访问对象）</p><p>java中只能通过引用来对堆内存中对象内部的实例变量进行操作</p><p>读取数据：引用.变量名          修改数据：引用.变量名 &#x3D; 值</p><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>this是一个引用，是一个变量，this变量保存了内存地址指向自身，this存储在堆内存对象的内部</p><p>调用自身类的构造方法，当构造方法有参数时this不能省</p><p>this.访问本类的属性或方法</p><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>子类调用父类的构造方法，当父类构造方法有参数时super不能省</p><p>super.访问父类的属性或方法</p><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>静态的，修饰成员变量表示该成员变量只在内存中只存储一份，可以被共享访问、修改一般采用类名.的方式访问</p><p>静态方法只能访问静态的成员，不可以直接访问实例成员。</p><p>在方法区中分配内存</p><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p>语法：</p><p>​static{</p><p>​java语句；</p><p>​}</p><p>在类加载时执行，并且只执行一次，通常完成数据的准备工作</p><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>final修饰的类无法被继承，修饰的方法无法被覆盖</p><p>final修饰的变量一旦被赋值将不能再次赋值（实例变量必须手动赋值）</p><p>final修饰的引用一旦指向对象，将不能再指向其他对象，并且所指向的对象无法被垃圾回收器回收，但对象内部的内容可以改变</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>public static final 类型 常量名 &#x3D; 值；</p><p>常量名全部大写，且单词之间用_链接</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>修饰符  enum  枚举名称{<br>            第一行都是罗列枚举类实例的名称。<br>}</p><p>枚举类都是继承了枚举类型：java.lang.Enum<br>枚举都是最终类，不可以被继承。<br>构造器的构造器都是私有的，枚举对外不能创建对象。<br>枚举类的第一行默认都是罗列枚举对象的名称的。<br>枚举类相当于是多例模式。</p><h3 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h3><p>类继承接口（多继承）</p><p>语法：</p><p>​[修饰符列表] class 类名implements 接口名{</p><p>​必须实现接口中的抽象方法（要写public）；</p><p>​}</p><h3 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h3><p>类继承类（单继承）</p><p>语法：</p><p>​[修饰符列表] class 类名 extends 父类名{</p><p>​类体；</p><p>​}</p><h3 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字"></a>abstract关键字</h3><p>抽象类</p><p>语法：</p><p>​[修饰符列表] abstract class 类名{</p><p>​类体；</p><p>​}</p><p>抽象方法：例如：public abstract void 方法名（）；</p><h3 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h3><p>游离的，不参与序列化</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>不能创建对象，只能被继承使用，但是可以用抽象类类型引用调用方法</p><p>语法：</p><p>​[修饰符列表] abstract class 类名{</p><p>​类体；</p><p>​}</p><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><p>必须在抽象类中</p><p>public abstract void 方法名（）；</p><p>若非抽象类继承抽象类必须将抽象方法重写</p><h3 id="接口（就是体现规范的）"><a href="#接口（就是体现规范的）" class="headerlink" title="接口（就是体现规范的）"></a>接口（就是体现规范的）</h3><p>语法：</p><p>​[修饰符列表] interface 接口名{</p><p>​常量；</p><p>​抽象方法；</p><p>​}</p><p>接口支持多继承</p><p>接口中只有常量（public static final可以省略）和抽象方法（public abstract可以省略）</p><p>接口与接口之间没有继承关系也可以进行向下转型</p><p>接口不能直接new对象，但可以用接口类型引用调用方法</p><p>接口是用来被类实现（implements）的，实现接口的类称为实现类</p><p>类和类的关系：单继承。<br>类和接口的关系：多实现。<br>接口和接口的关系：多继承，一个接口可以同时继承多个接口</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类就是定义在一个类里面的类，里面的类可以理解成（寄生），外部类可以理解成（宿主）</p><p>语法：</p><p>public class People{</p><p>  &#x2F;&#x2F; 内部类</p><p>   public class Heart{</p><p>​    }</p><p>}</p><p>内部类通常可以方便访问外部类的成员，包括私有的成员</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>new 类|抽象类名|或者接口名() {</p><p>​    重写方法;</p><p>};</p><p>特点总结：<br>    匿名内部类是一个没有名字的内部类。<br>    匿名内部类写出来就会产生一个匿名内部类的对象。<br>    匿名内部类的对象类型相当于是当前new的那个的类型的子类类型。</p><p>一个类要么默认继承了Object类，要么间接继承了Object类，Object类是Java中的祖宗类</p><p>String类中重写了toString()方法和equals()方法，可以直接使用</p><h4 id="Object类中的toString-方法（一般必须重写）"><a href="#Object类中的toString-方法（一般必须重写）" class="headerlink" title="Object类中的toString()方法（一般必须重写）"></a>Object类中的toString()方法（一般必须重写）</h4><p>目的：将java对象转换为字符串表示形式（输出时输出内容的形式），若不重写则输出内存地址</p><p>输出引用时自动调用toString方法</p><h4 id="Object类中的equals-方法（一般必须重写）"><a href="#Object类中的equals-方法（一般必须重写）" class="headerlink" title="Object类中的equals()方法（一般必须重写）"></a>Object类中的equals()方法（一般必须重写）</h4><p>目的：判断两个对象是否相等</p><p>默认的是用&#x3D;&#x3D;判断，但这判断的是对象的内存地址，并非对象</p><p>重写时要进行强制类型转换</p><h4 id="Object类中的finalize-方法"><a href="#Object类中的finalize-方法" class="headerlink" title="Object类中的finalize()方法"></a>Object类中的finalize()方法</h4><p>不需要手动调用，当java对象即将被垃圾回收器回收时自动调用该方法</p><h4 id="Object类中的wait-方法"><a href="#Object类中的wait-方法" class="headerlink" title="Object类中的wait()方法"></a>Object类中的wait()方法</h4><p>Object o &#x3D; new Object();</p><p>o.wait();</p><p>让正在o对象上活动的线程进入等待状态</p><p>o.notify();让正在o对象上的等待的进程唤醒</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>声明语法格式：数据类型[] 变量名</p><p>初始化语法格式：静态：数据类型[] 变量名 &#x3D; {1， 2}动态：数据类型[] 变量名 &#x3D; new  数据类型[x]</p><p>数组是引用数据类型，存放在堆内存中，父类是Object</p><p>数组可以存放基本数据类型，如果存储java对象，则存储的是对象的引用，并非java对象</p><p>java中规定数组一旦定义长度，数组的长度将不可变，但可以扩容（利用数组拷贝）</p><p>数组对象有java自带的length属性，用来获取数组元素个数</p><p>如果使用“数据类型[i]”取出数据，则“数据类型[i]”代表一个“数据类型”类型的对象，并不是数组</p><p>数组扩容：只能将数组拷贝到大数组中</p><p>数组拷贝：System.arraycopy(源数组，源数组起始位置，目标数组，目标起始位置，拷贝长度)</p><p>利用Object类型可以存取任何引用类型的的数据</p><h4 id="Arrays工具类（数组工具类）"><a href="#Arrays工具类（数组工具类）" class="headerlink" title="Arrays工具类（数组工具类）"></a>Arrays工具类（数组工具类）</h4><p>数组工具类，对数组进行操作，大部分都是静态的</p><p>Arrays.sort(数组)直接进行排序</p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>核心思想：左边位置的数据和右边位置的数据进行对比</p><p>两个for循环，第一个for决定有几个数据就循环比较几次，第二个for循环进行相邻数据的比较（因为第一个for循环执行一次之后就找出了最大值或最小值，所以第二个for循环可以少比较一个）</p><p>for(int i&#x3D;arr.length-1;  i&gt;0; i–)</p><p>​for(int j&#x3D;0; j&lt;i; j++){</p><p>​if(arr[j] &gt; arr[j+1]){</p><p>​int temp;</p><p>​temp &#x3D; arr[j];</p><p>​arr[j] &#x3D; arr[j+1];</p><p>​arr[j+1] &#x3D; temp;</p><p>​}</p><p>}</p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>核心思想：循环一次找出数据中最新的元素，拿最小的元素和最前面的数据交换位置（交换完成之后该最小元素不参与下一次比较）</p><p>第一个数据和各个数据进行比较，交换，完成一次之后，在用第二个数据与后边的各个数据进行比较</p><p>两个for循环，第一个for决定有几个数据就循环比较几次，第二个for循环进行第一个数据和后边各个数据比较</p><p>for(int i&#x3D;0; i &lt; arr.length-1; i++){</p><p>​int min &#x3D; i;</p><p>​for(int j&#x3D;i+1; j &lt; arr.length; j++){</p><p>​if(arr[j] &lt; arr[i]){</p><p>​min &#x3D; j;</p><p>​}</p><p>​if(min !&#x3D; i){</p><p>​int temp;</p><p>​temp &#x3D; arr[min];</p><p>​arr[i] &#x3D; temp;</p><p>​arr[min] &#x3D; arr[i];</p><p>​}</p><p>​}</p><p>}</p><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>先将数据进行从小到大排序，在进行查找</p><p>找出中间元素与要查找的元素比较，若中间元素小于目标元素，则将开始查找的下标变为中间元素下标+1</p><p>若中间元素大于目标元素则结束查找的下标变为中间元素的下标-1</p><p>设置开始下标，中间下标，结束下标</p><p>int begin &#x3D; 0;</p><p>int end &#x3D; arr.length-1;</p><p>int mid &#x3D; (begin+end)&#x2F;2;</p><p>while(begin &lt; end){</p><p>​if (arr[mid] &#x3D;&#x3D; x)</p><p>​return mid;</p><p>​else if (arr[mid] &lt; x)</p><p>​begin &#x3D; mid+1;</p><p>​else if (arr[mid] &gt; x)</p><p>​end &#x3D; mid-1;</p><p>}</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h4><p>String属于引用类型，使用双引号括起来的都是String对象，底层是byte数组实现的</p><p>String类中重写了toString()方法和equals()方法，可以直接使用（&#x3D;&#x3D;比较和equals()方法比较不一样，&#x3D;&#x3D;比较的是String类型变量存放的对象的地址值，而equals方法直接比较的String类型的对象是否相等）（使用equals方法比较字符串时建议用     字符串.equals(String对象)  这样可以避免空指针异常）</p><p>双引号括起来的字符串是不可变的，直接存储在方法区的字符串常量池中</p><p>若不使用new则不会再堆内存中开辟空间，该堆内存空间存放的是存放在字符串常量池中的String类型的内存地址</p><p>int i &#x3D; 100; 因为i是基本数据类型，所以i中保存的是100</p><p>String s &#x3D; “qqq”；因为s是引用数据类型，所以s中保存的是存放qqq对象的内存地址，“qqq”存放在方法区的字符串常量池当中，是一个对象</p><h5 id="String构造方法"><a href="#String构造方法" class="headerlink" title="String构造方法"></a>String构造方法</h5><ol><li>String s &#x3D; new String(“”);</li><li>String s &#x3D; “”;</li><li>String s &#x3D; new String(char数组);</li><li>String s &#x3D; new String(char数组，起始下标，长度);</li><li>String s &#x3D; new String(byte数组);</li><li>String s &#x3D; new String(byte数组，起始下标，长度);</li></ol><h5 id="StringBuffer字符串拼接"><a href="#StringBuffer字符串拼接" class="headerlink" title="StringBuffer字符串拼接"></a>StringBuffer字符串拼接</h5><p>StringBuffer底层是一个byte[]数组，是可变的，初始化容量是16（String底层压实byte[]数组但是不能改变）</p><p>目的：调用StringBuf.append拼接字符串节省了用+拼接时创建的中间字符串的内存空间</p><p>StringBuffer和StringBuilder的区别：StringBuffer的方法有关键字synchronized修饰，在多线程环境下运行时安全的</p><h4 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h4><p>包含执行基本数字运算的方法，Math类没有提供公开的构造器</p><table><thead><tr><th>public static int abs(int a)</th><th>获取参数绝对值</th></tr></thead><tbody><tr><td>public static double ceil(double a)</td><td>向上取整</td></tr><tr><td>public static double floor(double a)</td><td>向下取整</td></tr><tr><td>public static int round(float a)</td><td>四舍五入</td></tr><tr><td>public static int max(int a,int b)</td><td>获取两个int值中的较大值</td></tr><tr><td>public static double pow(double a,double b)</td><td>返回a的b次幂的值</td></tr><tr><td>public static double random()</td><td>返回值为double的随机值，范围[0.0,1.0)</td></tr></tbody></table><h4 id="System-类"><a href="#System-类" class="headerlink" title="System 类"></a>System 类</h4><p>System的功能是通用的，都是直接用类名调用即可，所以System不能被实例化</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static void exit(int status)</td><td>终止当前运行的 Java 虚拟机，非零表示异常终止</td></tr><tr><td>public static long currentTimeMillis()</td><td>返回当前系统的时间毫秒值形式</td></tr><tr><td>public static void arraycopy(数据源数组, 起始索引, 目的地数组, 起始索引, 拷贝个数)</td><td>数组拷贝</td></tr></tbody></table><h4 id="Date-类"><a href="#Date-类" class="headerlink" title="Date 类"></a>Date 类</h4><p>Date类的对象在Java中代表的是当前所在系统的此刻日期时间</p><ol><li>日期对象如何创建，如何获取时间毫秒值？<br>Date date &#x3D; new Date();<br>Long time &#x3D; date.getTime();（指的是从1970年1月1日    00:00:00走到此刻）</li><li>时间毫秒值怎么恢复成日期对象<br>Date d &#x3D; new Date(time);<br>d.setTime(time);</li></ol><h4 id="SimpleDateFormat-类"><a href="#SimpleDateFormat-类" class="headerlink" title="SimpleDateFormat 类"></a>SimpleDateFormat 类</h4><p>可以对Date对象或时间毫秒值格式化成我们喜欢的时间形式。</p><p> y年、 M月、 d日、 H时、 m分、 s秒</p><table><thead><tr><th>public final String <strong>format(Date date)</strong></th><th>将日期格式化成日期&#x2F;时间字符串</th></tr></thead><tbody><tr><td>public final String <strong>format(Object time)</strong></td><td>将时间毫秒值式化成日期&#x2F;时间字符串</td></tr><tr><td>public Date <strong>parse(String source)</strong></td><td>从给定字符串的开始解析文本以生成日期</td></tr></tbody></table><h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><p>public static Calendar getInstance()获取当前日历对象</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int get(int field)</td><td>取日期中的某个字段信息。</td></tr><tr><td>public void set(int field,int value)</td><td>修改日历的某个字段信息。</td></tr><tr><td>public void add(int field,int amount)</td><td>为某个字段增加&#x2F;减少指定的值</td></tr><tr><td>public final Date getTime()</td><td>拿到此刻日期对象。</td></tr><tr><td>public long getTimeInMillis()</td><td>拿到此刻时间毫秒值</td></tr></tbody></table><h4 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h4><p>数组操作工具类，专门用于操作数组元素的</p><table><thead><tr><th>public static String toString(类型[] a)</th><th>对数组进行排序</th></tr></thead><tbody><tr><td>public static void sort(类型[] a)</td><td>对数组进行默认升序排序</td></tr><tr><td>public static <T> void sort(类型[] a, Comparator&lt;? super T&gt; c)</T></td><td>使用比较器对象自定义排序</td></tr><tr><td>public static int binarySearch(int[] a, int key)</td><td>二分搜索数组中的数据，存在返回索引，不存在返回-1</td></tr></tbody></table><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>八种包装类时引用数据类型，父类是Object</p><p>目的：传送对应的八种基本数据类型</p><p>java中为了提高运行效率，将[-128 ~ 127]之间所有的包装对象提前创建好，存放在方法区的整数型常量池中（类加载时自动缓存到内存中）（Integer x &#x3D; 127,  Integer y &#x3D; 127  因为x和y存放的内存地址相同所以x&#x3D;&#x3D;y ）</p><p>基本数据类型         包装类型</p><p>bytejava.lang.Byte</p><p>short  java.lang.Short</p><p>int   java.lang.Integer</p><p>longjava.lang.Long</p><p>floatjava.lang.Float</p><p>double    java.lang.Double</p><p>boolean  java.lang.Boolean</p><p>char java.lang.Character</p><h4 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h4><p>装箱：基本数据类型转换为引用数据类型</p><p>拆箱：引用数据类型转换为基本数据类型</p><p>JDK1.5之后，支持自动装箱自动拆箱</p><p>自动装箱：Integer x &#x3D; 100;（x是个引用，保存的是内存地址指向对象）</p><p>自动拆箱：int y &#x3D; x;（在用运算符+ - * &#x2F;是会自动拆箱）</p><p>可以把基本类型的数据转换成字符串类型&#x3D;</p><p>​调用toString()方法得到字符串结果。<br>​调用Integer.toString(基本类型的数据)</p><p>可以把字符串类型的数值转换成真实的数据类型</p><p>​Integer.parseInt(“字符串类型的整数”)<br>​Double.parseDouble(“字符串类型的小数”)</p><h3 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h3><p>结果又两种以上并且可一列举出来的，建议使用枚举类型</p><p>枚举中的每个值可以看做是一个常量</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常：程序执行过程中的不正常情况 ，语法错误不算在异常体系中</p><p>作用：增强程序的健壮性</p><p>异常在java中以类的形式存在，每个异常类都可以创建异常对象</p><p>异常都是在运行阶段发生的，因为程序只有运行阶段才会new对象，因为异常的发生就是new异常对象</p><p>异常追踪信息从上往下看（SUN公司的代码就不用看了）</p><p>异常类可以自己定义：</p><ol><li>编写一个类继承Exception（编译时异常）或RuntimeException（运行时异常）</li><li>类中提供两个构造方法，一个无参的，一个带有String s参数的（语句中写super(s);）</li></ol><h4 id="异常结构"><a href="#异常结构" class="headerlink" title="异常结构"></a>异常结构</h4><p>Object:</p><p>​Object下有Throwable（可抛出的）（所有的异常都是可抛出的）</p><p>​Throwable下有两个分支：Error（不可处理的，直接退出JVM）和Exception（可处理的）</p><p>Exception：</p><p>​Exception的直接子类：编译时异常（受控异常）（程序员必须对该错误进行处理，否则编译器报错）</p><p>​RuntimeException：运行时异常（未受控异常）</p><h4 id="处理异常的两种方式"><a href="#处理异常的两种方式" class="headerlink" title="处理异常的两种方式"></a>处理异常的两种方式</h4><h5 id="throws关键字"><a href="#throws关键字" class="headerlink" title="throws关键字"></a>throws关键字</h5><ol><li>在方法声明的位置上使用throws关键字，抛给上一级（调用该方法的），上一级进行异常处理</li></ol><h5 id="try-catch"><a href="#try-catch" class="headerlink" title="try..catch"></a>try..catch</h5><ol><li>使用try{}catch(错误类名 变量名){}语句进行异常的捕捉</li></ol><p>只要异常没有捕捉，采取上报方式，此方法的后续代码将不被执行，若捕捉了则后续代码正常执行</p><h5 id="try-catch中的finally子句"><a href="#try-catch中的finally子句" class="headerlink" title="try..catch中的finally子句"></a>try..catch中的finally子句</h5><p>finally子句中的代码是最后执行的，并且一定会执行</p><p>通常在finally语句块中完成资源的释放和关闭</p><p>退出JVMfinally语句块不会执行</p><h4 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h4><p>throw new 异常类名(“1111”);手动抛出异常</p><p>String msg &#x3D; 变量名.getMessage();获取异常简单的描述信息（构造方法的参数）</p><p>变量名.printStackTrace();打印异常追踪的堆栈信息</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合实际上就是容器，可以一次容纳多个对象</p><p>集合不能直接存储基本数据类型和java对象，存储的是java对象的内存地址（引用）</p><p>每一个不同的集合底层对应不同的数据结构</p><h4 id="单个方式存储元素，这一类集合的超级父类是：java-util-Collection"><a href="#单个方式存储元素，这一类集合的超级父类是：java-util-Collection" class="headerlink" title="单个方式存储元素，这一类集合的超级父类是：java.util.Collection"></a>单个方式存储元素，这一类集合的超级父类是：java.util.Collection</h4><p>​接口：Iterable：可迭代的，可遍历的</p><p>​接口：Collection泛化（继承）Iterable接口：Iterator：集合的迭代器对象</p><p>​接口：List集合：有序（存进去的顺序和取出来的顺序相同，每个元素都有下标）可重复（元素值可以相同）</p><p>​实现类：ArrayList：底层是数组</p><p>​实现类：LinkedList：底层是双向链表</p><p>​实现类：Vector：底层是数组，线程安全的，效率较低，使用较少</p><p>​接口：Set集合：无序（存进去的顺序和取出来的顺序不同，没有下标）不可重复</p><p>​实现类：HashSet：底层是HashMap，放到HashSet集合中的元素等同于放到HashMap集合key部分了</p><p>​接口：SortedSet集合：无序不可重复，但是元素是可排序的（大小顺序排序）</p><p>​实现类：TreeSet：底层是HashMap，放到TreeSet集合中的元素等同于放到TreeMap集合key部分了</p><h5 id="Collection接口常用方法"><a href="#Collection接口常用方法" class="headerlink" title="Collection接口常用方法"></a>Collection接口常用方法</h5><p>​添加元素x：引用.add(x);   默认向集合末尾添加元素</p><p>​获取集合中元素的个数：引用.size();</p><p>​清空集合：引用.clear();</p><p>​判断集合中是否包含x：引用.contains(x);  要重写equals方法</p><p>​删除x元素：引用.remove(x);  要重写equals方法</p><p>​判断集合是否为空：引用.isEmpty();</p><p>​转换为数组：引用.toArray();</p><p>​迭代（遍历）集合：</p><p>​第一步：Iterator it &#x3D; 引用.iterator();获取集合的迭代器对象</p><p>​第二步：it.hasNext();判断是否还有元素可以迭代</p><p>​第三步：it.next();将迭代器前进一位，并且拿到迭代器指向的元素</p><p>如果数据结构发生变化，而没重写获取迭代器对象，java程序会报错，所以删除元素的时候要用迭代器指向当前元素（会自动更新迭代器和集合）</p><h5 id="List接口特有方法"><a href="#List接口特有方法" class="headerlink" title="List接口特有方法"></a>List接口特有方法</h5><p>在i位置处添加元素x：引用.add(i, x);   </p><p>获取i位置下的元素：引用.get(i);</p><p>获取x对象第一次出现处的索引（位置）：引用.indexOf(x);</p><p>获取x对象最后一次出现处的索引（位置）：引用.lastIndexOf(x);</p><p>删除i位置下的元素：引用.remove(i);</p><p>修改i位置下的元素：引用.set(i);</p><h5 id="ArrayList集合（数组）"><a href="#ArrayList集合（数组）" class="headerlink" title="ArrayList集合（数组）"></a>ArrayList集合（数组）</h5><p>默认初始化容量是10（底层先创建一个数组，当添加元素时容量变为10）</p><p>集合底层是Object[]数组</p><p>构造方法：new ArrayList();容量是10          new ArrayList(20);容量是20     new ArrayList(引用);将其他集合转换为ArrayList集合</p><p>ArrayList集合扩容增长到原容量的1.5倍</p><p>优点：检索，查找效率较高</p><h5 id="LinkedList集合（双向链表）"><a href="#LinkedList集合（双向链表）" class="headerlink" title="LinkedList集合（双向链表）"></a>LinkedList集合（双向链表）</h5><p>没有固定容量</p><p>底层是双向链表</p><p>优点：增删效率较高</p><p>first指向头结点的前结点</p><p>last指向尾结点的后结点</p><h5 id="vector集合-数组"><a href="#vector集合-数组" class="headerlink" title="vector集合(数组)"></a>vector集合(数组)</h5><p>底层是一个数组</p><p>默认初始化容量是10</p><p>vector集合扩容增长到原来的2倍 </p><p>vector中所有的方法是线程同步的，都带有synchronized关键字，是线程安全的</p><p>Collections.synchronizedList(引用);将非线程安全的转换为线程安全的</p><h5 id="TreeSet集合（TreeMap）"><a href="#TreeSet集合（TreeMap）" class="headerlink" title="TreeSet集合（TreeMap）"></a>TreeSet集合（TreeMap）</h5><p>TreeSet集合底层是一个TreeMap，TreeMap集合底层是一个二叉树</p><p>放到TreeSet集合中的元素，相当于存放在TreeMap集合的key部分</p><p>无序不可重复，但是对String类型自动排序，如果是自定义类型，需要实现Comparable接口并实现compareTo方法（里面写比较规则，其中返回0表示相同会覆盖value；返回&gt;0会继续在右子树上查找；返回&lt;0会在左子树上查找）或者要在构造TreeSet或TreeMap集合的时候给它传一个比较器对象（创建比较器类，比较器类实现Comparator接口并实现compare方法）</p><p>当比较规则不会发生改变或者比较规则只有一个时建议实现Comparable接口；如果比较规则有多个并且频繁切换时建议实现Comparator接口</p><p>TreeSet和TreeMap集合是自平衡二叉树，遵循左小右大的原则存放</p><p>TreeSet和TreeMap集合和Iterator迭代器采用的都是中序遍历方式（左根右）</p><h4 id="键值对的方式存储元素，这一类集合的超级父类是：java-util-Map"><a href="#键值对的方式存储元素，这一类集合的超级父类是：java-util-Map" class="headerlink" title="键值对的方式存储元素，这一类集合的超级父类是：java.util.Map"></a>键值对的方式存储元素，这一类集合的超级父类是：java.util.Map</h4><p>​接口：Map集合的key部分就是一个Set集合（往Set集合存放数据，实际上是往Map集合的key部分存放）</p><p>​实现类：HashMap：底层是哈希表</p><p>​实现类：Hashtable：底层是哈希表，是线程安全的，效率较低，使用较少</p><p>​属性类：Properties：是线程安全的，并且key和value只能存储字符串String</p><p>​接口：SortedMap集合：无序不可重复，但是元素是可排序的（大小顺序排序）</p><p>​实现类：TreeMap：底层是二叉树，TreeMap集合的key可以自动按照大小顺序排序</p><h5 id="Map接口常用方法"><a href="#Map接口常用方法" class="headerlink" title="Map接口常用方法"></a>Map接口常用方法</h5><p>Map集合一key和value的方式存储数据：键值对，key和value都是引用类型，key起主导作用</p><p>V put( K key, V value);向Map集合中添加键值对</p><p>V get(Object key);通过key获取value</p><p>void clear();清空集合</p><p>boolean containsKey(Object key);判断Map中是否包含某个key</p><p>boolean containsValue(Object value);判断Map中是否包含某个value</p><p>boolean isEmpty();判断集合是否为空</p><p>Set<K> keySet();获取Map中所有的key（所有的键是一个set集合）</K></p><p>V remove(Object key);通过key键删除键值对</p><p>int size();获取键值对个数</p><p>Collection<V> values();获取Map集合中所有的value</V></p><p>Set&lt;Map.Entry&lt;K, V&gt;&gt;entrySet();将Map集合转换为Set集合</p><p>Map集合：</p><p>​key  value</p><p>​1z</p><p>Set集合：</p><p>​1 &#x3D; z</p><p>Map集合通过entrySet()方法转换为Set集合，Set集合中元素类型是Map.Entry&lt;k,y&gt;</p><p>遍历Map集合</p><p>​法一：调用keySet获取所有的key，用迭代器调用get()通过key获取value通</p><p>​法二：调用entrySet()方法将Map集合直接全部转换为Set集合（元素将变为Map.Entry类型），在通过迭代器遍历Set集合，先拿到Map.Entry类型元素，在调用getKey()和getValue()逐个取出key和value</p><h5 id="HashMap集合（哈希表）"><a href="#HashMap集合（哈希表）" class="headerlink" title="HashMap集合（哈希表）"></a>HashMap集合（哈希表）</h5><p>底层是哈希表（数组和单链表组成）</p><p>默认初始化是16，当存储达到75%时，数组开始扩容，初始化容量必须是2的倍数</p><p>map.put(k, v)实现原理：</p><p>​第一步，先将k，v封装到Node对象中。第二步，底层会调用hashCode()方法得出hash值，然后通过哈希函数或哈希算法，将hash值转换为数组下标，下标位置上没有任何元素，就把Node添加到该位置上，如果下标位置上有链表，此时会拿着k和链表中的每个k进行equals，如果所有的equals返回的都是false，那么会将新节点添加到链表的末尾，如果有一个equals返回true，那么这个节点的value将会被覆盖</p><p>v &#x3D; map.get(k)实现原理：</p><p>​先调用hashCode()方法得出哈希值，通过哈希算法转换为数组下标，通过数组下标快速定位到某个位置上，如果该位置什么也没有，返回null，如果该位置上有单向链表，那么会拿着参数k和每个节点的k进行equals，如果所有的equals返回false，那么ger方法返回null，如果有一个equals返回true，那么此时该节点的value就是要找的</p><p>equals和hashCode方法必须重写，IDEA工具同时生成</p><p>HashMap的key和value都可以为null，Hashtable的key和value都不能为空</p><h5 id="Properties集合（哈希表）"><a href="#Properties集合（哈希表）" class="headerlink" title="Properties集合（哈希表）"></a>Properties集合（哈希表）</h5><p>Properties是一个Map集合，继承Hashtable，Properties的key和value都是String类型</p><p>存：引用.setProperty(“key”, “value”);</p><p>通过key取：引用.getProperty(“key”);</p><h5 id="TreeMap集合（二叉树）"><a href="#TreeMap集合（二叉树）" class="headerlink" title="TreeMap集合（二叉树）"></a>TreeMap集合（二叉树）</h5><p>TreeMap集合底层是一个二叉树</p><p>无序不可重复，但是对String类型自动排序，如果是自定义类型，需要实现Comparable接口并实现compareTo方法（里面写比较规则，其中返回0表示相同会覆盖value；返回&gt;0会继续在右子树上查找；返回&lt;0会在左子树上查找）或者要在构造TreeSet或TreeMap集合的时候给它传一个比较器对象（创建比较器类，比较器类实现Comparator接口并实现compare方法）</p><p>当比较规则不会发生改变或者比较规则只有一个时建议实现Comparable接口；如果比较规则有多个并且频繁切换时建议实现Comparator接口</p><p>TreeSet和TreeMap集合是自平衡二叉树，遵循左小右大的原则存放</p><p>TreeSet和TreeMap集合和Iterator迭代器采用的都是中序遍历方式（左根右）</p><h4 id="Collections工具类（集合工具类）"><a href="#Collections工具类（集合工具类）" class="headerlink" title="Collections工具类（集合工具类）"></a>Collections工具类（集合工具类）</h4><p>非线程安全的集合变为线程安全的集合：Collections.synchronizedList();</p><p>排序：Collections.sort();定义比较规则</p><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>File类可以定位文件：进行删除、获取文本本身信息等操作</p><p>File file &#x3D; new File(“文件&#x2F;文件&#x2F;绝对路径&#x2F;相对路径”);</p><table><thead><tr><th>public boolean isDirectory()</th><th>测试此抽象路径名表示的File是否为文件夹</th></tr></thead><tbody><tr><td>public boolean isFile()</td><td>测试此抽象路径名表示的File是否为文件</td></tr><tr><td>public boolean exists()</td><td>测试此抽象路径名表示的File是否存在</td></tr><tr><td>public String getAbsolutePath()</td><td>返回此抽象路径名的绝对路径名字符串</td></tr><tr><td>public String getPath()</td><td>将此抽象路径名转换为路径名字符串</td></tr><tr><td>public String getName()</td><td>返回由此抽象路径名表示的文件或文件夹的名称</td></tr><tr><td>public long lastModified()</td><td>返回文件最后修改的时间毫秒值</td></tr></tbody></table><table><thead><tr><th>public boolean createNewFile()</th><th>创建一个新的空的文件</th></tr></thead><tbody><tr><td>public boolean mkdir()</td><td>只能创建一级文件夹</td></tr><tr><td>public boolean mkdirs()</td><td>可以创建多级文件夹</td></tr></tbody></table><table><thead><tr><th>public boolean delete()</th><th>删除由此抽象路径名表示的文件或空文件夹</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>public String[] list()</th><th>获取当前目录下所有的”一级文件名称”到一个字符串数组中去返回。</th></tr></thead><tbody><tr><td>public File[] listFiles()(常用)</td><td>获取当前目录下所有的”一级文件对象”到一个文件对象数组中去返回（重点）</td></tr></tbody></table><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><p>硬盘-内存：读（Read），输入（Input），输入流（InputStream）</p><p>内存-硬盘：写（Write），输出（Output），输出流（OutputStream）</p><p>所有流都实现了Closeable接口，都是可关闭的，都有close()方法，并且用完流一定要关闭不然会浪费资源</p><p>所有的输出流都实现了Flushable接口，都是可刷新的，都有flush()方法，刷新就是强行将管道剩余数据输出，若不刷新可能会引起数据丢失</p><h4 id="IO流分类"><a href="#IO流分类" class="headerlink" title="IO流分类"></a>IO流分类</h4><p>节点流：一个流的构造方法需要一个流的时候，这个被传过去的流</p><p>包装流（处理流）：外部负责包装</p><p>关闭流时只需要关闭处理流即可，节点流会自动关闭</p><h5 id="按内存分"><a href="#按内存分" class="headerlink" title="按内存分"></a>按内存分</h5><p>往内存中去，叫做输入（Input）</p><p>从内存中出，叫做输出（Output）</p><h5 id="按读取方式"><a href="#按读取方式" class="headerlink" title="按读取方式"></a>按读取方式</h5><p>按照字节的方式，一次读取一个byte（一次读取个二进制位），这种流什么文件多可以读取，读取完文件时就会读取到-1</p><p>InputStream 字节输入流； OutputStream  字节输出流</p><p>按照字符的方式，一次读取一个字符，这种流只能读取纯文本文件</p><p>Reader 字符输入流； Writer  字符输出流</p><h4 id="16个IO流"><a href="#16个IO流" class="headerlink" title="16个IO流"></a>16个IO流</h4><p>文件专属：</p><p>​java.io.FileInputStream    </p><p>​创建一个byte数组（设置长度），读取文件时用流引用读取byte数组，输出时再将byte数组转换成字符串（读取多少转换多少，读取时会返回读取数量，读取完文件时就会读取到-1）</p><p>​其它常用方法：int available();返回流当中剩余的没有读到的字节数量</p><p>​long skip(long n);跳过几个字节不读</p><p>​java,io.FileOutputStream</p><p>​用writer写入文件，writer(“文件名”, 0, 长度)可以控制文件从什么位置写入，写入几个字节</p><p>​构造函数直接是创建的文件名字（入存在该文件会将该文件的内容清空），或者名字，true表示在文件的末尾处添加数据不删除原有数据</p><p>​java,io.FileReader</p><p>​创建一个char数组（设置长度），读取文件时用流引用读取char数组</p><p>​只能读取纯文本文件（能用记事本编辑的）</p><p>​java,io.FileWriter</p><p>转换流（将字节流转换为字符流）</p><p>​java,io.InputStreamReader</p><p>​java,io.OutputStreamWriter</p><p>缓冲流</p><p>​java,io.BufferedReader</p><p>​自带缓冲区不需要自定义char数组</p><p>​java,io.BufferedWriter</p><p>​java,io.BufferedInputStream</p><p>​java,io.BufferedOutputStream</p><p>数据流</p><p>​java.io.DataInputStream</p><p>​读取文件时需要知道写入的文件的类型顺序</p><p>​java.io.DataOutputStream</p><p>​将数据和数据类型一并写入文件</p><p>标准输出流</p><p>​不需要手动控制关闭流，默认指向控制台</p><p>​可以利用构造函数传参的形式，将标准输出流改变指向（输出时会输出的指向的文件）</p><p>​java.io.PrintWriter</p><p>​java.io.PrintStream</p><p>对象专属流</p><p>​java.io.ObiectInputStream  反序列化：DeSerialize，将硬盘上的数据重新恢复到内存中，恢复成java对象</p><p>​java.io.ObjectOutputStream  序列化：Serialize，java对象存储到硬盘文件中，将java对象的状态保存下来的过程</p><p>参与序列化和反序列化的对象，必须实现Serializeable接口（标志接口），java虚拟机看到这个接口，会为该类自动生成一个序列化版本号</p><p>序列化版本号是用来区分类的，java虚拟机默认提供序列化版本号，这导致java类在序列化后续不能修改代码（手动创建序列化版本号private static final long serialVersionUID &#x3D; 1111L）</p><h5 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h5><p>File不能完成读和写</p><p>File对象表示文件和目录路径名的抽象表示形式</p><h4 id="IO-Properties联合应用"><a href="#IO-Properties联合应用" class="headerlink" title="IO+Properties联合应用"></a>IO+Properties联合应用</h4><p>将文件中的数据加载到Properties对象中吗，新建一个输入流对象，新建一个Map集合，调用Properties对象的load方法将文件的数据加载到Map集合中，等号&#x3D;左边做key，等号&#x3D;右边做value</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="进程和线程的关系"><a href="#进程和线程的关系" class="headerlink" title="进程和线程的关系"></a>进程和线程的关系</h4><p>进程是一个应用程序，进程和进程之间的内存不共享</p><p>线程是一个进程中的执行场景&#x2F;执行单元，一个进程可以启动多个线程，线程和线程之间的堆内存和方法去内存共享，栈内存独立</p><h4 id="线程分类"><a href="#线程分类" class="headerlink" title="线程分类"></a>线程分类</h4><p>用户线程：main方法时一个用户线程</p><p>守护线程：一般是一个死循环，所有用户线程结束，守护线程自动结束；回收机制是一个守护线程</p><p>​setDaemon(true);将线程设置为守护线程</p><h4 id="实现线程"><a href="#实现线程" class="headerlink" title="实现线程"></a>实现线程</h4><h5 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h5><p>编写一个类，直接继承java.lang.Thread，重写run方法</p><p>创建线程对象，new继承了Thread的类</p><p>启动线程,调用线程对象的start方法，该方法会启动一个新的线程，开辟一个新的栈空间，启动线程成功 会自动调用run方法，并且run方法在分支线的栈底部，main方法在主线的栈底部（start方法只是为了开辟新的栈，瞬间结束）</p><h5 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h5><p>编写一个类，实现Runnable接口，实现run方法</p><p>创建实现Runnable接口的可运行的对象，将可运行的对象封装成一个线程对象（将实现Runnable接口的对象传到Thread对象中），启动线程</p><h5 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h5><p>这种方法实现线程可以获取线程的返回值</p><h4 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h4><p>setName() 设置线程名字</p><p>getName() 获取线程的名字</p><p>Thread.currentThread() 获取当前线程（该代码写在哪个线程的方法中，就获取的哪个线程）</p><p>sleep(毫秒) 让当前线程进入休眠状态（该代码写在哪个线程的方法中，就休眠的哪个线程）</p><p>interrupt() 终断睡眠（依靠了java的异常处理机制）</p><p>setPriority(优先数)设置线程优先级</p><p>getPriority()获取线程优先级</p><p>yield() 线程让位 该代码写在哪个线程的方法中，哪个线程让位）</p><p>t.join() 合并线程  当前线程进入阻塞，执行t线程</p><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>使用线程同步机制（线程排队），解决线程安全问题</p><p>同步：线程之间发生了等待关系，线程排队（效率较低）</p><p>synchronized(){在()中一定要写线程之间共享的对象，是谁和谁的共享对象谁和谁就会排队</p><p>​同步代码块;</p><p>}</p><p>synchronized可以写在实例方法上，表示同步代码块是整个方法体</p><p>synchronized可以写在静态方法上，表示找类锁</p><p>异步：谁也不需要等谁，多线程并发（效率较高）</p><p>死锁</p><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><p>通过java中的反射机制，可以操作字节码文件</p><h4 id="反射机制相关的重要类"><a href="#反射机制相关的重要类" class="headerlink" title="反射机制相关的重要类"></a>反射机制相关的重要类</h4><p>java.lang.Class：代表整个字节码，代表一个类型（整个类）</p><p>java.lang.reflect.Method：代表字节码中的方法字节码（类中的方法）</p><p>java.lang.reflect.Constructor：代表字节码中的构造方法字节码（类中的构造方法）</p><p>java.lang.reflect.Field：代表字节码中的属性字节码（类中的静态变量和实例变量）</p><h4 id="获取字节码（Class）"><a href="#获取字节码（Class）" class="headerlink" title="获取字节码（Class）"></a>获取字节码（Class）</h4><h5 id="Class-forName-“”"><a href="#Class-forName-“”" class="headerlink" title="Class.forName(“”);"></a>Class.forName(“”);</h5><p>是一个静态方法，方法的参数是一个字符串，字符串是一个完整的类名（带有包名）</p><p>这个代码的执行会加载类，所以类会执行静态代码块</p><h5 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass()方法"></a>getClass()方法</h5><h5 id="任何类型-class"><a href="#任何类型-class" class="headerlink" title="任何类型.class"></a>任何类型.class</h5><h4 id="利用反射机制获取对象的属性（Field）"><a href="#利用反射机制获取对象的属性（Field）" class="headerlink" title="利用反射机制获取对象的属性（Field）"></a>利用反射机制获取对象的属性（Field）</h4><p>首先获取整个类（利用Class.forName(“带包名的完整类名”)方法），然后创建该类文件的对象（利用利用newInstance()方法调用无参构造函数）</p><p>通过getDeclaredField(“属性名”)方法获取单个属性</p><p>利用set(对象，值)方法修改属性的值</p><p>利用get(对象)方法获取属性的值</p><p>（私有属性调用setAccessible(true)方法打破封装，才能获取到属性）</p><p>获取整个类之后再用getFileds()方法获取类中public修饰的所有属性，利用getDeclaredFileds()方法获取所有属性，利用getType()和getName方法获取属性的类型，用过getName()方法获取属性的名字，通过getModifiers()获取修饰符列表（返回的是修饰符代码int类型，利用Modifier.toString()方法将代号转换为字符串）</p><h4 id="利用反射机制调用方法（Method）"><a href="#利用反射机制调用方法（Method）" class="headerlink" title="利用反射机制调用方法（Method）"></a>利用反射机制调用方法（Method）</h4><p>首先获取整个类（利用Class.forName(“带包名的完整类名”)方法），然后创建该类文件的对象（利用newInstance()方法调用无参构造函数）</p><p>通过getDeclaredMethod(“方法名”， 形参类型.class)方法获取方法</p><p>利用invoke(对象，实参)方法调用类的方法</p><h4 id="利用反射机制创建对象"><a href="#利用反射机制创建对象" class="headerlink" title="利用反射机制创建对象"></a>利用反射机制创建对象</h4><p>首先获取整个类（利用Class.forName(“带包名的完整类名”)方法）</p><p>利用getDeclaredConstructor(形参类型.class)获取有参构造方法</p><p>利用newInstance()方法调用无参构造函数创建对象</p><h4 id="利用反射机制获取注解"><a href="#利用反射机制获取注解" class="headerlink" title="利用反射机制获取注解"></a>利用反射机制获取注解</h4><p>首先获取整个类（利用Class.forName(“带包名的完整类名”)方法）</p><p>利用isAnnotationPresent(x.class)方法判断类上是否有注解@x</p><p>利用getAnnotation(x.class)方法获取注解对象</p><p>利用注解对象.属性名()获取注解中的属性</p><h4 id="获取父类和父接口"><a href="#获取父类和父接口" class="headerlink" title="获取父类和父接口"></a>获取父类和父接口</h4><p>利用getSuperclass()方法获取父类</p><p>利用getSuperclass()方法获取所有接口</p><h3 id="注解（注释）"><a href="#注解（注释）" class="headerlink" title="注解（注释）"></a>注解（注释）</h3><p>注解Annotation是一种引用数据类型，编译之后也会生成xx.class文件</p><p>语法：</p><p>​[修饰符列表] @interface 注解类型名{}</p><p>使用规则：</p><pre><code class="hljs"> 1. @注解类型名 2. 默认注解可以出现在任何位置上</code></pre><p>如果注解中有属性，调用时必须给属性赋值（属性名 &#x3D; 属性值），除非利用default给属性指定默认值</p><p>（如果注解中只有一个属性名为value的属性，调用该注解可以直接给属性赋值（属性值））</p><h4 id="Override注解"><a href="#Override注解" class="headerlink" title="@Override注解"></a>@Override注解</h4><p>@Override注解只能注解方法</p><p>@Override注解是给编译器参考的，和运行阶段无关</p><p>java中的方法带有这个注解的，编译器都会进行编译检查，如果这个注解不是重写父类的方法，编译器报错</p><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>用来标注“注解类型”的“注解”，成为元注解</p><h5 id="常见的元注解"><a href="#常见的元注解" class="headerlink" title="常见的元注解"></a>常见的元注解</h5><p>@Target(ElementType.METHOD)元注解：只能出现在方法上</p><p>@Retention(RetentionPolicy.SOURCE)元注解：只能保留在java源文件中</p><p>@Retention(RetentionPolicy.CLASS)元注解：保存在class文件中</p><p>@Retention(RetentionPolicy.RUNTIME)元注解：保存在class文件中，并且可以被反射机制读取到</p><h3 id="窗口创建"><a href="#窗口创建" class="headerlink" title="窗口创建"></a>窗口创建</h3><h4 id="创建窗体"><a href="#创建窗体" class="headerlink" title="创建窗体"></a>创建窗体</h4><p>窗体类：javax.swing.JFrame</p><p>​创建一个类继承JFrame类，在该类中给窗口设置属性</p><p>​setTitle()：设置窗口标题</p><p>​setSize()：设置窗口大小</p><p>​setLocationRelativeTo(null)：设置窗口位置，null表示相当于屏幕左上角居中</p><p>​setResizable(false)：设置不允许玩家改变窗口大小，默认为true</p><p>​setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)：设置关闭窗口时结束程序</p><p>​在主程序将窗口显示：setVisible(true)</p><p>面板类：javax.swing.JPanel</p><p>​创建一个类继承JPanel类，在给类中给面板设置属性，在该类创建游戏的一切事物</p><p>​创建完成之后，new Thread(){}.start()新开启一个线程，运行面板游戏中的事物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用鼠标监听器</span><br><span class="hljs-type">MouseAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseAdapter</span>() &#123;<br>    <span class="hljs-comment">//创建鼠标适配器</span><br>&#125;;<br><span class="hljs-comment">//将鼠标适配器装入到面板监听器中</span><br>addMouseListener(adapter);<br>addMouseMotionListener(adapter);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyAdapter</span> <span class="hljs-variable">adapter1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyAdapter</span>() &#123;<br>    <span class="hljs-comment">//创建键盘适配器</span><br>&#125;;<br><span class="hljs-comment">//将键盘适配器添加到窗体的监视器中</span><br>frame.addKeyListener(adapter1);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//专门画图的方法，将图片画到面板中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        <span class="hljs-comment">//画背景</span><br>        g.drawImage(bj, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">500</span>, <span class="hljs-number">800</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//画战斗机</span><br>        g.drawImage(hero.img, hero.x, hero.y, hero.w, hero.h, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//画分数</span><br>        g.setColor(Color.WHITE);<br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;楷体&quot;</span>, Font.BOLD, <span class="hljs-number">20</span>));<br>        g.drawString(<span class="hljs-string">&quot;分数：&quot;</span>+score, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取图片的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建静态方法，调用时不用创建对象，直接用类名调用</span><br><span class="hljs-comment">     * path 获取该项目中的相对路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BufferedImage <span class="hljs-title function_">getImg</span><span class="hljs-params">(String path)</span>&#123;<br>        <span class="hljs-comment">//使用反射机制获取该类的路径,相对于src</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> ImageIO.read(App.class.getResource(path));<br>            <span class="hljs-comment">//如果找到图片返回该图片</span><br>            <span class="hljs-keyword">return</span> img;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">//没有找对该图片则抛出异常，程序停止运行</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h3><h5 id="JVM内存"><a href="#JVM内存" class="headerlink" title="JVM内存"></a>JVM内存</h5><p>方法区内存：存放class字节码代码片段，静态变量存放在方法区内存中</p><p>栈内存：执行方法时分配的内存</p><p>堆内存：存放new创建的对象</p><h5 id="Javac是一个编译器工具"><a href="#Javac是一个编译器工具" class="headerlink" title="Javac是一个编译器工具"></a>Javac是一个编译器工具</h5><p>javac  java源文件路径（在DOS中使用）</p><p>配置path环境，使在任意位置都可以使用javac</p><p>java源文件编译之后生成一个class文件，最终程序运行class文件</p><h5 id="java是一个运行工具"><a href="#java是一个运行工具" class="headerlink" title="java是一个运行工具"></a>java是一个运行工具</h5><p>java  类名（在DOS中使用，使用时必须将目录打开到该类所在的目录）</p><p>配置classpath环境，使在当前路径可以使用java</p><h5 id="javadoc注释"><a href="#javadoc注释" class="headerlink" title="javadoc注释"></a>javadoc注释</h5><p>&#x2F;**</p><ul><li></li><li></li></ul><p>*&#x2F;  该注释会被javadoc.exe工具解析提取并生成帮助文档</p><h5 id="public-class-和class的区别"><a href="#public-class-和class的区别" class="headerlink" title="public class 和class的区别"></a>public class 和class的区别</h5><p>一个 java源文件中可以有多个class</p><p>一个java源文件中的一个class会生成一个**.class字节码文件</p><p>一个java源文件中不是必须包含public class ，如果包含则源文件名和该类名必须保持一致（只能包含一个public class）</p><p>每个class中可以编写一个main方法，运行时可以单个执行class字节码文件</p><h5 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h5><p>间隔特定的时间，指定特定的程序</p><p>定时器：java.util.Timer</p><p>​schedule(定时任务，定时开始时间，定时时间)</p><p>Spring框架中有定时器</p><h5 id="可变长度参数"><a href="#可变长度参数" class="headerlink" title="可变长度参数"></a>可变长度参数</h5><p>语法：类型…</p><p>参数长度为0-n个</p><p>可变长度参数列表必须在最后一个位置上，而且只能有一个</p><p>可变长度参数可以看成是一个数组</p><h5 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h5><p>启动类加载器：加载C:\Program Files\Java\jdk1.8.0_221\jre\lib\rt.jar</p><p>扩展类加载器：C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext*.jar</p><p>应用类加载器：classpath中的jar包</p><p>代码在开始执行之前，会将所需要的类全部加载到JVM当中</p><p>首先通过启动类加载器，如果通过类加载器加载不到时，会通过拓展类加载器加载，如果拓展类加载器加载不到，会通过应用类加载器加载</p><p>java中为了保证类加载的安全使用了双亲委派机制</p><h5 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h5><p>通过newInstance()方法，实例化对象（内部实际上调用了无参构造方法）</p><p>通过IO流读取属性文件（&#x3D;形式），将文件内容加载到Map集合中，通过key获取value，通过反射机制获取字节码文件，在创建对象</p><h5 id="获取一个文件的绝对路径"><a href="#获取一个文件的绝对路径" class="headerlink" title="获取一个文件的绝对路径"></a>获取一个文件的绝对路径</h5><p>Thread.currentThread().getContextClassLoader().getResource(“文件名.文件类型”).getPath();</p><p>该文件必须在类（src）目录下</p><h5 id="资源绑定器"><a href="#资源绑定器" class="headerlink" title="资源绑定器"></a>资源绑定器</h5><p>只能绑定xx.properties文件，并且该文件必须在类路径下</p><p>ResourceBundle bundle &#x3D; ResourceBundle.getBundle(“文件名”);</p><h5 id="UML：统一建模语言"><a href="#UML：统一建模语言" class="headerlink" title="UML：统一建模语言"></a>UML：统一建模语言</h5><p>工程初期设计类与类之间的关系</p><h5 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h5><p>在包java.util中</p><h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符\"></a>转义字符\</h5><p>\将普通字符转义为特殊字符，将特殊字符转义为普通字符</p><h5 id="native2ascii-exe命令"><a href="#native2ascii-exe命令" class="headerlink" title="native2ascii.exe命令"></a>native2ascii.exe命令</h5><p>将文字转化为unicode编码形式</p><h5 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h5><p>字面值就是数据</p><h5 id="包机制packa"><a href="#包机制packa" class="headerlink" title="包机制packa"></a>包机制packa</h5><p>在java源文件中的第一句编写package语句（package 包名）</p><p>包名：公司域名倒序+项目名+模块+功能名</p><p>使用package机制后，运行时要创建想要的文件夹（类名变为包名（调用时））</p><h5 id="import"><a href="#import" class="headerlink" title="import"></a>import</h5><p>用来完成导入其他类</p><p>import 类名   或   import 包名.*</p><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p>优点：集合中存储的元素类型统一，从集合中取出的元素类型是泛型指定的类型，不需要大量的向下类型转换</p><p>砖石表达式：JDK8之后new 类名&lt;这里的类型会自动推断&gt;</p><h5 id="增强for循环：foreach"><a href="#增强for循环：foreach" class="headerlink" title="增强for循环：foreach"></a>增强for循环：foreach</h5><p>for (元素类型 变量名：数组或集合){</p><p>​System.out.println(变量名);  输出的就是数组或集合的各个元素</p><p>}  </p><p>缺点：没有下标</p><h5 id="java对日期的处理"><a href="#java对日期的处理" class="headerlink" title="java对日期的处理"></a>java对日期的处理</h5><ol><li><p>获取系统时间：java.util.Date Time &#x3D; new java.util.Date();直接调用无参构造方法，获取系统时间</p></li><li><p>Date转换为String：java.text.SimpleDateFormat sdf &#x3D; new java.text.SimpleDateFormat(“yyyy-MM-dd HH:mm:ss SSS”);专门处理设置输出时日期格式</p><p>（年y，月M，日d，时H，分m，秒s，毫秒S）几个表示几位</p><p>用该格式调用format()方法，将获取的系统时间传入，输出日期</p></li><li><p>String转换为Date：调用parse()方法（字符串字符格式和SimpleDateFormat格式要相同）</p></li></ol><p>long x &#x3D; System.currentTimeMillis();获取一个毫秒数</p><p>高精度处理数字：BigDecimal();</p><h5 id="通过常量获取最大值最小值"><a href="#通过常量获取最大值最小值" class="headerlink" title="通过常量获取最大值最小值"></a>通过常量获取最大值最小值</h5><p>最大值：包装类.MAX_VALUE</p><p>最小值：枣庄类.MIN_VALUE</p><h5 id="String、int、Integer之间的互相转换"><a href="#String、int、Integer之间的互相转换" class="headerlink" title="String、int、Integer之间的互相转换"></a>String、int、Integer之间的互相转换</h5><p>String-int:Integer.parseInt(“123”);</p><p>int-String:数字+‘’“，String.valueOf(int)</p><p>int-Integer:装箱</p><p>Integer-int:装箱</p><p>String-Integer:Integer.valueOf(“123”)</p><p>Integer-String:Integer.valueOf(Integer对象)</p><h5 id="main方法String参数"><a href="#main方法String参数" class="headerlink" title="main方法String参数"></a>main方法String参数</h5><p>接收用户参数，可以通过Run-Edit设置账户，密码</p><h5 id="类型和类型之间的关系"><a href="#类型和类型之间的关系" class="headerlink" title="类型和类型之间的关系"></a>类型和类型之间的关系</h5><p>is a（我是一个人）（A extends B）：满足is a的表示继承关系</p><p>has a（我有一个电脑）(A{ B b; })：满足has a的表示关联关系  通常以属性的方式存在</p><p>like a（厨师像菜单）(A implements B)：满足like a的表示实现关系  通常是类实现接口</p><h5 id="内部类-1"><a href="#内部类-1" class="headerlink" title="内部类"></a>内部类</h5><p>静态内部类</p><p>实例内部类</p><p>局部内部类</p><p>匿名内部类：new一个接口，但是要加{}实现接口中的抽象方法</p><h5 id="集成开发环境IDE"><a href="#集成开发环境IDE" class="headerlink" title="集成开发环境IDE"></a>集成开发环境IDE</h5><p>workspace：工作区，将编写的java代码和自动生成的class字节码文件存放在工作区</p><p>.metadata文件存放MEclipse软件的工作状态</p><p>打开窗口：Window–show view–Other</p><p>切换布局：右上角</p><p>还原布局：window–reset</p><p>Package Explore、Navigator、Project Explore：可以看到java源文件</p><p>Console：控制台窗口</p><p>创建java工程：创建工程名称（一般小写），指定java存放的路径，选择java运行环境（JRE配置），Project layout工程的目录布局（多数情况下，选择两个独立的文件夹存放源码src和字节码bin），在src目录下创建软件包（package机制）new–package，在软件包下创建一个java类new–class</p><p>显示行号：左侧栏–show line number</p><p>字体设置：window–Preferences–输入font–colors and fonts–Basic–Text Font–Edit</p><p>快捷键：ctrl-D 删除一行，alt-&#x2F;自动补全，出现红色下划线表示出错Ctrl -1自动纠错，Ctrl-&#x2F;单行注释，Ctrl-shift-&#x2F;多行注释</p><p>Ctrl-鼠标移动到该位置点击可查看访问那个属性，alt+insert快速生成</p><p>设置断点–右键–Debug</p><h5 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h5><p>编译会通过，运行时出现错误：java.lang.NullPointerException</p><p>原因：空引用访问“实例”相关的数据一定会出现空指针异常（实例相关的数据：有对象参与的数据）</p><p>（当对象呗回收了，但引用还指向该对象时引起的空引用）</p><h5 id="键盘输入数据"><a href="#键盘输入数据" class="headerlink" title="键盘输入数据"></a>键盘输入数据</h5><p>java.util.Scanner s &#x3D; new  java.util.Scanner(System.in);</p><p>String str &#x3D; s.next();或int num &#x3D; s.nextInt();</p><h5 id="屏幕输出"><a href="#屏幕输出" class="headerlink" title="屏幕输出"></a>屏幕输出</h5><p>System.out.println(“”);</p><h5 id="自动垃圾回收机制（GC机制）"><a href="#自动垃圾回收机制（GC机制）" class="headerlink" title="自动垃圾回收机制（GC机制）"></a>自动垃圾回收机制（GC机制）</h5><p>当堆内存中的java对象成为垃圾数据时会被垃圾回收器回收</p><h3 id="日志技术"><a href="#日志技术" class="headerlink" title="日志技术"></a>日志技术</h3><p>可以将系统执行的信息选择性的记录到指定的位置（控制台、文件中、数据库中）。</p><p>可以随时以开关的形式控制是否记录日志，无需修改源代码。</p><p>使用：</p><p>在项目下新建文件夹lib，导入Logback的相关jar包到该文件夹下，并添加到项目依赖库中去。</p><p>②：将Logback的核心配置文件logback.xml直接拷贝到src目录下（必须是src下）。<br>③：在代码中获取日志的对象</p><p>public static final Logger LOGGER &#x3D; LoggerFactory.getLogger(“类对象”);</p><p>④：使用日志对象LOGGER调用其方法输出不能的日志信息</p><p>输出到控制台的配置标志：<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"></appender></p><p>输出到系统文件的配置标志：<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"></appender></p><p>具体在<root level="INFO">标签的level属性中设置日志级别。</root></p><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><p><strong>实现网络编程关键的三要素</strong></p><p>​IP地址：设备在网络中的地址，是唯一的标识。<br>​端口：应用程序在设备中唯一的标识。<br>​协议:   数据在网络中传输的规则，常见的协议有UDP协议和TCP协议。</p><p><strong>IP常用命令：</strong><br>    ipconfig：查看本机IP地址<br>    ping IP地址：检查网络是否连通</p><p>注意：本机IP: 127.0.0.1或者localhost：称为回送地址也可称本地回环地址，只会寻找当前所在本机</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)</p><p>主要计算循环次数</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><ol><li>计算机访问内存方式是一次访问一个字节</li><li>一个引用需用8个字节；一个对象开销是16个字节</li><li>一般内存，如果不够8个字节，都会补充为8个字节</li></ol><h2 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h2><h3 id="Comparable类"><a href="#Comparable类" class="headerlink" title="Comparable类"></a>Comparable类</h3><ol><li>继承该类，用来定义排序规则</li><li>重写compareTo方法（比较规则）</li></ol><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>比较相邻的元素，若前一个元素比后一个元素大，就交换两个元素的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bubble</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=a.length-<span class="hljs-number">1</span>; i&gt;<span class="hljs-number">0</span>; i--)&#123;<span class="hljs-comment">//定义参与比较的元素个数，数量依次递减（参与排序的最后的的元素是排序完成的）</span><br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<span class="hljs-comment">//从低到高将相邻元素进行比较</span><br>                <span class="hljs-keyword">if</span> (greater(a[j], a[j+<span class="hljs-number">1</span>]))&#123;<br>                 exch(a, j, j+<span class="hljs-number">1</span>);<br>                &#125;<br>         &#125;<br>        &#125;<br> &#125;<br>    <span class="hljs-comment">//比较元素大小</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">greater</span><span class="hljs-params">(Comparable v, Comparable w)</span>&#123;<br>        <span class="hljs-keyword">return</span> v.compareTo(w)&gt;<span class="hljs-number">0</span>;·<br> &#125;<br>    <span class="hljs-comment">//交换元素的位置</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        Comparable team;<br>     team = a[i];<br>        a[i] = a[j];<br>     a[j] = team;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>冒泡排序的时间复杂度为O(n^2)</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>在参与比较的元素中选取第一个位置的元素和其他所有的元素进行比较，若小于该元素，就交换两个元素的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//选择排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Selection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;a.length-<span class="hljs-number">1</span>; i++)&#123;<span class="hljs-comment">//在参与比较的元素中选择默认最小的元素位置</span><br>            <span class="hljs-comment">//int minIndex = i;</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=i; j&lt;a.length; j++)&#123;<span class="hljs-comment">//在参与比较的元素中选择默认最小元素和其他元素依次进行比较</span><br>                <span class="hljs-keyword">if</span> (greater(a[i], a[j]))&#123;<br>                   <span class="hljs-comment">// minIndex = j;</span><br>                    exch(a, i, j);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">greater</span><span class="hljs-params">(Comparable v, Comparable w)</span>&#123;<br>        <span class="hljs-keyword">return</span> v.compareTo(w)&gt;<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        Comparable team;<br>        team = a[i];<br>        a[i] = a[j];<br>        a[j] = team;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>选择排序的时间复杂度为O(n^2)</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>将参与排序的元素分为两组，已排序的和未排序的（默认第一个元素为已排序的元素）</p><p>在未排序的序列中用第一个元素，向已排序的序列中插入</p><p>倒序遍历已排序的序列，依次和待插入元素比较，找到比待插入的元素小的元素插入到该位置，其他元素向后移一个位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//插入排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Insertion</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt; a.length; i++)&#123;<span class="hljs-comment">//将未排序的元素依次插入到已排序的序列中（默认第一个元素是已经排序的元素）</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=i; j&gt;<span class="hljs-number">0</span>; j--)&#123;<span class="hljs-comment">//倒序遍历已排序的元素，与要插入的元素进行比较</span><br>                <span class="hljs-keyword">if</span> (greater(a[j-<span class="hljs-number">1</span>], a[j]))&#123;<br>                    exch(a, j-<span class="hljs-number">1</span>, j);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">greater</span><span class="hljs-params">(Comparable v, Comparable w)</span>&#123;<br>        <span class="hljs-keyword">return</span> v.compareTo(w)&gt;<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        Comparable temp;<br>        temp = a[i];<br>        a[i] = a[j];<br>        a[j] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入排序的时间复杂度为O(n^2)</p><h2 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h2><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232430575.png" alt="image-20220402232430575" style="zoom:80%;"><p>选定一个增长量h，对数据进行分组（确定增长量的初始值：int h&#x3D;1; while(h&lt;数组长度&#x2F;2){h&#x3D;2h+1}     增长量减小：h&#x3D;h&#x2F;2）</p><p>对每一组数据进行插入排序</p><p>减小增长量，最小为1，再进行插入排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//希尔排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (h&lt;a.length/<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//确定h的初始值</span><br>            h = <span class="hljs-number">2</span>*h+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (h&gt;=<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//缩小h的值，直到h为1</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=h; i&lt; a.length; i++)&#123;<span class="hljs-comment">//确定参与排序的元素</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=i; j&gt;=h; j-=h)&#123;<span class="hljs-comment">//进行插入排序，倒序遍历已经分组的元素（h为分组依据）</span><br>                    <span class="hljs-keyword">if</span> (greater(a[j-h], a[j]))&#123;<br>                        exch(a, j-h, j);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            h = h/<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">greater</span><span class="hljs-params">(Comparable v, Comparable w)</span>&#123;<br>        <span class="hljs-keyword">return</span> v.compareTo(w)&gt;<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        Comparable temp;<br>        temp = a[i];<br>        a[i] = a[j];<br>        a[j] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232449607.png" alt="image-20220402232449607" style="zoom:80%;"><p>将数据进行拆分为相等的子组，再将子组进行拆分，直到拆分的子组中元素的个数为1（递归）</p><p>将相邻的两个子组分合并为一个大组（按照顺序进行元素的先后合并）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Merge</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Comparable[] assist;<span class="hljs-comment">//临时存储空间</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span>&#123;<br>        assist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparable</span>[a.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lo</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> a.length-<span class="hljs-number">1</span>;<br><br>        sort(a, lo, hi);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi)</span>&#123;<br><br>        <span class="hljs-keyword">if</span> (lo&gt;=hi)&#123;<span class="hljs-comment">//效验</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> lo+(hi-lo)/<span class="hljs-number">2</span>;<span class="hljs-comment">//将参与排序的元素等分</span><br><br>        sort(a, lo, mid);<span class="hljs-comment">//递归调用第一组的元素再进行分组，直到分组的元素个数为1</span><br>        sort(a, mid+<span class="hljs-number">1</span>, hi);<span class="hljs-comment">//递归调用第二组元素再进行分组，直到分组的元素个数为1</span><br><br>        merge(a, lo, mid, hi);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">less</span><span class="hljs-params">(Comparable v, Comparable w)</span>&#123;<br>        <span class="hljs-keyword">return</span> v.compareTo(w)&lt;<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> hi)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> lo;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> lo;<span class="hljs-comment">//指针指向第一组的第一个元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> mid+<span class="hljs-number">1</span>;<span class="hljs-comment">//指针指向第二组的第一个元素</span><br><br>        <span class="hljs-keyword">while</span> (p1&lt;=mid &amp;&amp; p2&lt;=hi)&#123;<span class="hljs-comment">//将两组元素进行合并</span><br>            <span class="hljs-keyword">if</span> (less(a[p1], a[p2]))&#123;<br>                assist[i++] = a[p1++];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                assist[i++] = a[p2++];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (p1&lt;=mid)&#123;<br>            assist[i++] = a[p1++];<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (p2&lt;=hi)&#123;<br>            assist[i++] = a[p2++];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index=lo; index&lt;=hi; index++)&#123;<span class="hljs-comment">//将临时存储的数据添加到数组中</span><br>            a[index] = assist[index];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>归并排序的时间复杂度为O(nlogn)</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232506770.png" alt="image-20220402232506770" style="zoom:80%;"><p>设定一个分界值，通过该分界值将数据进行分组</p><p>将大于等于分界值的元素放在数组的右边，小于分界值的元素放在分界值得左边</p><p>将分界值两边的数据进行重复分界的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Quick</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lo</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> a.length-<span class="hljs-number">1</span>;<br><br>        sort(a, lo, hi);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi)</span>&#123;<br>        <span class="hljs-keyword">if</span> (lo&gt;=hi)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">partition</span> <span class="hljs-operator">=</span> partition(a, lo, hi);<span class="hljs-comment">//确定分界值位置</span><br><br>        sort(a, lo, partition-<span class="hljs-number">1</span>);<span class="hljs-comment">//将分界值左边的元素进行再次分组</span><br>        sort(a, partition+<span class="hljs-number">1</span>, hi);<span class="hljs-comment">//将分界值右边的元素进行再次分组</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">less</span><span class="hljs-params">(Comparable v, Comparable w)</span>&#123;<br>        <span class="hljs-keyword">return</span> v.compareTo(w)&lt;<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi)</span> &#123;<br>        <span class="hljs-type">Comparable</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> a[lo];<span class="hljs-comment">//确定每组的第一个元素为分界值</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> lo;<span class="hljs-comment">//指针指向每组的第一个元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> hi+<span class="hljs-number">1</span>;<span class="hljs-comment">//指针指向每组的最后一个元素的下一个位置</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">while</span> (less(key, a[--right]))&#123;<span class="hljs-comment">//从最右边查找比分界值小的元素</span><br>                <span class="hljs-keyword">if</span> (right==lo)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (less(a[++left], key))&#123;<span class="hljs-comment">//从最左边查找比分界值大的元素</span><br>                <span class="hljs-keyword">if</span> (left==hi)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left&gt;=right)&#123;<span class="hljs-comment">//判断是否查找成功</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                exch(a, left, right);<span class="hljs-comment">//交换查找到的两个元素</span><br>            &#125;<br>        &#125;<br><br>        exch(a, lo, right);<span class="hljs-comment">//交换分界值和中间元素的位置</span><br><br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        Comparable temp;<br>        temp = a[i];<br>        a[i] = a[j];<br>        a[j] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232620953.png" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//堆排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeapSort</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&gt;&#123;<br><br>    <span class="hljs-comment">//排序</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] source)</span>&#123;<br>        <span class="hljs-comment">//构造堆数组</span><br>        Comparable [] heap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparable</span>[source.length+<span class="hljs-number">1</span>];<br>        createHeap(source, heap);<br><br>        <span class="hljs-comment">//堆数组的0位置不存储数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> heap.length-<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//将所有元素进行交换</span><br>        <span class="hljs-keyword">while</span> (N!=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//树的根节点/堆数组的首结点是最大元素，将最大元素放在N位置处</span><br>            exch(heap, <span class="hljs-number">1</span>, N);<br>            N--;<br>            <span class="hljs-comment">//将1位置的元素进行下沉调整，令1位置的元素仍为最大元素</span><br>            sink(heap, <span class="hljs-number">1</span>, N);<br>        &#125;<br>        System.arraycopy(heap, <span class="hljs-number">1</span>, source, <span class="hljs-number">0</span>, source.length);<br>    &#125;<br><br>    <span class="hljs-comment">//构造堆数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createHeap</span><span class="hljs-params">(Comparable[] source, Comparable[] heap)</span>&#123;<br>        System.arraycopy(source, <span class="hljs-number">0</span>, heap, <span class="hljs-number">1</span>, source.length);<br><br>        <span class="hljs-comment">//堆的下沉调整（循环调整一半就相当于将所有元素进行了调整）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (heap.length)/<span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            sink(heap, i, heap.length-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//判断索引处数组的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">less</span><span class="hljs-params">(Comparable[] heap, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">return</span> heap[i].compareTo(heap[j])&lt;<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//交换索引处位置的元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(Comparable[] heap, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-type">Comparable</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> heap[i];<br>        heap[i] = heap[j];<br>        heap[j] = temp;<br><br>    &#125;<br><br>    <span class="hljs-comment">//下浮法将元素向下移动</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sink</span><span class="hljs-params">(Comparable[] heap, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> range)</span>&#123;<br>        <span class="hljs-comment">//循环到完全二叉树的最底层</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">2</span>*target&lt;=range)&#123;<br>            <span class="hljs-type">int</span> max;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span>*target+<span class="hljs-number">1</span>&lt;=range)&#123;<br>                <span class="hljs-comment">//比较出是左结点大还是右结点大</span><br>                <span class="hljs-keyword">if</span> (less(heap, <span class="hljs-number">2</span>*target, <span class="hljs-number">2</span>*target+<span class="hljs-number">1</span>))&#123;<br>                    max = <span class="hljs-number">2</span>*target+<span class="hljs-number">1</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    max = <span class="hljs-number">2</span>*target;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                max = <span class="hljs-number">2</span>*target;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!less(heap, target, max))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//将该结点和最大结点的数据交换位置，令最大元素向上移动，最小元素</span><br>            exch(heap, target, max);<br><br>            target = max;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="排序的稳定性"><a href="#排序的稳定性" class="headerlink" title="排序的稳定性"></a>排序的稳定性</h3><p>冒泡排序，插入排序，归并排序是稳定的排序算法</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232639220.png" alt="image-20220402232639220" style="zoom:80%;"><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232659385.png" alt="image-20220402232659385" style="zoom:80%;"><ol><li><p>计算机内存中以数组的方式存储，一组地址连续的存储单元</p></li><li><p>java中ArrayList集合，底层是顺序表</p></li><li><p>改查相对较快，增删相对较慢</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">//顺序表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SequenceList</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;T&gt;&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<span class="hljs-comment">//确定顺序表的长度</span><br>    <span class="hljs-keyword">private</span> T[] eles;<span class="hljs-comment">//创建一个数组存放数据</span><br><br>    <span class="hljs-comment">//构造方法，初始化顺序表</span><br>    SequenceList(<span class="hljs-type">int</span> capacity)&#123;<br>        eles = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<span class="hljs-comment">//令数组的引用指向相相应的内存</span><br>        N = <span class="hljs-number">0</span>;<span class="hljs-comment">//顺序表长度为0</span><br>    &#125;<br><br>    <span class="hljs-comment">//清空顺序表元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>&#123;<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//判断顺序表是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N==<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//获取顺序表长度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-comment">//获取顺序表指定位置的元素</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">return</span> eles[i];<br>    &#125;<br><br>    <span class="hljs-comment">//向指定位置插入一个元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, T t)</span>&#123;<br>        <span class="hljs-keyword">if</span> (N==eles.length)&#123;<span class="hljs-comment">//扩容操作，创建新的数组存放数据</span><br>            resize(<span class="hljs-number">2</span>*eles.length);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> N-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j)&#123;<span class="hljs-comment">//将要插入位置后的元素向后移一位</span><br>            eles[j+<span class="hljs-number">1</span>] = eles[j];<br>            j--;<br>        &#125;<br>        eles[i] = t;<br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">//插入一个元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T t)</span>&#123;<br>        <span class="hljs-keyword">if</span> (N==eles.length)&#123;<br>            resize(<span class="hljs-number">2</span>*eles.length);<br>        &#125;<br>        eles[N++] = t;<br>    &#125;<br><br>    <span class="hljs-comment">//删除指定位置的元素，并将删除的元素返回</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> eles[i];<br><br>        <span class="hljs-keyword">if</span> (N&lt;eles.length/<span class="hljs-number">4</span>)&#123;<span class="hljs-comment">//缩容操作</span><br>            resize(eles.length/<span class="hljs-number">2</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=i; j&lt;N-<span class="hljs-number">1</span>; j++)&#123;<span class="hljs-comment">//将要删除的元素后的数据前移一位</span><br>            eles[j] = eles[j+<span class="hljs-number">1</span>];<br>        &#125;<br>        N--;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-comment">//查找指定数据第一次出现的位置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(T t)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++)&#123;<br>            <span class="hljs-keyword">if</span> (eles[i].equals(t))&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//数据扩容操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">(<span class="hljs-type">int</span> newSize)</span>&#123;<br>        T[] temp = eles;<span class="hljs-comment">//让temp指向原数据</span><br>        eles = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[newSize];<span class="hljs-comment">//创建新数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++)&#123;<br>            eles[i] = temp[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//重写Iterable接口的iterator方法，实现顺序表的遍历</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;T&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;T&gt;() &#123;<br><br>            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> cusor;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">//判断是否遍历到顺序表末尾</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> cusor&lt;N;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">//获取依次获取相应位置的数据</span><br>            <span class="hljs-keyword">public</span> T <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> eles[cusor++];<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232721160.png" alt="image-20220402232721160" style="zoom:80%;"><ol><li>物理存储单元不连续，逻辑储存单元连续</li><li>存储单位是结点，运用指针连接各个结点</li><li>改查相对较慢，增删相对较快</li></ol><h4 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h4><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232733930.png" alt="image-20220402232733930" style="zoom:80%;"><ol><li><p>多个结点组成，每个结点由一个数据域和一个指针域组成</p></li><li><p>头结点不存储数据，指针域指向第一个存储数据的结点</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">//单向链表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">//结点内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>        T item;<span class="hljs-comment">//数据域，存放数据</span><br>        Node next;<span class="hljs-comment">//指针域，指向下一结点</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">( )</span>&#123;<br>            <span class="hljs-built_in">this</span>.item = <span class="hljs-literal">null</span>;<br>            <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">( T item, Node next)</span>&#123;<br>            <span class="hljs-built_in">this</span>.item = item;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node head;<span class="hljs-comment">//创建头指针，指向头结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<span class="hljs-comment">//链表长度</span><br><br>    <span class="hljs-comment">//构造函数，初始化链表</span><br>    LinkList()&#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<span class="hljs-comment">//创建头结点</span><br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//清空链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>&#123;<br>        head.next = <span class="hljs-literal">null</span>;<br>        N = <span class="hljs-number">0</span>；<br>    &#125;<br><br>    <span class="hljs-comment">//判断链表是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N==<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//返回链表长度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-comment">//查找第i位置的数据</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp.item;<br>    &#125;<br><br>    <span class="hljs-comment">//向第i位置插入数据t</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, T t)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<span class="hljs-comment">//检索到第i-1的为·值</span><br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(t, temp.next);<br>        temp.next = newNode;<br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">//添加一个结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T t)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (temp.next!=<span class="hljs-literal">null</span>)&#123;<br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(t, <span class="hljs-literal">null</span>);<br>        temp.next = newNode;<br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">//删除第i个结点</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        T t;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span>head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<br>            temp = temp.next;<br>        &#125;<br>        t = temp.next.item;<br>        temp.next = temp.next.next;<br>        N--;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-comment">//查找t元素在链表的位置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(T t)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-literal">null</span>)&#123;<br>            temp = temp.next;<br><br>            <span class="hljs-keyword">if</span> (temp.item.equals(t))&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                i++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//重写iterator方法，定义遍历规则</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;T&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;T&gt;() &#123;<br><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> temp.next != <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> T <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                temp = temp.next;<br>                <span class="hljs-keyword">return</span> temp.item;<br>            &#125;<br>        &#125;;<br>    &#125;<br>    <br>    <span class="hljs-comment">//反向链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<span class="hljs-comment">//如果链表为空，无须反向</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        reverse(head.next);<span class="hljs-comment">//反向单个节点</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">reverse</span><span class="hljs-params">(Node curr)</span>&#123;<br>        <span class="hljs-keyword">if</span> (curr.next==<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//判断是否存在下一结点</span><br>            head.next = curr;<span class="hljs-comment">//不存在则将头结点指向最后一个结点</span><br>            <span class="hljs-keyword">return</span> curr;<span class="hljs-comment">//返回最后一个结点</span><br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> reverse(curr.next);<span class="hljs-comment">//令pre指向返回的结点</span><br>        pre.next = curr;<span class="hljs-comment">//将链表尾结点挂在反向链表的第一个结点后</span><br>        curr.next = <span class="hljs-literal">null</span>;<span class="hljs-comment">//令链表的尾结点next为空</span><br>        <span class="hljs-keyword">return</span> curr;<span class="hljs-comment">//返回要反向的结点</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232749061.png" alt="image-20220402232749061" style="zoom:80%;"><ol><li><p>多个结点组成，前指针域，后指针域，数据域</p></li><li><p>前指针域指向前驱结点，后指针域指向后继节点</p></li><li><p>java中LinkedList集合，底层是双向链表</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">//双向链表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TowWayLinkList</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;T&gt;&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;T&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;T&gt;() &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br><br>                <span class="hljs-keyword">return</span> temp.next!=<span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> T <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                temp = temp.next;<br>                <span class="hljs-keyword">return</span> temp.item;<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">//结点内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>        T item;<br>        Node next;<br>        Node pre;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>.item = <span class="hljs-literal">null</span>;<br>            <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>            <span class="hljs-built_in">this</span>.pre = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Node pre, T item, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.item = item;<br>            <span class="hljs-built_in">this</span>.next = next;<br>            <span class="hljs-built_in">this</span>.pre = pre;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Node head;<span class="hljs-comment">//指向后继结点</span><br>    <span class="hljs-keyword">private</span> Node last;<span class="hljs-comment">//指向前驱结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<span class="hljs-comment">//链表长度</span><br><br>    <span class="hljs-comment">//构造函数，初始化链表</span><br>    TowWayLinkList()&#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<span class="hljs-comment">//创建头结点</span><br>        last = <span class="hljs-literal">null</span>;<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//清空链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>&#123;<br>        head.next = <span class="hljs-literal">null</span>;<br>        last = <span class="hljs-literal">null</span>;<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//判断链表是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N==<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//返回链表长度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-comment">//查找第i位置的数据</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">if</span> (i&lt;=N/<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<br>                temp = temp.next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> temp.item;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> last;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=N-<span class="hljs-number">1</span>; j&gt;i; j--)&#123;<br>                temp = temp.pre;<br>            &#125;<br>            <span class="hljs-keyword">return</span> temp.item;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//向第i位置插入数据t</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, T t)</span>&#123;<br>           <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<br>               temp = temp.next;<br>           &#125;<br>           <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(temp, t, temp.next);<br>           temp.next = newNode;<br>           temp.next.pre = newNode;<br>           N++;<br>    &#125;<br><br>    <span class="hljs-comment">//添加一个结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T t)</span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(head, t, <span class="hljs-literal">null</span>);<br>            last = newNode;<br>            head.next = newNode;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(last, t, <span class="hljs-literal">null</span>);<br>            last.next = newNode;<br>            last = newNode;<br>        &#125;<br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">//删除第i个结点</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<br>            temp = temp.next;<br>        &#125;<br>        t = temp.next.item;<br>        temp.next = temp.next.next;<br>        temp.next.next.pre = temp;<br>        N--;<br><br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-comment">//查找t元素在链表的位置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(T t)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (temp.next!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next.item.equals(t))&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>            temp = temp.next;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232803772.png" alt="image-20220402232803772" style="zoom:80%;"><h4 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h4><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232817829.png" alt="image-20220402232817829" style="zoom:80%;"><p><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/数据结构\数据结构(java)\约瑟夫问题1.jpg"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//约瑟夫问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Joseph</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Node&lt;Integer&gt; first = <span class="hljs-literal">null</span>;<span class="hljs-comment">//指向首结点</span><br>        Node&lt;Integer&gt; pre = <span class="hljs-literal">null</span>;<span class="hljs-comment">//指向尾结点</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">41</span>; i++)&#123;<span class="hljs-comment">//创建41个结点</span><br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">1</span>)&#123;<br>                first = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(i, <span class="hljs-literal">null</span>);<span class="hljs-comment">//首节点，first指向该结点</span><br>                pre = first;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            Node&lt;Integer&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(i, <span class="hljs-literal">null</span>);<span class="hljs-comment">//</span><br>            pre.next = newNode;<span class="hljs-comment">//将新结点挂在尾结点上</span><br>            pre = newNode;<span class="hljs-comment">//令pre指向尾结点</span><br><br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">41</span>)&#123;<br>                pre.next = first;<span class="hljs-comment">//令尾结点指针指向首节点，形成环形链表</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        Node&lt;Integer&gt; n = first;<br>        Node&lt;Integer&gt; before = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (n!=n.next)&#123;<br>            count++;<br><br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">3</span>)&#123;<br>                before.next = n.next;<span class="hljs-comment">//将count==3时所指向n的结点删除</span><br>                System.out.print(n.item + <span class="hljs-string">&quot;  &quot;</span>);<br>                count = <span class="hljs-number">0</span>;<br>                n = n.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                before = n;<br>                n = n.next;<br>            &#125;<br>        &#125;<br>        System.out.println();<br>        System.out.println(n.item);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;T&gt;&#123;<br>        T item;<br>        Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(T item, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.item = item;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232831129.png" alt="image-20220402232831129" style="zoom:80%;"><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">//栈（链表）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;T&gt;&#123;<br><br>    <span class="hljs-keyword">private</span> Node head;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;T&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;T&gt;() &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> temp.next!=<span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> T <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                temp = temp.next;<br>                <span class="hljs-keyword">return</span> temp.item;<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">//结点内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>        T item;<br>        Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(T item, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.item = item;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//构造函数，初始化栈</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Stack</span><span class="hljs-params">()</span> &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N==<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-comment">//压栈</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(T t)</span>&#123;<span class="hljs-comment">//实现头插法插入新结点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">oldFirst</span> <span class="hljs-operator">=</span> head.next;<span class="hljs-comment">//令oldFirst指向首结点</span><br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(t, <span class="hljs-literal">null</span>);<br>        head.next = newNode;<span class="hljs-comment">//令头结点指向新结点</span><br>        newNode.next = oldFirst;<span class="hljs-comment">//令新结点指向原来的首节点</span><br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">//出栈</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">oldFirst</span> <span class="hljs-operator">=</span> head.next;<span class="hljs-comment">//令oldFirst指向首结点</span><br><br>        <span class="hljs-keyword">if</span> (oldFirst==<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//判断首结点不为空</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        head.next = oldFirst.next;<span class="hljs-comment">//将头结点指向首结点的下一个结点</span><br>        N--;<br><br>        <span class="hljs-keyword">return</span> oldFirst.item;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h4><p><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/数据结构\数据结构(java)\括号匹配问题.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//括号匹配问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bracakets</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;（（上海）（长安）（））&quot;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> isMatch(str);<br>        System.out.println(str + <span class="hljs-string">&quot;中的括号是否匹配&quot;</span> + match);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMatch</span><span class="hljs-params">(String str)</span>&#123;<br><br>        <span class="hljs-comment">//创建栈结构，存储左括号</span><br>        Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//遍历字符串</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-comment">//取出单个字符，转化为字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">cuurChar</span> <span class="hljs-operator">=</span> str.charAt(i)+<span class="hljs-string">&quot;&quot;</span>;<br><br>            <span class="hljs-keyword">if</span> (cuurChar.equals(<span class="hljs-string">&quot;（&quot;</span>))&#123;<br>                stack.push(cuurChar);<span class="hljs-comment">//将左括号压入栈中</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cuurChar.equals(<span class="hljs-string">&quot;）&quot;</span>))&#123;<span class="hljs-comment">//若存在一个右括号，就出栈一个左括号</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> stack.pop();<br>                <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//若出栈失败，则没有相对应的左括号</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (stack.size() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="逆波兰表达式求值问题"><a href="#逆波兰表达式求值问题" class="headerlink" title="逆波兰表达式求值问题"></a>逆波兰表达式求值问题</h4><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232854807.png" alt="image-20220402232854807" style="zoom:80%;"><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232906143.png" alt="image-20220402232906143" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//逆波兰表达式求值问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reverse</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] str = &#123;<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> caculater(str);<br>        System.out.println(<span class="hljs-string">&quot;逆波兰表达式结果&quot;</span> + result);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">caculater</span><span class="hljs-params">(String [] str)</span>&#123;<br><br>        <span class="hljs-comment">//创建栈结构，存储操作数</span><br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//遍历逆波兰表达式</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">currString</span> <span class="hljs-operator">=</span> str[i];<span class="hljs-comment">//获取单个字符串</span><br><br>            Integer o1;<br>            Integer o2;<br>            Integer result;<br>            <span class="hljs-keyword">switch</span> (currString)&#123;<span class="hljs-comment">//做加减乘除运算</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                    o1 = stack.pop();<br>                    o2 = stack.pop();<br>                    result = o2 - o1;<br>                    stack.push(result);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                    o1 = stack.pop();<br>                    o2 = stack.pop();<br>                    result = o2 + o1;<br>                    stack.push(result);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                    o1 = stack.pop();<br>                    o2 = stack.pop();<br>                    result = o2 * o1;<br>                    stack.push(result);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                    o1 = stack.pop();<br>                    o2 = stack.pop();<span class="hljs-comment">//出栈两个运算符前的两个操作数</span><br>                    result = o2 / o1;<br>                    stack.push(result);<span class="hljs-comment">//将运算结果压入栈中</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    stack.push(Integer.parseInt(currString));<span class="hljs-comment">//将操作数压入栈中</span><br>                    <span class="hljs-keyword">break</span>;<br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> stack.pop();<br><br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/数据结构\数据结构(java)\队列.jpg"></p><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402232939452.png" alt="image-20220402232939452" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">//队列（链表）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;T&gt;&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;T&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;T&gt;() &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> temp.next != <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> T <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                temp = temp.next;<br>                <span class="hljs-keyword">return</span> temp.item;<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">//内部结点类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>        <span class="hljs-keyword">private</span> T item;<br>        <span class="hljs-keyword">private</span> Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(T item, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.item = item;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<span class="hljs-comment">//队列长度</span><br>    <span class="hljs-keyword">private</span> Node head;<span class="hljs-comment">//指向首结点</span><br>    <span class="hljs-keyword">private</span> Node last;<span class="hljs-comment">//指向尾结点</span><br><br>    <span class="hljs-comment">//构造函数，初始化队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Queue</span><span class="hljs-params">()</span>&#123;<br>        N = <span class="hljs-number">0</span>;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        last = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N==<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-comment">//出队</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<span class="hljs-comment">//若队列为空，则不出队</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">oldFirst</span> <span class="hljs-operator">=</span> head.next;<br>        head.next = oldFirst.next;<span class="hljs-comment">//将首结点出队</span><br>        N--;<br><br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            last = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> oldFirst.item;<br>    &#125;<br><br>    <span class="hljs-comment">//入队</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(T t)</span>&#123;<br>        <span class="hljs-keyword">if</span> (last == <span class="hljs-literal">null</span>)&#123;<br>            last = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(t, <span class="hljs-literal">null</span>);<br>            head.next = last;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">oldlast</span> <span class="hljs-operator">=</span> last;<br>            last = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(t, <span class="hljs-literal">null</span>);<br>            oldlast.next = last;<br>        &#125;<br>        N++;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233005131.png" alt="image-20220402233005131" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//符号表（链表）（无序）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SymbolTable</span>&lt;Key, Value&gt; &#123;<br><br>    <span class="hljs-comment">//内部结点类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> Key key;<br>        <span class="hljs-keyword">public</span> Value value;<br>        <span class="hljs-keyword">public</span> Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Key key, Value value, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Node head;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> N;<br><br>    <span class="hljs-comment">//构造函数，初始化符号表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SymbolTable</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//通过键获取值</span><br>    <span class="hljs-keyword">public</span> Value <span class="hljs-title function_">get</span><span class="hljs-params">(Key key)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//遍历符号表</span><br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-literal">null</span>)&#123;<br>            temp = temp.next;<br>            <span class="hljs-comment">//查找key</span><br>            <span class="hljs-keyword">if</span> (temp.key.equals(key))&#123;<br>                <span class="hljs-keyword">return</span> temp.value;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//将key，value插入到符号表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Key key, Value value)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//符号表的键是唯一的</span><br>        <span class="hljs-comment">//遍历符号表</span><br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-literal">null</span>)&#123;<br>            temp = temp.next;<br>            <span class="hljs-comment">//若存在key键，则将key对应的value替换</span><br>            <span class="hljs-keyword">if</span> (temp.key.equals(key))&#123;<br>                temp.value = value;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//若不存在key，则创建新结点，将新结点插入到第一个位置</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key, value, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">oldFirst</span> <span class="hljs-operator">=</span> head.next;<br>        newNode.next = oldFirst;<br>        head.next = newNode;<br><br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">//通过键删除键值对</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Key key)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//遍历符号表</span><br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next.key.equals(key))&#123;<br>                temp.next = temp.next.next;<br>                N--;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="有序符号表"><a href="#有序符号表" class="headerlink" title="有序符号表"></a>有序符号表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//有序符号表（链表）</span><br><span class="hljs-comment">//将Key继承Comparable类，定义排序规则</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderSymbolTable</span>&lt;Key <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;Key&gt;, Value&gt; &#123;<br><br>    <span class="hljs-comment">//内部结点类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> Key key;<br>        <span class="hljs-keyword">public</span> Value value;<br>        <span class="hljs-keyword">public</span> Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Key key, Value value, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node head;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> N;<br><br>    <span class="hljs-comment">//构造函数，初始化符号表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderSymbolTable</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//通过键获取值</span><br>    <span class="hljs-keyword">public</span> Value <span class="hljs-title function_">get</span><span class="hljs-params">(Key key)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//遍历符号表</span><br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-literal">null</span>)&#123;<br>            temp = temp.next;<br>            <span class="hljs-comment">//查找key</span><br>            <span class="hljs-keyword">if</span> (temp.key.equals(key))&#123;<br>                <span class="hljs-keyword">return</span> temp.value;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//将key，value插入到符号表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Key key, Value value)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<span class="hljs-comment">//指向该结点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> head;<span class="hljs-comment">//指向该结点的上一个结点</span><br><br>        <span class="hljs-comment">//遍历数组，利用compareTo方法找到比该键小的结点</span><br>        <span class="hljs-keyword">while</span> (pre!=<span class="hljs-literal">null</span> &amp;&amp; key.compareTo(pre.key)&gt;<span class="hljs-number">0</span>)&#123;<br>            pre = temp;<span class="hljs-comment">//令pre指向的结点前移</span><br>            temp = temp.next;<span class="hljs-comment">//指向的结点前移</span><br>        &#125;<br><br>        <span class="hljs-comment">//如果符号表中存在该键，则将该键对应的值替换成value</span><br>        <span class="hljs-keyword">if</span> (temp!=<span class="hljs-literal">null</span> &amp;&amp; key.compareTo(temp.key)==<span class="hljs-number">0</span>)&#123;<br>            temp.value = value;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//若符号表中不存在key，则创建新结点，将该结点挂在pre后</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key, value, temp);<br>        pre.next = newNode;<br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">//通过键删除键值对</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Key key)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//遍历符号表</span><br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next.key.equals(key))&#123;<br>                temp.next = temp.next.next;<br>                N--;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233029232.png" alt="image-20220402233029232" style="zoom:80%;"><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233045053.png" alt="image-20220402233045053" style="zoom:80%;"><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树：度不超过2的树（每个结点最多有两个子结点）</p><p>满二叉树：二叉树中没一层的结点数都达到最大值</p><p>完全二叉树：叶子结点只能出现在最下层或次下层，并且最下层的结点都集中在最左边的二叉树</p><h3 id="二叉查找树的实现"><a href="#二叉查找树的实现" class="headerlink" title="二叉查找树的实现"></a>二叉查找树的实现</h3><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233115627.png" alt="image-20220402233115627" style="zoom:80%;"><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233145755.png" alt="image-20220402233145755" style="zoom:80%;"><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233234708.png" alt="image-20220402233234708" style="zoom:80%;"><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233252021.png" alt="image-20220402233252021" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> LinearList.Queue;<br><br><span class="hljs-comment">//二叉查找树</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span> &lt;Key <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;Key&gt;, Value&gt;&#123;<br>    <span class="hljs-comment">//结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>        <span class="hljs-keyword">public</span> Key key;<br>        <span class="hljs-keyword">public</span> Value value;<br>        <span class="hljs-keyword">public</span> Node left;<span class="hljs-comment">//左子树</span><br>        <span class="hljs-keyword">public</span> Node right;<span class="hljs-comment">//右子树</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Key key, Value value, Node left, Node right)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.left = left;<br>            <span class="hljs-built_in">this</span>.right = right;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Node root;<span class="hljs-comment">//根结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BinaryTree</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.root = <span class="hljs-literal">null</span>;<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//插入key，value</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Key key, Value value)</span>&#123;<br>        root = put(root, key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">put</span><span class="hljs-params">(Node x, Key key, Value value)</span>&#123;<br><br>        <span class="hljs-comment">//判断是否存在结点，不存在则创建新结点</span><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>)&#123;<br>            N++;<br>            <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key, value, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//判断key的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> key.compareTo(x.key);<br><br>        <span class="hljs-comment">//key的值比树中结点key的值小，则将数据插入到该结点的左侧，否则插入到该结点的右侧</span><br>        <span class="hljs-keyword">if</span> (cmp&gt;<span class="hljs-number">0</span>)&#123;<br>            x.right = put(x.right, key, value);<span class="hljs-comment">//递归调用，直到查找到叶子结点然后新建新结点，将key和value数据存入到新结点，并且最后将新结点挂在该叶子结点上</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp&lt;<span class="hljs-number">0</span>)&#123;<br>            x.left = put(x.left, key, value);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            x.value = value;<br>        &#125;<br><br>        N++;<br>        <span class="hljs-comment">//递归调用返回x时逐次返回，直到返回到调用递归的开始函数</span><br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-comment">//根据key查找获取数据</span><br>    <span class="hljs-keyword">public</span> Value <span class="hljs-title function_">get</span><span class="hljs-params">(Key key)</span>&#123;<br>        <span class="hljs-keyword">return</span> get(root, key);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Value <span class="hljs-title function_">get</span><span class="hljs-params">(Node x, Key key)</span>&#123;<br><br>        <span class="hljs-comment">//判断树是否为空</span><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//比较key的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> key.compareTo(x.key);<br>        <span class="hljs-comment">//大于则从该结点的右子树中继续查找，小于则从该结点的左子树中继续查找</span><br>        <span class="hljs-keyword">if</span> (cmp&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> get(x.right, key);<span class="hljs-comment">//递归调用直到查找到key对应的结点</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> get(x.left, key);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> x.value;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//删除结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Key key)</span>&#123;<br>        delete(root, key);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">delete</span><span class="hljs-params">(Node x, Key key)</span>&#123;<br>        <span class="hljs-comment">//判断树是否为空</span><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//比较key的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> key.compareTo(x.key);<br>        <span class="hljs-comment">//大于则在右子树中查找要删除的结点，小于则在左子树中查找要删除的结点</span><br>        <span class="hljs-keyword">if</span> (cmp&gt;<span class="hljs-number">0</span>)&#123;<br>            x.right = delete(x.right, key);<span class="hljs-comment">//递归调用，查找到要删除的结点</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp&lt;<span class="hljs-number">0</span>)&#123;<br>            x.left = delete(x.left, key);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            N--;<br><br>            <span class="hljs-comment">//判断如果左子树为空则直接返回要删除的结点的下一个结点，令该结点挂在删除结点的父结点</span><br>            <span class="hljs-keyword">if</span> (x.right == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> x.left;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (x.left == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> x.right;<br>            &#125;<br><br>            <span class="hljs-comment">//寻找右子树中的最小结点，令minNode指向该结点（要删除结点的右子树的最左边的结点为最小的结点）</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">minNode</span> <span class="hljs-operator">=</span> x.right;<br>            <span class="hljs-keyword">while</span> (minNode.left!=<span class="hljs-literal">null</span>)&#123;<br>                minNode = minNode.left;<br>            &#125;<br><br>            <span class="hljs-comment">//将右子树中的最小结点删除</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> x.right;<br>            <span class="hljs-keyword">while</span> (n.left!=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">if</span> (n.left.left==<span class="hljs-literal">null</span>)&#123;<br>                    n.left = <span class="hljs-literal">null</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    n = n.left;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">//令要删除结点的右子树中查找到的最小key的结点替换到删除结点的位置</span><br>            minNode.left = x.left;<br>            minNode.right = x.right;<br>            x = minNode;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-comment">//获取二叉树的结点数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-comment">//获取最小结点的key值</span><br>    <span class="hljs-keyword">public</span> Key <span class="hljs-title function_">min</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> min(root).key;<br>    &#125;<br><br>    <span class="hljs-comment">//获取最小结点</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">min</span><span class="hljs-params">(Node x)</span>&#123;<br><br>        <span class="hljs-comment">//最小结点在二叉树的左子树中</span><br>        <span class="hljs-keyword">if</span> (x.left==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> min(x.left);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//获取最大结点的key值</span><br>    <span class="hljs-keyword">public</span> Key <span class="hljs-title function_">max</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> max(root).key;<br>    &#125;<br><br>    <span class="hljs-comment">//获取最大结点</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">max</span><span class="hljs-params">(Node x)</span>&#123;<br>        <span class="hljs-comment">//最大结点在二叉树的右子树中</span><br>        <span class="hljs-keyword">if</span> (x.right==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> max(x.right);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//前序遍历</span><br>    <span class="hljs-keyword">public</span> Queue&lt;Key&gt; <span class="hljs-title function_">preErgodic</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建队列存储Key的值</span><br>        Queue&lt;Key&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>&lt;&gt;();<br>        <span class="hljs-comment">//获取每个结点key值</span><br>        preErgodic(root, keys);<br>        <span class="hljs-keyword">return</span> keys;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preErgodic</span><span class="hljs-params">(Node x, Queue&lt;Key&gt; keys)</span>&#123;<br>        <span class="hljs-comment">//判断二叉树是否为空</span><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//先将根节点的key值存入到队列中</span><br>        keys.enqueue(x.key);<br><br>        <span class="hljs-comment">//判断根节点的左子树是都存在</span><br>        <span class="hljs-keyword">if</span> (x.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//存在左子树，递归调用将左子树的结点的key值依次存入到队列中</span><br>            preErgodic(x.left, keys);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (x.right!=<span class="hljs-literal">null</span>)&#123;<br>            preErgodic(x.right, keys);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-keyword">public</span> Queue&lt;Key&gt; <span class="hljs-title function_">midErgodic</span><span class="hljs-params">()</span>&#123;<br>        Queue&lt;Key&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>&lt;&gt;();<br>        midErgodic(root, keys);<br>        <span class="hljs-keyword">return</span> keys;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">midErgodic</span><span class="hljs-params">(Node x, Queue&lt;Key&gt; keys)</span>&#123;<br>        <span class="hljs-keyword">if</span> (x.left==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//先判断根节点是否存在左子树</span><br>        <span class="hljs-keyword">if</span> (x.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//存在左子树，先将左子树结点的key值存入到队列中</span><br>            midErgodic(x.left, keys);<br>        &#125;<br><br>        keys.enqueue(x.key);<br>        <span class="hljs-keyword">if</span> (x.right!=<span class="hljs-literal">null</span>)&#123;<br>            midErgodic(x.right, keys);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//后序遍历</span><br>    <span class="hljs-keyword">public</span> Queue&lt;Key&gt; <span class="hljs-title function_">afterErgodic</span><span class="hljs-params">()</span>&#123;<br>        Queue&lt;Key&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>&lt;&gt;();<br>        afterErgodic(root, keys);<br>        <span class="hljs-keyword">return</span> keys;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterErgodic</span><span class="hljs-params">(Node x, Queue&lt;Key&gt; keys)</span>&#123;<br>        <span class="hljs-keyword">if</span> (x.left==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (x.left!=<span class="hljs-literal">null</span>)&#123;<br>            afterErgodic(x.left, keys);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (x.right!=<span class="hljs-literal">null</span>)&#123;<br>            afterErgodic(x.right, keys);<br>        &#125;<br><br>        keys.enqueue(x.key);<br>    &#125;<br><br>    <span class="hljs-comment">//层次遍历</span><br>    <span class="hljs-keyword">public</span> Queue&lt;Key&gt; <span class="hljs-title function_">layerErgodic</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建两个队列存储，key和结点</span><br>        Queue&lt;Key&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>&lt;&gt;();<br>        Queue&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//将根节点存入到队列中</span><br>        nodes.enqueue(root);<br><br>        <span class="hljs-comment">//从上到下，从左到右，依次存放key值，循环条件是结点队列中是否存在数据</span><br>        <span class="hljs-keyword">while</span> (!nodes.isEmpty())&#123;<br>            <span class="hljs-comment">//将队列中的结点出队（先进先出）</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nodes.dequeue();<br>            <span class="hljs-comment">//出队的结点的key值存放到队列中</span><br>            keys.enqueue(n.key);<br><br>            <span class="hljs-comment">//令左结点和右结点依次存入队列（先进先出）</span><br>            <span class="hljs-keyword">if</span> (n.left!=<span class="hljs-literal">null</span>)&#123;<br>                nodes.enqueue(n.left);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (n.right!=<span class="hljs-literal">null</span>)&#123;<br>                nodes.enqueue(n.right);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> keys;<br>    &#125;<br><br>    <span class="hljs-comment">//二叉树最大深度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> maxDepth(root);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(Node x)</span>&#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxL</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">if</span> (x.left!=<span class="hljs-literal">null</span>)&#123;<br>            maxL = maxDepth(x.left);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (x.right!=<span class="hljs-literal">null</span>)&#123;<br>            maxR = maxDepth(x.right);<br>        &#125;<br><br>        max = maxL&gt;maxR?maxL+<span class="hljs-number">1</span>:maxR+<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><h4 id="2-3查找树"><a href="#2-3查找树" class="headerlink" title="2-3查找树"></a>2-3查找树</h4><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233314934.png" alt="image-20220402233314934" style="zoom:80%;"><p><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/数据结构\数据结构(java)\2-3树性质.jpg"></p><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><ol><li>红链接：将两个2-结点连接起来构成一个3-结点</li><li>黑链接：2-3树中的普通链接</li></ol><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233331731.png" alt="image-20220402233331731" style="zoom:80%;"><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233348421.png" alt="image-20220402233348421" style="zoom:80%;"><p><strong>左旋</strong></p><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233402811.png" alt="image-20220402233402811" style="zoom:80%;"><p><strong>右旋</strong></p><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233414753.png" alt="image-20220402233414753" style="zoom:80%;"><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233435979.png" alt="image-20220402233435979" style="zoom:80%;"><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233452611.png" alt="image-20220402233452611" style="zoom:80%;"><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆一般可以看成一颗完全二叉树的数组对象</p><p><strong>堆的特性</strong></p><ol><li>堆是完全二叉树</li><li>通常用数组来实现（从a[k]层，向上移一层，就令k等于k&#x2F;2；向下移一层就令k等于2k或2k+1）</li><li>每个结点都大于等于它的两个子结点（最大堆）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//堆</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Heap</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&gt;&#123;<br>    <span class="hljs-keyword">private</span> T[] imtes;<span class="hljs-comment">//堆数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<br><br>    <span class="hljs-comment">//构造方法初始化数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Heap</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        imtes = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparable</span>[capacity+<span class="hljs-number">1</span>];<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//判断i索引处数据和j索引处数据大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">less</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">return</span> imtes[i].compareTo(imtes[j])&lt;<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//交换i索引和j索引处的数据</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> imtes[i];<br>        imtes[i] = imtes[j];<br>        imtes[j] = temp;<br>    &#125;<br><br>    <span class="hljs-comment">//插入数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(T t)</span>&#123;<br>        imtes[++N] = t;<br>        <span class="hljs-comment">//因为插入的数据会在数组末尾，这打破了堆的存储规则，需要令t向上浮动</span><br>        swim(N);<br>    &#125;<br><br>    <span class="hljs-comment">//上浮法，让元素向上层移动</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-comment">//令元素和数组中的所有元素进行比较</span><br>        <span class="hljs-keyword">while</span> (k&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//比较该层与上一层元素的大小</span><br>            <span class="hljs-keyword">if</span> (less(k/<span class="hljs-number">2</span>, k))&#123;<br>                <span class="hljs-comment">//大于则交换位置</span><br>                exch(k/<span class="hljs-number">2</span>, k);<br>            &#125;;<br>            k = k/<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//删除最大结点</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">delMax</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//堆中最大结点就是数组的首结点</span><br>        <span class="hljs-type">T</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> imtes[<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//交换1和尾结点的位置</span><br>        exch(<span class="hljs-number">1</span>, N);<br>        <span class="hljs-comment">//令尾结点等于空删除尾结点</span><br>        imtes[N]=<span class="hljs-literal">null</span>;<br>        N--;<br>        <span class="hljs-comment">//此时堆的规则被破坏了，所有要下浮首结点元素</span><br>        sink(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><br>    <span class="hljs-comment">//下浮法，令元素向下移动</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sink</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-comment">//循环直到循环到树的最下层</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">2</span>*k&lt;=N)&#123;<br>            <span class="hljs-type">int</span> max;<br>            <span class="hljs-comment">//判断下层右结点是否小于该结点</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>&lt;=N)&#123;<br>                <span class="hljs-comment">//判断下层左结点是否小于右结点</span><br>                <span class="hljs-keyword">if</span> (less(<span class="hljs-number">2</span>*k, <span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>))&#123;<br>                    max = <span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    max = <span class="hljs-number">2</span>*k;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                max = <span class="hljs-number">2</span>*k;<br>            &#125;<br><br>            <span class="hljs-comment">//如果k的值比max的值大则退出循环</span><br>            <span class="hljs-keyword">if</span> (!less(k,max))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//交换k和max的位置</span><br>            exch(k, max);<br><br>            k = max;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><img src="/2020/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402233508964.png" alt="image-20220402233508964" style="zoom:80%;"><h3 id="最大优先队列"><a href="#最大优先队列" class="headerlink" title="最大优先队列"></a>最大优先队列</h3><p>利用最大堆来实现，根节点（数组位置为1）存放最大元素，每个结点都大于等于它的两个子结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//最大优先队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MaxPriorityQueue</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&gt;&#123;<br>    <span class="hljs-keyword">private</span> T[] imtes;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MaxPriorityQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        imtes = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparable</span>[capacity+<span class="hljs-number">1</span>];<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">less</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">return</span> imtes[i].compareTo(imtes[j])&lt;<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> imtes[i];<br>        imtes[i] = imtes[j];<br>        imtes[j] = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">delMax</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> imtes[<span class="hljs-number">1</span>];<br><br>        exch(<span class="hljs-number">1</span>, N);<br><br>        N--;<br>        sink(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(T t)</span>&#123;<br>        imtes[N++] = t;<br>        swim(N);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-keyword">while</span> (k&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span> (less(k/<span class="hljs-number">2</span>, k))&#123;<br>                exch(k/<span class="hljs-number">2</span>, k);<br>            &#125;<br>            k = k/<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sink</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">2</span>*k &lt;= N)&#123;<br>            <span class="hljs-type">int</span> max;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>&lt;=N)&#123;<br>                <span class="hljs-keyword">if</span> (less(<span class="hljs-number">2</span>*k, <span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>))&#123;<br>                    max = <span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    max = <span class="hljs-number">2</span>*k;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                max = <span class="hljs-number">2</span>*k;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!less(k, max))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            exch(k, max);<br>            k = max;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N==<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最小优先队列"><a href="#最小优先队列" class="headerlink" title="最小优先队列"></a>最小优先队列</h3><p>利用最小堆来实现，根节点（数组位置为1）存放最小元素，每个结点都小于等于它的两个子结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//最小优先队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinPriorityQueue</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&gt;&#123;<br>    <span class="hljs-keyword">private</span> T[] imtes;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinPriorityQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        imtes = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparable</span>[capacity+<span class="hljs-number">1</span>];<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">less</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">return</span> imtes[i].compareTo(imtes[j])&lt;<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> imtes[i];<br>        imtes[i] = imtes[j];<br>        imtes[j] = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">delMax</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> imtes[<span class="hljs-number">1</span>];<br><br>        exch(<span class="hljs-number">1</span>, N);<br><br>        N--;<br>        sink(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> min;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(T t)</span>&#123;<br>        imtes[N++] = t;<br>        swim(N);<br>    &#125;<br><br>    <span class="hljs-comment">//上浮法，将最小元素向上浮动</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-keyword">while</span> (k&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span> (less(k, k/<span class="hljs-number">2</span>))&#123;<br>                exch(k, k/<span class="hljs-number">2</span>);<br>            &#125;<br>            k = k/<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//下沉法，将最大元素向下沉</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sink</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">2</span>*k &lt;= N)&#123;<br>            <span class="hljs-type">int</span> min;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>&lt;=N)&#123;<br>                <span class="hljs-keyword">if</span> (less(<span class="hljs-number">2</span>*k, <span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>))&#123;<br>                    min = <span class="hljs-number">2</span>*k;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    min = <span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                min = <span class="hljs-number">2</span>*k;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (less(k, min))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            exch(k, min);<br>            k = min;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N==<span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="索引优先队列"><a href="#索引优先队列" class="headerlink" title="索引优先队列"></a>索引优先队列</h3><ol><li>存储数据时，给每一个数据元素关联一个整数</li><li>创建一个pq数组存放数据元素数组的索引，对pq数组要进行堆有序</li><li>创建一个数组qp，将pq数组中的索引当做qp的元素存储，将pq数组的元素当做qp数组的索引存储</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/2020/11/13/JVM/"/>
    <url>/2020/11/13/JVM/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="一、什么是JVM"><a href="#一、什么是JVM" class="headerlink" title="一、什么是JVM"></a>一、什么是JVM</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Java Virtual Machine，JAVA程序的<strong>运行环境</strong>（JAVA二进制字节码的运行环境）</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>实现JAVA代码的一次编写，到处运行</li><li>自动内存管理，垃圾回收机制(GC)</li><li>数组下标越界检查</li><li>多态</li></ul><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>JVM JRE JDK的区别</p><img src="/2020/11/13/JVM/image-20220402225753834.png" alt="image-20220402225753834" style="zoom:80%;"><h2 id="二、内存结构"><a href="#二、内存结构" class="headerlink" title="二、内存结构"></a>二、内存结构</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a><strong>整体架构</strong></h3><img src="/2020/11/13/JVM/image-20220402225837140.png" alt="image-20220402225837140" style="zoom:80%;"><h3 id="1、程序计数器"><a href="#1、程序计数器" class="headerlink" title="1、程序计数器"></a>1、程序计数器</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用于保存JVM中下一条所要执行的<strong>指令的地址</strong></p><p>如果线程执行 Java 方法，计数器记录的是正在执行的虚拟机字节码指令的地址；如果执行的是 Native 方法，计数器值为Undefined。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>线程私有<ul><li>CPU会为每个线程分配时间片，当当前线程的时间片使用完以后，CPU就会去执行另一个线程中的代码</li><li>程序计数器是<strong>每个线程</strong>所<strong>私有</strong>的，当另一个线程的时间片用完，又返回来执行当前线程的代码时，通过程序计数器可以知道应该执行哪一句指令</li></ul></li><li>不存在内存溢出，没有GC</li></ul><h3 id="2、虚拟机栈"><a href="#2、虚拟机栈" class="headerlink" title="2、虚拟机栈"></a>2、虚拟机栈</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>每个<strong>线程</strong>运行需要的内存空间，称为<strong>虚拟机栈</strong></li><li>每个栈由多个<strong>栈帧</strong>组成，对应着每次调用方法时所占用的内存</li><li>栈帧中存储了<strong>局部变量表、操作数栈、动态链接和返回地址</strong>等信息</li><li>每个线程只能有<strong>一个活动栈帧</strong>，对应着<strong>当前正在执行的方法</strong></li></ul><img src="/2020/11/13/JVM/image-20220402225849234.png" alt="image-20220402225849234" style="zoom:80%;"><h4 id="问题辨析"><a href="#问题辨析" class="headerlink" title="问题辨析"></a>问题辨析</h4><ul><li>垃圾回收是否涉及栈内存？<ul><li><strong>栈不需要GC</strong>。因为虚拟机栈中是由一个个栈帧组成的，在方法执行完毕后，对应的栈帧就会被弹出栈。所以无需通过垃圾回收机制去回收内存。</li></ul></li><li>栈内存的分配越大越好吗？<ul><li>不是。因为<strong>物理内存是一定的</strong>，栈内存越大，可以支持更多的递归调用，但是可执行的线程数就会越少。</li></ul></li><li>方法内的局部变量是否是线程安全的？<ul><li>如果方法内<strong>局部变量没有逃离方法的作用范围</strong>，则是<strong>线程安全</strong>的</li><li>如果<strong>局部变量引用了对象</strong>，并<strong>逃离了方法的作用范围</strong>，则需要考虑线程安全问题</li></ul></li></ul><h4 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h4><p><strong>Java.lang.stackOverflowError</strong> 栈内存溢出</p><p><strong>发生原因</strong></p><ul><li>虚拟机栈中，<strong>栈帧过多</strong>（无限递归）</li><li>每个栈帧<strong>所占用内存过大</strong></li></ul><h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><p>栈帧中，由一个<strong>局部变量表存储数据</strong>。局部变量表中存储了<strong>基本数据类型</strong>（boolean、byte、char、short、int、float、long、double）的<strong>局部变量</strong>（包括参数）、和<strong>对象的引用</strong>（String、数组、对象等），但是不存储对象的内容。局部变量表所需的<strong>内存空间在编译期间完成分配</strong>，在方法运行期间不会改变局部变量表的大小。</p><p>局部变量的容量以<strong>变量槽</strong>（Variable Slot）为最小单位，每个变量槽最大存储<strong>32位</strong>的数据类型。对于64位的数据类型（long、double），JVM 会为其分配<strong>两个连续</strong>的变量槽来存储。以下简称 Slot 。</p><p>JVM 通过索引定位的方式使用局部变量表，索引的范围从0开始至局部变量表中最大的 Slot 数量。普通方法与 static 方法在第 0 个槽位的存储有所不同。非 static 方法的第 0 个槽位存储方法所属对象实例的<strong>引用this</strong>。</p><p>为了尽可能的节省栈帧空间，局部变量表中的 Slot 是可以复用的。方法中定义的局部变量，其作用域不一定会覆盖整个方法。当方法运行时，如果已经超出了某个变量的作用域，即变量失效了，那这个变量对应的 Slot 就可以交给其他变量使用，也就是所谓的 Slot 复用。通过一个例子来理解变量“失效”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">boolean</span> flag)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(flag)<br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">66</span>;<br>    &#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">55</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当虚拟机运行 test 方法，就会创建一个栈帧，并压入到当前线程的栈中。当运行到 int a &#x3D; 66时，在当前栈帧的局部变量中创建一个 Slot 存储变量 a，当运行到 int b &#x3D; 55时，此时已经超出变量 a 的作用域了（变量 a 的作用域在{}所包含的代码块中），此时 a 就失效了，变量a 占用的 Slot 就可以交给b来使用，这就是 Slot 复用。</p><p><strong>Slot 的复用会直接影响到系统的垃圾收集行为。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">byte</span>[] placeholder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">64</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br><br>        System.gc();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当执行 System.gc() 方法时，变量 placeholder 还在作用域范围之内，虚拟机是不会回收的，它还是“有效”的。</p><p>我们对上面的代码稍作修改，使其作用域“失效”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        &#123;<br>            <span class="hljs-type">byte</span>[] placeholder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">64</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        &#125;<br>        System.gc();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现虚拟机还是没有回收 placeholder 变量占用的 64M 内存。在解释之前，我们再对代码稍作修改。</p><p>在System.gc()方法执行之前，加入一个局部变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        &#123;<br>            <span class="hljs-type">byte</span>[] placeholder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">64</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        System.gc();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现 placeholder 变量占用的64M内存空间被回收了，而 placeholder 变量能否被回收的关键就在于：<strong>局部变量表中的 Slot 是否还存有关于 placeholder 对象的引用。</strong>有则不会回收</p><h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><p>操作数栈是一个后进先出栈。操作数栈的元素可以是任意的Java数据类型。方法刚开始执行时，操作数栈是空的，在方法执行过程中，通过字节码指令对操作数栈进行压栈和出栈的操作。通常进行算数运算的时候是通过操作数栈来进行的，又或者是在调用其他方法的时候通过操作数栈进行参数传递。<strong>操作数栈可以理解为栈帧中用于计算的临时数据存储区。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperandStack</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        add(<span class="hljs-number">100</span>, <span class="hljs-number">98</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 javap 反编译 OperandStack 后，根据虚拟机指令集，得出操作数栈的运行流程如下：</p><img src="/2020/11/13/JVM/image-20220402225932980.png" alt="image-20220402225932980" style="zoom:80%;"><p>下面通过一张图，对比执行100+98操作，局部变量表和操作数栈的变化情况。</p><img src="/2020/11/13/JVM/image-20220402225943444.png" alt="image-20220402225943444" style="zoom:80%;"><h4 id="线程运行诊断"><a href="#线程运行诊断" class="headerlink" title="线程运行诊断"></a>线程运行诊断</h4><p>CPU占用过高</p><ul><li>Linux环境下运行某些程序的时候，可能导致CPU的占用过高，这时需要定位占用CPU过高的线程<ul><li><strong>top</strong>命令，查看是哪个<strong>进程</strong>占用CPU过高</li><li><strong>ps H -eo pid, tid（线程id）, %cpu | grep 刚才通过top查到的进程号</strong> 通过ps命令进一步查看是哪个线程占用CPU过高</li><li><strong>jstack 进程id</strong> 通过查看进程中的线程的nid，刚才通过ps命令看到的tid来<strong>对比定位</strong>，注意jstack查找出的线程id是<strong>16进制的</strong>，<strong>需要转换</strong></li></ul></li></ul><h3 id="3、本地方法栈"><a href="#3、本地方法栈" class="headerlink" title="3、本地方法栈"></a>3、本地方法栈</h3><p>一些带有<strong>native关键字</strong>的方法就是需要JAVA去调用本地的C或者C++方法，因为JAVA有时候没法直接和操作系统底层交互，所以需要用到本地方法</p><h3 id="4、堆"><a href="#4、堆" class="headerlink" title="4、堆"></a>4、堆</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>通过new关键字<strong>创建的对象</strong>都会被放在堆内存，对象实例，成员变量，类变量以及数组都会存储在堆中</p><p>Java堆分为<strong>年轻代</strong>（Young Generation）和<strong>老年代</strong>（Old Generation）；</p><p>年轻代又分为<strong>伊甸园</strong>（Eden）和<strong>幸存区</strong>（Survivor区）；</p><p>幸存区又分为<strong>From Survivor空间</strong>和 <strong>To Survivor空间</strong>。</p><p>年轻代存储“新生对象”，我们新创建的对象存储在年轻代中。当年轻内存占满后，会触发Minor GC，清理年轻代内存空间。</p><p>老年代存储长期存活的对象和大对象。年轻代中存储的对象，经过多次GC后仍然存活的对象会移动到老年代中进行存储。老年代空间占满后，会触发Full GC（会联动触发Minor GC）。</p><img src="/2020/11/13/JVM/image-20220402225956942.png" alt="image-20220402225956942" style="zoom:80%;"><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>所有线程共享</strong>，堆内存中的对象都需要<strong>考虑线程安全问题</strong></li><li>有垃圾回收机制</li></ul><h4 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h4><p><strong>java.lang.OutofMemoryError</strong> ：java heap space. 堆内存溢出</p><h4 id="堆内存诊断"><a href="#堆内存诊断" class="headerlink" title="堆内存诊断"></a>堆内存诊断</h4><p>在idea的Terminal窗口打开命令行输入命令</p><p><strong>jps</strong>：查看当前系统中有哪些java进程</p><p><strong>jmap -heap 进程id</strong>：查看堆内存占用情况，检测某一时刻</p><p><strong>jconsole</strong>：图形界面，可以连续检测内存占用</p><p><strong>jvisualvm</strong>：图形界面，连续检测内存占用</p><h3 id="5、方法区"><a href="#5、方法区" class="headerlink" title="5、方法区"></a>5、方法区</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><img src="/2020/11/13/JVM/image-20220402230022633.png" alt="image-20220402230022633" style="zoom:80%;"><h4 id="内存溢出-1"><a href="#内存溢出-1" class="headerlink" title="内存溢出"></a>内存溢出</h4><ul><li>1.8以前会导致<strong>永久代</strong>内存溢出</li><li>1.8以后会导致<strong>元空间</strong>内存溢出</li></ul><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p><strong>Java8之后，取消了整个永久代区域，取而代之的是元空间。运行时常量池和静态常量池存放在元空间中，而字符串常量池依然存放在堆中。</strong></p><p><strong>通过反编译来查看类的信息</strong></p><ul><li><p>获得对应类的.class文件</p><ul><li><p>在JDK对应的bin目录下运行cmd，<strong>也可以在IDEA控制台输入</strong></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150602.png" alt="img"></p></li><li><p>输入 <strong>javac 对应类的绝对路径</strong></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">F</span>:\JAVA\JDK8<span class="hljs-number">.0</span>\bin&gt;javac <span class="hljs-name">F</span>:\Thread_study\src\com\nyima\JVM\day01\Main.java<br></code></pre></td></tr></table></figure><p>输入完成后，对应的目录下就会出现类的.class文件</p></li></ul></li><li><p>在控制台输入 javap -v 类的绝对路径</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">javap -v <span class="hljs-name">F</span>:\Thread_study\src\com\nyima\JVM\day01\Main.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure></li><li><p>然后能在控制台看到反编译以后类的信息了</p><p>二进制字节码的组成：类的基本信息、常量池、类的方法定义（包含了虚拟机指令）</p><ul><li><p>类的基本信息</p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150618.png" alt="img"></p></li><li><p>常量池</p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150630.png" alt="img"></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150641.png" alt="img"></p></li><li><p>虚拟机中执行编译的方法（框内的是真正编译执行的内容，**#号的内容需要在常量池中查找**）</p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150653.png" alt="img"></p></li></ul></li></ul><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><ul><li>常量池<ul><li>就是一张表（如上图中的constant pool），虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</li></ul></li><li>运行时常量池<ul><li>常量池是.class文件中的，当该类被加载以后，它的常量池信息就会<strong>放入运行时常量池</strong>，并把里面的<strong>符号地址变为真实地址</strong></li></ul></li></ul><h4 id="常量池与字符串常量池的关系"><a href="#常量池与字符串常量池的关系" class="headerlink" title="常量池与字符串常量池的关系"></a>常量池与字符串常量池的关系</h4><h5 id="串池StringTable"><a href="#串池StringTable" class="headerlink" title="串池StringTable"></a><strong>串池</strong>StringTable</h5><p>String字符串作为方法的参数时，传递的是该引用的副本（相当于传递的是值），修改该参数时相当于修改了副本中的String引用指向另一个地址，原本的字符串没有改变仍然存放的是原来的地址</p><p>String字符串不可变指的是创建String字符串后，字符串的内容不能改变，但是能改变字符串的引用所指向的地址</p><p><strong>特征</strong></p><ul><li>常量池中的字符串仅是符号，只有<strong>在被用到时才会转化为对象</strong></li><li>利用串池的机制，来避免重复创建字符串对象</li><li>字符串<strong>变量</strong>拼接的原理是<strong>StringBuilder</strong></li><li>字符串<strong>常量</strong>拼接的原理是<strong>编译器优化</strong>，编译阶段直接得出</li><li>可以使用<strong>intern方法</strong>，主动将串池中还没有的字符串对象放入串池中</li><li><strong>注意</strong>：无论是串池还是堆里面的字符串，都是对象</li></ul><p>用来存放字符串对象且里面的<strong>元素不重复</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTableStudy</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>; <br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">ab</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常量池中的信息，都会被加载到运行时常量池中，但这时a b ab 仅是常量池中的符号，<strong>还没有成为java字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>: ldc           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// String a</span><br><span class="hljs-number">2</span>: astore_1<br><span class="hljs-number">3</span>: ldc           #<span class="hljs-number">3</span>                  <span class="hljs-comment">// String b</span><br><span class="hljs-number">5</span>: astore_2<br><span class="hljs-number">6</span>: ldc           #<span class="hljs-number">4</span>                  <span class="hljs-comment">// String ab</span><br><span class="hljs-number">8</span>: astore_3<br><span class="hljs-number">9</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>当执行到 ldc #2 时，会把符号 a 变为 “a” 字符串对象，<strong>并放入串池中</strong>（hashtable结构 不可扩容）</p><p>当执行到 ldc #3 时，会把符号 b 变为 “b” 字符串对象，并放入串池中</p><p>当执行到 ldc #4 时，会把符号 ab 变为 “ab” 字符串对象，并放入串池中</p><p>最终<strong>StringTable [“a”, “b”, “ab”]</strong></p><p><strong>注意</strong>：字符串对象的创建都是<strong>懒惰的</strong>，只有当运行到那一行字符串且在串池中不存在的时候（如 ldc #2）时，该字符串才会被创建并放入串池中。</p><p>使用拼接<strong>字符串变量对象</strong>创建字符串的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTableStudy</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">ab</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-comment">//拼接字符串对象来创建新的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">ab2</span> <span class="hljs-operator">=</span> a+b; <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反编译后的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>    stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">5</span>, args_size=<span class="hljs-number">1</span><br>       <span class="hljs-number">0</span>: ldc           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// String a</span><br>       <span class="hljs-number">2</span>: astore_1<br>       <span class="hljs-number">3</span>: ldc           #<span class="hljs-number">3</span>                  <span class="hljs-comment">// String b</span><br>       <span class="hljs-number">5</span>: astore_2<br>       <span class="hljs-number">6</span>: ldc           #<span class="hljs-number">4</span>                  <span class="hljs-comment">// String ab</span><br>       <span class="hljs-number">8</span>: astore_3<br>       <span class="hljs-number">9</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">5</span>                  <span class="hljs-comment">// class java/lang/StringBuilder</span><br>      <span class="hljs-number">12</span>: dup<br>      <span class="hljs-number">13</span>: invokespecial #<span class="hljs-number">6</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br>      <span class="hljs-number">16</span>: aload_1<br>      <span class="hljs-number">17</span>: invokevirtual #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br>      <span class="hljs-number">20</span>: aload_2<br>      <span class="hljs-number">21</span>: invokevirtual #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br>      <span class="hljs-number">24</span>: invokevirtual #<span class="hljs-number">8</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br>      <span class="hljs-number">27</span>: astore        <span class="hljs-number">4</span><br>      <span class="hljs-number">29</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>通过拼接的方式来创建字符串的过程是：<strong>StringBuilder().append(“a”).append(“b”).toString()</strong></p><p>最后的toString方法的返回值是一个<strong>新的字符串</strong>，<strong>存在于堆内存之中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">ab</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">ab2</span> <span class="hljs-operator">=</span> a+b;<br><span class="hljs-comment">//结果为false,因为ab是存在于串池之中，ab2是由StringBuffer的toString方法所返回的一个对象，存在于堆内存之中</span><br>System.out.println(ab == ab2);<br></code></pre></td></tr></table></figure><p>使用<strong>拼接字符串常量对象</strong>的方法创建字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTableStudy</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">ab</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-comment">//使用拼接字符串的方法创建字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">ab3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;b&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反编译后的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>  stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">6</span>, args_size=<span class="hljs-number">1</span><br>     <span class="hljs-number">0</span>: ldc           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// String a</span><br>     <span class="hljs-number">2</span>: astore_1<br>     <span class="hljs-number">3</span>: ldc           #<span class="hljs-number">3</span>                  <span class="hljs-comment">// String b</span><br>     <span class="hljs-number">5</span>: astore_2<br>     <span class="hljs-number">6</span>: ldc           #<span class="hljs-number">4</span>                  <span class="hljs-comment">// String ab</span><br>     <span class="hljs-number">8</span>: astore_3<br>    <span class="hljs-comment">//ab3初始化时直接从串池中获取字符串</span><br>    <span class="hljs-number">29</span>: ldc           #<span class="hljs-number">4</span>                  <span class="hljs-comment">// String ab</span><br>    <span class="hljs-number">31</span>: astore        <span class="hljs-number">5</span><br>    <span class="hljs-number">33</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><ul><li>使用<strong>拼接字符串常量</strong>的方法来创建新的字符串时，因为<strong>内容是常量，javac在编译期会进行优化，结果已在编译期确定为ab</strong>，而创建ab的时候已经在串池中放入了“ab”，所以ab3直接从串池中获取值，所以进行的操作和 ab &#x3D; “ab” 一致。</li><li>使用<strong>拼接字符串变量</strong>的方法来创建新的字符串时，因为内容是变量，只能<strong>在运行期确定它的值，所以需要使用StringBuilder来创建</strong></li></ul><h5 id="intern方法-1-8"><a href="#intern方法-1-8" class="headerlink" title="intern方法 1.8"></a>intern方法 1.8</h5><p>调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，则放入成功</li><li>如果有该字符串对象，则放入失败</li></ul><p>无论放入是否成功，都会返回<strong>串池中</strong>的字符串对象</p><p><strong>注意</strong>：此时如果调用intern方法成功，堆内存与串池中的字符串对象是同一个对象；如果失败，则不是同一个对象</p><p><strong>例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//&quot;a&quot; &quot;b&quot; 被放入串池中，str则存在于堆内存之中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;a&quot;</span>) + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-comment">//调用str的intern方法，这时串池中没有&quot;ab&quot;，则会将该字符串对象放入到串池中，此时堆内存与串池中的&quot;ab&quot;是同一个对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">st2</span> <span class="hljs-operator">=</span> str.intern();<br><span class="hljs-comment">//给str3赋值，因为此时串池中已有&quot;ab&quot;，则直接将串池中的内容返回</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-comment">//因为堆内存与串池中的&quot;ab&quot;是同一个对象，所以以下两条语句打印的都为true</span><br>System.out.println(str == st2);<br>System.out.println(str == str3);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>例2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//此处创建字符串对象&quot;ab&quot;，因为串池中还没有&quot;ab&quot;，所以将其放入串池中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>;<br>        <span class="hljs-comment">//&quot;a&quot; &quot;b&quot; 被放入串池中，str则存在于堆内存之中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;a&quot;</span>) + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>        <span class="hljs-comment">//此时因为在创建str3时，&quot;ab&quot;已存在与串池中，所以放入失败，但是会返回串池中的&quot;ab&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> str.intern();<br>        <span class="hljs-comment">//false</span><br>System.out.println(str == str2);<br>        <span class="hljs-comment">//false</span><br>System.out.println(str == str3);<br>        <span class="hljs-comment">//true</span><br>System.out.println(str2 == str3);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="intern方法-1-6"><a href="#intern方法-1-6" class="headerlink" title="intern方法 1.6"></a>intern方法 1.6</h5><p>调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，会将该字符串对象复制一份，再放入到串池中</li><li>如果有该字符串对象，则放入失败</li></ul><p>无论放入是否成功，都会返回<strong>串池中</strong>的字符串对象</p><p><strong>注意</strong>：此时无论调用intern方法成功与否，串池中的字符串对象和堆内存中的字符串对象<strong>都不是同一个对象</strong></p><p>String s3 &#x3D; s1 + s2;因为s1和s2时不确定的值所以在运行期间确定，结果会在堆内存中创建一个新的字符串（StringBuilder().append(“a”).append(“b”).toString()）</p><p>String s4 &#x3D; “a” + “b”;因为a和b是常量在编译期间已经确定，所以会直接在常量池中创建一个字符串</p><h4 id="StringTable-垃圾回收"><a href="#StringTable-垃圾回收" class="headerlink" title="StringTable 垃圾回收"></a>StringTable 垃圾回收</h4><p>1.8StringTable在堆内存中StringTable在内存紧张时，会发生垃圾回收</p><h4 id="StringTable调优"><a href="#StringTable调优" class="headerlink" title="StringTable调优"></a>StringTable调优</h4><ul><li><p>因为StringTable是由HashTable实现的，所以可以<strong>适当增加HashTable桶的个数</strong>，来减少字符串放入串池所需要的时间，因为每次添加都会遍历HashTable查找是否有重复的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-XX:StringTableSize=xxxx<br></code></pre></td></tr></table></figure></li><li><p>考虑是否需要将字符串对象入池</p><p>可以通过<strong>intern方法减少重复入池</strong></p></li></ul><h3 id="6、直接内存"><a href="#6、直接内存" class="headerlink" title="6、直接内存"></a>6、直接内存</h3><ul><li>属于操作系统，常见于NIO操作时，<strong>用于数据缓冲区</strong></li><li>分配回收成本较高，但读写性能高</li><li>不受JVM内存回收管理</li></ul><h4 id="文件读写流程"><a href="#文件读写流程" class="headerlink" title="文件读写流程"></a>文件读写流程</h4><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150715.png" alt="img"></p><p><strong>使用了DirectBuffer</strong></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150736.png" alt="img"></p><p>直接内存是操作系统和Java代码<strong>都可以访问的一块区域</strong>，无需将代码从系统内存复制到Java堆内存，从而提高了效率</p><h4 id="释放原理"><a href="#释放原理" class="headerlink" title="释放原理"></a>释放原理</h4><p>直接内存的回收不是通过JVM的垃圾回收机制来释放的，而是通过**unsafe.freeMemory()**来手动释放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过ByteBuffer申请1M的直接内存</span><br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">byteBuffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocateDirect(_1M);<br></code></pre></td></tr></table></figure><p><strong>allocateDirect的实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteBuffer <span class="hljs-title function_">allocateDirect</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectByteBuffer</span>(capacity);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DirectByteBuffer类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">DirectByteBuffer(<span class="hljs-type">int</span> cap) &#123;   <span class="hljs-comment">// package-private</span><br>   <br>    <span class="hljs-built_in">super</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, cap, cap);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span> VM.isDirectMemoryPageAligned();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> Bits.pageSize();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">1L</span>, (<span class="hljs-type">long</span>)cap + (pa ? ps : <span class="hljs-number">0</span>));<br>    Bits.reserveMemory(size, cap);<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        base = unsafe.allocateMemory(size); <span class="hljs-comment">//申请内存</span><br>    &#125; <span class="hljs-keyword">catch</span> (OutOfMemoryError x) &#123;<br>        Bits.unreserveMemory(size, cap);<br>        <span class="hljs-keyword">throw</span> x;<br>    &#125;<br>    unsafe.setMemory(base, size, (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (pa &amp;&amp; (base % ps != <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-comment">// Round up to page boundary</span><br>        address = base + ps - (base &amp; (ps - <span class="hljs-number">1</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        address = base;<br>    &#125;<br>    cleaner = Cleaner.create(<span class="hljs-built_in">this</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Deallocator</span>(base, size, cap)); <span class="hljs-comment">//通过虚引用，来实现直接内存的释放，this为虚引用的实际对象</span><br>    att = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里调用了一个Cleaner的create方法，且后台线程还会对虚引用的对象监测，如果虚引用的实际对象（这里是DirectByteBuffer）被回收以后，就会调用Cleaner的clean方法，来清除直接内存中占用的内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">if</span> (remove(<span class="hljs-built_in">this</span>)) &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-built_in">this</span>.thunk.run(); <span class="hljs-comment">//调用run方法</span><br>           &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> Throwable var2) &#123;<br>               AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;Void&gt;() &#123;<br>                   <span class="hljs-keyword">public</span> Void <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                       <span class="hljs-keyword">if</span> (System.err != <span class="hljs-literal">null</span>) &#123;<br>                           (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Cleaner terminated abnormally&quot;</span>, var2)).printStackTrace();<br>                       &#125;<br><br>                       System.exit(<span class="hljs-number">1</span>);<br>                       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                   &#125;<br>               &#125;);<br>           &#125;<br></code></pre></td></tr></table></figure><p>对应对象的run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (address == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// Paranoia</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    unsafe.freeMemory(address); <span class="hljs-comment">//释放直接内存中占用的内存</span><br>    address = <span class="hljs-number">0</span>;<br>    Bits.unreserveMemory(size, capacity);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="直接内存的回收机制总结"><a href="#直接内存的回收机制总结" class="headerlink" title="直接内存的回收机制总结"></a>直接内存的回收机制总结</h5><ul><li>使用了Unsafe类来完成直接内存的分配回收，回收需要主动调用freeMemory方法</li><li>ByteBuffer的实现内部使用了Cleaner（虚引用）来检测ByteBuffer。一旦ByteBuffer被垃圾回收，那么会由ReferenceHandler来调用Cleaner的clean方法调用freeMemory来释放内存</li></ul><h2 id="三、垃圾回收"><a href="#三、垃圾回收" class="headerlink" title="三、垃圾回收"></a>三、垃圾回收</h2><h3 id="1、如何判断对象可以回收"><a href="#1、如何判断对象可以回收" class="headerlink" title="1、如何判断对象可以回收"></a>1、如何判断对象可以回收</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>当对象被一个变量引用时，引用计数+1，当变量不在引用该对象时，引用-1，当引用计数为0时，对象被回收</p><p>弊端：循环引用时，两个对象的计数都为1，导致两个对象都无法被释放</p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150750.png" alt="img"></p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><ul><li>JVM中的垃圾回收器通过<strong>可达性分析</strong>来探索所有存活的对象</li><li>扫描堆中的对象，看能否沿着GC Root对象为起点的引用链找到该对象，如果<strong>找不到，则表示可以回收</strong></li><li>可以作为GC Root的对象<ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。　</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象</li></ul></li></ul><h4 id="五种引用"><a href="#五种引用" class="headerlink" title="五种引用"></a>五种引用</h4><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150800.png" alt="img"></p><h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><p>只有GC Root<strong>都不引用</strong>该对象时，才会回收<strong>强引用</strong>对象</p><ul><li>如上图B、C对象都不引用A1对象时，A1对象才会被回收</li></ul><h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>当GC Root指向软引用对象时，在<strong>内存不足时</strong>，会<strong>回收软引用所引用的对象</strong></p><ul><li>如上图如果B对象不再引用A2对象且内存不足时，软引用所引用的A2对象就会被回收</li></ul><h6 id="软引用的使用"><a href="#软引用的使用" class="headerlink" title="软引用的使用"></a>软引用的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">_4M</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<br><span class="hljs-comment">//使用软引用对象    list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br>List&lt;SoftReference&lt;<span class="hljs-type">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>SoftReference&lt;<span class="hljs-type">byte</span>[]&gt; ref= <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[_4M]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果在垃圾回收时发现内存不足，在回收软引用所指向的对象时，<strong>软引用本身不会被清理</strong></p><p>如果想要<strong>清理软引用</strong>，需要使用<strong>引用队列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">_4M</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<br><span class="hljs-comment">//使用引用队列，用于移除引用为空的软引用对象</span><br>ReferenceQueue&lt;<span class="hljs-type">byte</span>[]&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>&lt;&gt;();<br><span class="hljs-comment">//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br>List&lt;SoftReference&lt;<span class="hljs-type">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>SoftReference&lt;<span class="hljs-type">byte</span>[]&gt; ref= <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[_4M]);<br><br><span class="hljs-comment">//遍历引用队列，如果有元素，则移除</span><br>Reference&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">byte</span>[]&gt; poll = queue.poll();<br><span class="hljs-keyword">while</span>(poll != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">//引用队列不为空，则从集合中移除该元素</span><br>list.remove(poll);<br><span class="hljs-comment">//移动到引用队列中的下一个元素</span><br>poll = queue.poll();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>大概思路为：</strong>查看引用队列中有无软引用，如果有，则将该软引用从存放它的集合中移除（这里为一个list集合）</p><h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><p>只有弱引用引用该对象时，在垃圾回收时，<strong>无论内存是否充足</strong>，都会回收弱引用所引用的对象</p><ul><li>如上图如果B对象不再引用A3对象，则A3对象会被回收</li></ul><p><strong>弱引用的使用和软引用类似</strong>，只是将 <strong>SoftReference 换为了 WeakReference</strong></p><h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a><strong>虚引用</strong></h5><p>当虚引用对象所引用的对象被回收以后，虚引用对象就会被放入引用队列中，调用虚引用的方法</p><ul><li>虚引用的一个体现是<strong>释放直接内存所分配的内存</strong>，当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</li><li>如上图，B对象不再引用ByteBuffer对象，ByteBuffer就会被回收。但是直接内存中的内存还未被回收。这时需要将虚引用对象Cleaner放入引用队列中，然后调用它的clean方法来释放直接内存</li></ul><h5 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h5><p>所有的类都继承自Object类，Object类有一个<strong>finalize方法</strong>。当某个对象不再被其他的对象所引用时，会先将终结器引用对象放入引用队列中，然后根据终结器引用对象找到它所引用的对象，然后调用该对象的finalize方法。调用以后，该对象就可以被垃圾回收了</p><ul><li>如上图，B对象不再引用A4对象。这是终结器对象就会被放入引用队列中，引用队列会根据它，找到它所引用的对象。然后调用被引用对象的finalize方法。调用以后，该对象就可以被垃圾回收了</li></ul><h5 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h5><ul><li>软引用和弱引用<strong>可以配合</strong>引用队列<ul><li>在<strong>软引用</strong>和<strong>弱引用</strong>所引用的对象被回收以后，会将这些引用放入引用队列中，方便一起回收这些软&#x2F;弱引用对象</li></ul></li><li>虚引用和终结器引用<strong>必须配合</strong>引用队列<ul><li>虚引用和终结器引用在使用时会关联一个引用队列</li></ul></li></ul><h3 id="2、垃圾回收算法"><a href="#2、垃圾回收算法" class="headerlink" title="2、垃圾回收算法"></a>2、垃圾回收算法</h3><h4 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h4><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150813.png" alt="img"></p><p><strong>定义</strong>：标记清除是指在虚拟机执行垃圾回收的过程中，先采用标记算法确定可回收对象，然后垃圾收集器根据标识清除相应的内容，给堆内存腾出相应的空间</p><ul><li>这里的腾出内存空间并不是将内存空间的字节清0，而是记录下这段内存的起始地址和结束地址，下次分配内存的时候，会直接<strong>覆盖</strong>这段内存</li></ul><p><strong>缺点</strong>：<strong>容易产生大量的内存碎片</strong>，空闲的内存空间不连续，可能无法满足大对象的内存分配，一旦导致无法分配对象，那就会导致jvm启动gc，一旦启动gc，我们的应用程序就会暂停，这就导致应用的响应速度变慢</p><h4 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h4><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150827.png" alt="img"></p><p>标记-整理 会将不被GC Root引用的对象回收，清楚其占用的内存空间。然后整理剩余的对象，可以有效避免因内存碎片而导致的问题，但是因为整体需要消耗一定的时间，所以效率较低</p><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150842.png" alt="img"></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150907.png" alt="img"></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150919.png" alt="img"></p><p>将内存分为等大小的两个区域，FROM和TO（TO中为空）。先将被GC Root引用的对象从FROM放入TO中，再回收不被GC Root引用的对象。然后交换FROM和TO。这样也可以避免内存碎片的问题，但是会占用双倍的内存空间。</p><h3 id="3、分代回收"><a href="#3、分代回收" class="headerlink" title="3、分代回收"></a>3、分代回收</h3><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150931.png" alt="img"></p><h4 id="回收流程"><a href="#回收流程" class="headerlink" title="回收流程"></a>回收流程</h4><p>新创建的对象都被放在了<strong>新生代的伊甸园</strong>中</p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150939.png" alt="img"></p><p>当伊甸园中的内存不足时，就会进行一次垃圾回收，这时的回收叫做 <strong>Minor GC</strong></p><p>Minor GC 会将<strong>伊甸园和幸存区FROM</strong>存活的对象先复制到 <strong>幸存区 TO</strong>中， 并让其<strong>寿命加1</strong>，再<strong>交换两个幸存区</strong></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150946.png" alt="img"></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150955.png" alt="img"></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151002.png" alt="img"></p><p>再次创建对象，若新生代的伊甸园又满了，则会<strong>再次触发 Minor GC</strong>（会触发 <strong>stop the world</strong>， 暂停其他用户线程，只让垃圾回收线程工作），这时不仅会回收伊甸园中的垃圾，<strong>还会回收幸存区中的垃圾</strong>，再将活跃对象复制到幸存区TO中。回收以后会交换两个幸存区，并让幸存区中的对象<strong>寿命加1</strong></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151010.png" alt="img"></p><p>如果幸存区中的对象的<strong>寿命超过某个阈值</strong>（可以通过参数-XX:MaxTenuringThreshold设置，最大为15，对象头中有4bit表示寿命），就会被<strong>放入老年代</strong>中</p><p>如果新生代的内存不足时，会将对象直接分配给老年代</p><p>如果在Survivor(幸存区)空间中<strong>相同年龄</strong>的所有对象大小的总和<strong>大于Survivor空间的一半</strong>，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄就会被<strong>放入老年代</strong>中</p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151018.png" alt="img"></p><p>如果新生代老年代中的内存都满了，就会先触发Minor GC，如果空间任然不足，再触发<strong>Full GC</strong>，扫描<strong>新生代和老年代中</strong>所有不再使用的对象并回收</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-Xms</td><td>堆内存初始大小</td></tr><tr><td>-Xmx或-XX:MaxHeapSize&#x3D;size</td><td>堆内存最大允许大小，一般不要大于物理内存的80%</td></tr><tr><td>-Xns或-XX:NewSize&#x3D;size</td><td>年轻代内存初始大小</td></tr><tr><td>-Xmn或-XX:MaxNewSize&#x3D;size</td><td>年轻代内存最大允许大小</td></tr><tr><td>-XX:NewRatio&#x3D;4</td><td>新生代和老年代的比值                                                                                       值为4 表示 新生代:老年代&#x3D;1:4，即年轻代占堆的1&#x2F;5</td></tr><tr><td>-XX:SurvivorRatio&#x3D;8</td><td>年轻代中Eden区与Survivor区的容量比例值默认为8                                                    表示两个eden:Survivor from:Survivor to&#x3D;8:1:1，即一个Survivor占年轻代的1&#x2F;10</td></tr><tr><td>XX:+HeapDumpOnOutOfMemoryError</td><td>内存溢出时，导出堆信息到文件</td></tr><tr><td>-XX:MaxTenuringThreshold&#x3D;7</td><td>表示如果在幸存区移动多少次没有被垃圾回收，进入老年代</td></tr></tbody></table><h4 id="GC-分析"><a href="#GC-分析" class="headerlink" title="GC 分析"></a>GC 分析</h4><h5 id="大对象处理策略"><a href="#大对象处理策略" class="headerlink" title="大对象处理策略"></a>大对象处理策略</h5><p>当遇到一个<strong>较大的对象</strong>时，就算新生代的<strong>伊甸园</strong>为空，也<strong>无法容纳该对象</strong>时，会将该对象<strong>直接晋升为老年代</strong></p><h5 id="线程内存溢出"><a href="#线程内存溢出" class="headerlink" title="线程内存溢出"></a>线程内存溢出</h5><p>某个线程的内存溢出了而抛异常（out of memory），不会让其他的线程结束运行</p><p>这是因为当一个线程<strong>抛出OOM异常后</strong>，<strong>它所占据的内存资源会全部被释放掉</strong>，从而不会影响其他线程的运行，<strong>进程依然正常</strong></p><h3 id="4、垃圾回收器"><a href="#4、垃圾回收器" class="headerlink" title="4、垃圾回收器"></a>4、垃圾回收器</h3><img src="https://img-blog.csdn.net/20170102225015393" alt="img" style="zoom:150%;"><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p><strong>并行收集</strong>：指多条垃圾收集线程并行工作，但此时<strong>用户线程仍处于等待状态</strong>。</p><p><strong>并发收集</strong>：指用户线程与垃圾收集线程<strong>同时工作</strong>（不一定是并行的可能会交替执行）。<strong>用户程序在继续运行</strong>，而垃圾收集程序运行在另一个CPU上</p><p><strong>吞吐量</strong>：即CPU用于<strong>运行用户代码的时间</strong>与CPU<strong>总消耗时间</strong>的比值（吞吐量 &#x3D; 运行用户代码时间 &#x2F; ( 运行用户代码时间 + 垃圾收集时间 )），也就是。例如：虚拟机共运行100分钟，垃圾收集器花掉1分钟，那么吞吐量就是99%</p><h4 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h4><ul><li>单线程</li><li>内存较小，个人电脑（CPU核数较少）</li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151027.png" alt="img"></p><p><strong>安全点</strong>：让其他线程都在这个点停下来，以免垃圾回收时移动对象地址，使得其他线程找不到被移动的对象</p><p>因为是串行的，所以只有一个垃圾回收线程。且在该线程执行回收工作时，其他线程进入<strong>阻塞</strong>状态</p><h5 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h5><img src="https://img-blog.csdn.net/20170102225015841" alt="img" style="zoom:150%;"><p>Serial收集器是最基本的、发展历史最悠久的收集器</p><p><strong>特点</strong>：<strong>单线程</strong>、简单高效（与其他收集器的单线程相比），是一个<strong>新生代</strong>的垃圾回收器，采用<strong>复制算法</strong>。对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程手机效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（Stop The World）</p><h5 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h5><img src="https://img-blog.csdn.net/20170102225016331" alt="img" style="zoom:150%;"><p>ParNew收集器其实就是Serial收集器的多线程版本</p><p><strong>特点</strong>：<strong>多线程</strong>、ParNew收集器默认开启的<strong>收集线程数与CPU的数量相同</strong>，采用的是<strong>复制算法</strong>，在CPU非常多的环境中，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。和Serial收集器一样存在Stop The World问题</p><h5 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h5><img src="https://img-blog.csdn.net/20170102225016763" alt="img" style="zoom:150%;"><p>Serial Old是Serial收集器的<strong>老年代</strong>版本</p><p><strong>特点</strong>：同样是<strong>单线程</strong>收集器，采用<strong>标记-整理算法</strong></p><h4 id="吞吐量优先"><a href="#吞吐量优先" class="headerlink" title="吞吐量优先"></a>吞吐量优先</h4><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>单位时间内，STW（stop the world，停掉其他所有工作线程）时间最短</li><li><strong>JDK1.8默认使用</strong>的垃圾回收器</li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151039.png" alt="img"></p><h5 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h5><img src="https://img-blog.csdn.net/20170102225017065" alt="img" style="zoom:150%;"><p>与吞吐量关系密切，故也称为吞吐量优先收集器</p><p><strong>特点</strong>：属于<strong>新生代</strong>收集器也是采用<strong>复制算法</strong>的收集器（用到了新生代的幸存区），又是并行的<strong>多线程</strong>收集器（与ParNew收集器类似）</p><p>该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：<strong>GC自适应调节策略</strong>（与ParNew收集器最重要的一个区别）</p><p><strong>GC自适应调节策略</strong>：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时<strong>不需要</strong>手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，<strong>动态设置</strong>这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。</p><p>Parallel Scavenge收集器使用两个参数控制吞吐量：</p><ul><li>XX:MaxGCPauseMillis 控制最大的垃圾收集停顿时间</li><li>XX:GCRatio 直接设置吞吐量的大小</li></ul><h5 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a><strong>Parallel Old 收集器</strong></h5><p>是Parallel Scavenge收集器的<strong>老年代</strong>版本</p><p><strong>特点</strong>：<strong>多线程</strong>，采用<strong>标记-整理算法</strong>（老年代没有幸存区）</p><h4 id="响应时间优先"><a href="#响应时间优先" class="headerlink" title="响应时间优先"></a>响应时间优先</h4><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>尽可能让单次STW时间变短（尽量不影响其他线程运行）</li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151052.png" alt="img"></p><h5 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h5><img src="https://img-blog.csdn.net/20170102225017372" alt="img" style="zoom:150%;"><p>Concurrent Mark Sweep，一种以获取<strong>最短回收停顿时间</strong>为目标的<strong>老年代</strong>收集器</p><p><strong>特点</strong>：基于<strong>标记-清除算法</strong>实现。并发收集、低停顿，但是会产生内存碎片</p><p><strong>应用场景</strong>：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web程序、b&#x2F;s服务</p><p><strong>CMS收集器的运行过程分为下列4步：</strong></p><p><strong>初始标记</strong>：标记GC Roots能直接到的对象。速度很快但是<strong>仍存在Stop The World问题</strong></p><p><strong>并发标记</strong>：进行GC Roots Tracing 的过程，在初始标记的集合中找出<strong>存活对象</strong>且用户线程可并发执行</p><p><strong>重新标记</strong>：为了<strong>修正并发标记期间</strong>因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。<strong>仍然存在Stop The World问题</strong></p><p><strong>并发清除</strong>：对标记的对象进行清除回收</p><p>CMS收集器的内存回收过程是与用户线程一起<strong>并发执行</strong>的</p><h4 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h4><img src="https://img-blog.csdn.net/20170102225017799" alt="img" style="zoom:150%;"><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a><strong>定义</strong></h5><p>Garbage First</p><p><strong>JDK 9以后默认使用</strong>，而且替代了CMS 收集器</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F870%2F7a255de61fbe91778d983f84584ad51e.png&refer=http%3A%2F%2Fwww.pianshen.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638442701&t=a29f28ddb049e0b994fb6bdef0192a50" alt="img"></p><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>同时注重吞吐量和低延迟（响应时间）</li><li>超大堆内存（内存大的），会将堆内存划分为多个<strong>大小相等</strong>的区域</li><li>整体上是<strong>标记-整理</strong>算法，两个区域之间是<strong>复制</strong>算法</li></ul><p><strong>相关参数</strong>：JDK8 并不是默认开启的，所需要参数开启</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151239.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151100.png" alt="img" style="zoom: 67%;"></a></p><h5 id="G1垃圾回收阶段"><a href="#G1垃圾回收阶段" class="headerlink" title="G1垃圾回收阶段"></a>G1垃圾回收阶段</h5><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151109.png" alt="img" style="zoom:50%;"><p>新生代伊甸园垃圾回收—–&gt;内存不足，新生代回收+并发标记—–&gt;回收新生代伊甸园、幸存区、老年代内存——&gt;新生代伊甸园垃圾回收(重新开始)</p><h5 id="Young-Collection"><a href="#Young-Collection" class="headerlink" title="Young Collection"></a>Young Collection</h5><p><strong>分区算法region</strong></p><p>分代是按对象的生命周期划分，<strong>分区则是将堆空间划分连续几个不同小区间，每一个小区间独立回收</strong>，可以控制一次回收多少个小区间，方便控制 GC 产生的停顿时间</p><p>E：伊甸园     S：幸存区      O：老年代</p><ul><li>会发生STW</li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151119.png" alt="img" style="zoom: 33%;"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151129.png" alt="img" style="zoom: 33%;"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151140.png" alt="img" style="zoom: 33%;"><h5 id="Young-Collection-CM"><a href="#Young-Collection-CM" class="headerlink" title="Young Collection + CM"></a>Young Collection + CM</h5><p>CM：并发标记</p><ul><li>在 Young GC 时会<strong>对 GC Root 进行初始标记</strong></li><li>在老年代<strong>占用堆内存的比例</strong>达到阈值时，会进行并发标记（不会STW），阈值可以根据用户来进行设定</li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151150.png" alt="img" style="zoom: 33%;"><h5 id="Mixed-Collection"><a href="#Mixed-Collection" class="headerlink" title="Mixed Collection"></a>Mixed Collection</h5><p>会对E S O 进行<strong>全面的回收</strong></p><ul><li>最终标记，会STW</li><li>拷贝存活，会STW</li></ul><p>-XX:MaxGCPauseMills&#x3D;xxx 用于指定最长的停顿时间</p><p><strong>问</strong>：为什么有的老年代被拷贝了，有的没拷贝？</p><p>因为指定了最大停顿时间，如果对所有老年代都进行回收，耗时可能过高。为了保证时间不超过设定的停顿时间，会<strong>回收最有价值的老年代</strong>（回收后，能够得到更多内存）</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151201.png" alt="img" style="zoom: 33%;"><h5 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h5><p>G1在老年代内存不足时（老年代所占内存超过阈值）</p><ul><li>如果垃圾产生速度慢于垃圾回收速度，不会触发Full GC，还是并发地进行清理</li><li>如果垃圾产生速度快于垃圾回收速度，便会触发Full GC</li></ul><h5 id="Young-Collection-跨代引用"><a href="#Young-Collection-跨代引用" class="headerlink" title="Young Collection 跨代引用"></a>Young Collection 跨代引用</h5><ul><li>新生代回收的跨代引用（<strong>老年代引用新生代</strong>）问题</li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151211.png" alt="img" style="zoom: 50%;"><ul><li>卡表与Remembered Set<ul><li>Remembered Set 存在于E中，用于<strong>保存新生代对象对应的脏卡</strong><ul><li>脏卡：老年代被划分为多个区域（一个区域512K），如果该区域引用了新生代对象，则该区域被称为脏卡</li></ul></li></ul></li><li>在引用变更时通过post-write barried –&gt; dirty card queue</li><li>concurrent refinement threads线程 更新 Remembered Set</li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151222.png" alt="img" style="zoom: 50%;"><p>在垃圾回收时，收集器处理对象的过程中</p><p>黑色：已被处理，需要保留的 </p><p>灰色：正在处理中的 </p><p>白色：还未处理的</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151229.png" alt="img" style="zoom:50%;"><p>但是在<strong>并发标记过程中</strong>，有可能A被处理了以后未引用C，但该处理过程还未结束，在处理过程结束之前A引用了C，这时就会用到remark</p><p>过程如下</p><ul><li>之前C未被引用，这时A引用了C，就会给C加一个写屏障，写屏障的指令会被执行，将C放入一个队列当中，并将C变为 处理中 状态</li><li>在<strong>并发标记</strong>阶段结束以后，重新标记阶段会STW，然后将放在该队列中的对象重新处理，发现有强引用引用它，就会处理它</li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151239.png" alt="img" style="zoom:50%;"><h5 id="G1优化"><a href="#G1优化" class="headerlink" title="G1优化"></a>G1优化</h5><h6 id="JDK-8u20-字符串去重"><a href="#JDK-8u20-字符串去重" class="headerlink" title="JDK 8u20 字符串去重"></a>JDK 8u20 字符串去重</h6><p>过程</p><ul><li>将所有新分配的字符串（底层是char[]）放入一个队列</li><li>当新生代回收时，G1并发检查是否有重复的字符串</li><li>如果字符串的值一样，就让他们<strong>引用同一个字符串对象</strong></li><li>注意，其与String.intern的区别<ul><li>intern关注的是字符串对象</li><li>字符串去重关注的是char[]</li><li>在JVM内部，使用了不同的字符串标</li></ul></li></ul><p>优点与缺点</p><ul><li>节省了大量内存</li><li>新生代回收时间略微增加，导致略微多占用CPU</li></ul><h6 id="JDK-8u40-并发标记类卸载"><a href="#JDK-8u40-并发标记类卸载" class="headerlink" title="JDK 8u40 并发标记类卸载"></a>JDK 8u40 并发标记类卸载</h6><p>在并发标记阶段结束以后，就能知道哪些类不再被使用。如果一个类加载器的所有类都不在使用，则卸载它所加载的所有类</p><h6 id="JDK-8u60-回收巨型对象"><a href="#JDK-8u60-回收巨型对象" class="headerlink" title="JDK 8u60 回收巨型对象"></a>JDK 8u60 回收巨型对象</h6><ul><li>一个对象大于region的一半时，就称为巨型对象</li><li>G1不会对巨型对象进行拷贝</li><li>回收时被优先考虑</li><li>G1会跟踪老年代所有incoming引用，如果老年代incoming引用为0的巨型对象就可以在新生代垃圾回收时处理掉</li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151249.png" alt="img" style="zoom:50%;"><h3 id="5、GC-调优"><a href="#5、GC-调优" class="headerlink" title="5、GC 调优"></a>5、GC 调优</h3><p>查看虚拟机参数命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;F:\JAVA\JDK8.0\bin\java&quot;</span> -XX:+PrintFlagsFinal -version | findstr <span class="hljs-string">&quot;GC&quot;</span><br></code></pre></td></tr></table></figure><p>可以根据参数去查询具体的信息</p><h4 id="调优领域"><a href="#调优领域" class="headerlink" title="调优领域"></a>调优领域</h4><ul><li>内存</li><li>锁竞争</li><li>CPU占用</li><li>IO</li><li><strong>GC</strong></li></ul><h4 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h4><p>低延迟&#x2F;高吞吐量？ 选择合适的GC</p><ul><li>CMS G1 ZGC（低延迟）</li><li>ParallelGC（高吞吐量）</li><li>Zing（虚拟机）</li></ul><h4 id="最快的GC是不发生GC"><a href="#最快的GC是不发生GC" class="headerlink" title="最快的GC是不发生GC"></a>最快的GC是不发生GC</h4><p>首先排除减少因为自身编写的代码而引发的内存问题</p><ul><li>查看Full GC前后的内存占用，考虑以下几个问题<ul><li>数据是不是太多？比如查询数据库时一次返回过多的数据</li><li>数据表示是否太臃肿<ul><li>对象图</li><li>对象大小</li></ul></li><li>是否存在内存泄漏，尽量使用第三的缓存实现（redis）</li></ul></li></ul><h4 id="新生代调优"><a href="#新生代调优" class="headerlink" title="新生代调优"></a>新生代调优</h4><ul><li>新生代的特点<ul><li>所有的new操作分配内存都是非常廉价的<ul><li><strong>TLAB：每个线程在Eden都存在私有的缓冲区，线程优先在该空间进行分配</strong></li></ul></li><li>死亡对象回收零代价（复制算法）</li><li>大部分对象用过即死（朝生夕死）</li><li><strong>MInor GC 所用时间远小于Full GC</strong></li></ul></li><li>新生代内存越大越好么？<ul><li>不是<ul><li>新生代内存太小：频繁触发Minor GC，会STW使得吞吐量下降</li><li>新生代内存太大：老年代内存占比有所降低，会更频繁地触发Full GC。而且触发Minor GC时，清理新生代所花费的时间会更长</li></ul></li><li>新生代内存设置为   <em><em>并发量</em>(请求-响应所占用的内存)</em>*   最佳</li></ul></li></ul><h4 id="幸存区调优"><a href="#幸存区调优" class="headerlink" title="幸存区调优"></a>幸存区调优</h4><ul><li>幸存区需要能够保存 <strong>当前活跃对象</strong>+<strong>需要晋升的对象</strong></li><li>晋升阈值配置得当，让长时间存活的对象尽快晋升</li></ul><h4 id="老年代调优"><a href="#老年代调优" class="headerlink" title="老年代调优"></a>老年代调优</h4><h2 id="四、类加载与字节码技术"><a href="#四、类加载与字节码技术" class="headerlink" title="四、类加载与字节码技术"></a>四、类加载与字节码技术</h2><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151300.png" alt="img"></p><h3 id="1、类文件结构"><a href="#1、类文件结构" class="headerlink" title="1、类文件结构"></a>1、类文件结构</h3><p>编译java文件</p><ul><li>在文本文档里写入java代码（文件名与类名一致），将文件类型改为.java</li><li>java终端中，执行javac X:…\XXX.java</li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200910155135.png" alt="img"></p><p>以下是字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0000000</span> ca fe ba be <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">34</span> <span class="hljs-number">00</span> <span class="hljs-number">23</span> 0a <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">15</span> 09 <br><span class="hljs-number">0000020</span> <span class="hljs-number">00</span> <span class="hljs-number">16</span> <span class="hljs-number">00</span> <span class="hljs-number">17</span> 08 <span class="hljs-number">00</span> <span class="hljs-number">18</span> 0a <span class="hljs-number">00</span> <span class="hljs-number">19</span> <span class="hljs-number">00</span> 1a <span class="hljs-number">07</span> <span class="hljs-number">00</span> 1b <span class="hljs-number">07</span> <br><span class="hljs-number">0000040</span> <span class="hljs-number">00</span> 1c <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">06</span> 3c <span class="hljs-number">69</span> 6e <span class="hljs-number">69</span> <span class="hljs-number">74</span> 3e <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">03</span> <span class="hljs-number">28</span> <span class="hljs-number">29</span> <br><span class="hljs-number">0000060</span> <span class="hljs-number">56</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">43</span> <span class="hljs-number">6f</span> <span class="hljs-number">64</span> <span class="hljs-number">65</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">0f</span> 4c <span class="hljs-number">69</span> 6e <span class="hljs-number">65</span> 4e <br><span class="hljs-number">0000100</span> <span class="hljs-number">75</span> <span class="hljs-number">6d</span> <span class="hljs-number">62</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">54</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> 6c <span class="hljs-number">65</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">12</span> 4c <span class="hljs-number">6f</span> <span class="hljs-number">63</span> <br><span class="hljs-number">0000120</span> <span class="hljs-number">61</span> 6c <span class="hljs-number">56</span> <span class="hljs-number">61</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> 6c <span class="hljs-number">65</span> <span class="hljs-number">54</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> 6c <span class="hljs-number">65</span> <span class="hljs-number">01</span> <br><span class="hljs-number">0000140</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">74</span> <span class="hljs-number">68</span> <span class="hljs-number">69</span> <span class="hljs-number">73</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">1d</span> 4c <span class="hljs-number">63</span> 6e <span class="hljs-number">2f</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">63</span> <br><span class="hljs-number">0000160</span> <span class="hljs-number">61</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> <span class="hljs-number">2f</span> 6a <span class="hljs-number">76</span> <span class="hljs-number">6d</span> <span class="hljs-number">2f</span> <span class="hljs-number">74</span> <span class="hljs-number">35</span> <span class="hljs-number">2f</span> <span class="hljs-number">48</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span> <br><span class="hljs-number">0000200</span> <span class="hljs-number">57</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> 6c <span class="hljs-number">64</span> 3b <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">6d</span> <span class="hljs-number">61</span> <span class="hljs-number">69</span> 6e <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">16</span> <br><span class="hljs-number">0000220</span> <span class="hljs-number">28</span> 5b 4c 6a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">2f</span> 6c <span class="hljs-number">61</span> 6e <span class="hljs-number">67</span> <span class="hljs-number">2f</span> <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">72</span> <br><span class="hljs-number">0000240</span> <span class="hljs-number">69</span> 6e <span class="hljs-number">67</span> 3b <span class="hljs-number">29</span> <span class="hljs-number">56</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">61</span> <span class="hljs-number">72</span> <span class="hljs-number">67</span> <span class="hljs-number">73</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">13</span> <br><span class="hljs-number">0000260</span> 5b 4c 6a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">2f</span> 6c <span class="hljs-number">61</span> 6e <span class="hljs-number">67</span> <span class="hljs-number">2f</span> <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <br><br></code></pre></td></tr></table></figure><p>根据 JVM 规范，<strong>类文件结构</strong>如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">ClassFile&#123;<br>    u4    magic;<br>    u2             minor_version;    <br>    u2             major_version;    <br>    u2             constant_pool_count;    <br>    cp_info        constant_pool[constant_pool_count-<span class="hljs-number">1</span>];    <br>    u2             access_flags;    <br>    u2             this_class;    <br>    u2             super_class;   <br>    u2             interfaces_count;    <br>    u2             interfaces[interfaces_count];   <br>    u2             fields_count;    <br>    field_info     fields[fields_count];   <br>    u2             methods_count;    <br>    method_info    methods[methods_count];    <br>    u2             attributes_count;    <br>    attribute_info attributes[attributes_count];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h4><p>u4 magic</p><p>对应字节码文件的0~3个字节</p><p>0000000 <strong>ca fe ba be</strong> 00 00 00 34 00 23 0a 00 06 00 15 09</p><p><strong>ca fe ba be</strong>:表示是class文件</p><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>u2 minor_version;</p><p>u2 major_version;</p><p>0000000 ca fe ba be <strong>00 00 00 34</strong> 00 23 0a 00 06 00 15 09</p><p>34H &#x3D; 52，代表JDK8</p><h4 id="常量池-1"><a href="#常量池-1" class="headerlink" title="常量池"></a>常量池</h4><h3 id="2、字节码指令"><a href="#2、字节码指令" class="headerlink" title="2、字节码指令"></a>2、字节码指令</h3><h4 id="javap工具"><a href="#javap工具" class="headerlink" title="javap工具"></a>javap工具</h4><p>Oracle 提供了 <strong>javap</strong> 工具来反编译 class 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javap -v F:\Thread_study\src\com\nyima\JVM\day01\Main.class<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java">Classfile /F:/Thread_study/src/com/nyima/JVM/day5/Demo1.<span class="hljs-keyword">class</span><br>  <span class="hljs-title class_">Last</span> modified <span class="hljs-number">2020</span>-<span class="hljs-number">6</span>-<span class="hljs-number">6</span>; size <span class="hljs-number">434</span> bytes<br>  MD5 checksum df1dce65bf6fb0b4c1de318051f4a67e<br>  Compiled from <span class="hljs-string">&quot;Demo1.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.nyima.JVM.day5.Demo1<br>  minor version: <span class="hljs-number">0</span><br>  major version: <span class="hljs-number">52</span><br>  flags: ACC_PUBLIC, ACC_SUPER<br>Constant pool:<br>   #<span class="hljs-number">1</span> = Methodref          #<span class="hljs-number">6.</span>#<span class="hljs-number">15</span>         <span class="hljs-comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   #<span class="hljs-number">2</span> = Fieldref           #<span class="hljs-number">16.</span>#<span class="hljs-number">17</span>        <span class="hljs-comment">// java/lang/System.out:Ljava/io/PrintStream;</span><br>   #<span class="hljs-number">3</span> = String             #<span class="hljs-number">18</span>            <span class="hljs-comment">// hello world</span><br>   #<span class="hljs-number">4</span> = Methodref          #<span class="hljs-number">19.</span>#<span class="hljs-number">20</span>        <span class="hljs-comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>   #<span class="hljs-number">5</span> = Class              #<span class="hljs-number">21</span>            <span class="hljs-comment">// com/nyima/JVM/day5/Demo1</span><br>   #<span class="hljs-number">6</span> = Class              #<span class="hljs-number">22</span>            <span class="hljs-comment">// java/lang/Object</span><br>   #<span class="hljs-number">7</span> = Utf8               &lt;init&gt;<br>   #<span class="hljs-number">8</span> = Utf8               ()V<br>   #<span class="hljs-number">9</span> = Utf8               Code<br>  #<span class="hljs-number">10</span> = Utf8               LineNumberTable<br>  #<span class="hljs-number">11</span> = Utf8               main<br>  #<span class="hljs-number">12</span> = Utf8               ([Ljava/lang/String;)V<br>  #<span class="hljs-number">13</span> = Utf8               SourceFile<br>  #<span class="hljs-number">14</span> = Utf8               Demo1.java<br>  #<span class="hljs-number">15</span> = NameAndType        #<span class="hljs-number">7</span>:#<span class="hljs-number">8</span>          <span class="hljs-comment">// &quot;&lt;init&gt;&quot;:()V</span><br>  #<span class="hljs-number">16</span> = Class              #<span class="hljs-number">23</span>            <span class="hljs-comment">// java/lang/System</span><br>  #<span class="hljs-number">17</span> = NameAndType        #<span class="hljs-number">24</span>:#<span class="hljs-number">25</span>        <span class="hljs-comment">// out:Ljava/io/PrintStream;</span><br>  #<span class="hljs-number">18</span> = Utf8               hello world<br>  #<span class="hljs-number">19</span> = Class              #<span class="hljs-number">26</span>            <span class="hljs-comment">// java/io/PrintStream</span><br>  #<span class="hljs-number">20</span> = NameAndType        #<span class="hljs-number">27</span>:#<span class="hljs-number">28</span>        <span class="hljs-comment">// println:(Ljava/lang/String;)V</span><br>  #<span class="hljs-number">21</span> = Utf8               com/nyima/JVM/day5/Demo1<br>  #<span class="hljs-number">22</span> = Utf8               java/lang/Object<br>  #<span class="hljs-number">23</span> = Utf8               java/lang/System<br>  #<span class="hljs-number">24</span> = Utf8               out<br>  #<span class="hljs-number">25</span> = Utf8               Ljava/io/PrintStream;<br>  #<span class="hljs-number">26</span> = Utf8               java/io/PrintStream<br>  #<span class="hljs-number">27</span> = Utf8               println<br>  #<span class="hljs-number">28</span> = Utf8               (Ljava/lang/String;)V<br>&#123;<br>  <span class="hljs-keyword">public</span> com.nyima.JVM.day5.Demo1();<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: invokespecial #<span class="hljs-number">1</span>                  <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-number">4</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">7</span>: <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(java.lang.String[])</span>;<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: getstatic     #<span class="hljs-number">2</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>         <span class="hljs-number">3</span>: ldc           #<span class="hljs-number">3</span>                  <span class="hljs-comment">// String hello world</span><br>         <span class="hljs-number">5</span>: invokevirtual #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><br>         <span class="hljs-number">8</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">9</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">10</span>: <span class="hljs-number">8</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="图解方法执行流程"><a href="#图解方法执行流程" class="headerlink" title="图解方法执行流程"></a>图解方法执行流程</h4><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo3_1</span> &#123;    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;        <br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Short.MAX_VALUE + <span class="hljs-number">1</span>;        <br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;        <br>System.out.println(c);   <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="加载过程"><a href="#加载过程" class="headerlink" title="加载过程"></a>加载过程</h4><p><strong>将常量池载入运行时常量池</strong>（运行时常量池也属于方法区，只不过这里单独提出来了）</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151317.png" alt="img" style="zoom:50%;"><p><strong>将方法字节码载入方法区</strong></p><p>（stack&#x3D;2，locals&#x3D;4） 对应操作数栈深度为2（每个深度4个字节），局部变量表中有4个槽位</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151325.png" alt="img" style="zoom:50%;"><p><strong>执行引擎开始执行字节码</strong></p><p><strong>bipush 10</strong></p><ul><li><p>将一个 byte 压入操作数栈（其长度会补齐 4 个字节）</p><ul><li>sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）</li></ul></li><li><p>ldc 将一个 int 压入操作数栈</p><ul><li>ldc2_w 将一个 long 压入操作数栈（<strong>分两次压入</strong>，因为 long 是 8 个字节）</li><li>这里取值小的数字都是和字节码指令存在方法区，**超过类型取值范围的数字存入了常量池 **   int b &#x3D; Short.MAX_VALUE + 1;</li></ul></li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151336.png" alt="img" style="zoom:50%;"><p><strong>istore 1</strong></p><p>将操作数栈栈顶元素弹出，放入局部变量表的slot 1中</p><p>对应代码中的</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151346.png" alt="img" style="zoom:50%;"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151412.png" alt="img" style="zoom:50%;"><p><strong>ldc #3</strong></p><p>读取运行时常量池中#3，即32768(超过short最大值范围的数会被放到运行时常量池中)，将其加载到操作数栈中</p><p>注意 Short.MAX_VALUE 是 32767，所以 32768 &#x3D; Short.MAX_VALUE + 1 实际是在编译期间计算好的</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151421.png" alt="img" style="zoom:50%;"><p><strong>istore 2</strong></p><p>将操作数栈中的元素弹出，放到局部变量表的2号位置</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151432.png" alt="img" style="zoom:50%;"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151441.png" alt="img" style="zoom:50%;"><p><strong>iload1 iload2</strong></p><p>将局部变量表中1号位置和2号位置的元素放入操作数栈中</p><ul><li>因为只能在操作数栈中执行运算操作</li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151450.png" alt="img" style="zoom:50%;"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151459.png" alt="img" style="zoom:50%;"><p><strong>iadd</strong></p><p>将操作数栈中的两个元素<strong>弹出栈</strong>并相加，结果在压入操作数栈中</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151508.png" alt="img" style="zoom:50%;"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151523.png" alt="img" style="zoom:50%;"><p><strong>istore 3</strong></p><p>将操作数栈中的元素弹出，放入局部变量表的3号位置</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151547.png" alt="img" style="zoom:50%;"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151555.png" alt="img" style="zoom:50%;"><p><strong>getstatic #4</strong></p><p>在运行时常量池中找到#4，发现是一个对象</p><p>在堆内存中找到该对象，并将其<strong>引用</strong>放入操作数栈中</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151605.png" alt="img" style="zoom:50%;"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151613.png" alt="img" style="zoom:50%;"><p><strong>iload 3</strong></p><p>将局部变量表中3号位置的元素压入操作数栈中</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151624.png" alt="img" style="zoom:50%;"><p><strong>invokevirtual 5</strong></p><p>找到常量池 #5 项，定位到方法区 java&#x2F;io&#x2F;PrintStream.println:(I)V 方法</p><p>生成新的栈帧（分配 locals、stack等）</p><p>传递参数，执行新栈帧中的字节码</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151632.png" alt="img" style="zoom:50%;"><p>执行完毕，弹出栈帧</p><p>清除 main 操作数栈内容</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151640.png" alt="img" style="zoom:50%;"><p><strong>return</strong><br>完成 main 方法调用，弹出 main 栈帧，程序结束</p><h4 id="通过字节码指令来分析问题"><a href="#通过字节码指令来分析问题" class="headerlink" title="通过字节码指令来分析问题"></a>通过字节码指令来分析问题</h4><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">10</span>) &#123;<br>x = x++;<br>i++;<br>&#125;<br>System.out.println(x); <span class="hljs-comment">//结果为0</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么最终的x结果为0呢？ 通过分析字节码指令即可知晓</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span><span class="hljs-comment">//操作数栈分配2个空间，局部变量表分配3个空间</span><br>        <span class="hljs-number">0</span>: iconst_0<span class="hljs-comment">//准备一个常数0</span><br>        <span class="hljs-number">1</span>: istore_1<span class="hljs-comment">//将常数0放入局部变量表的1号槽位 i=0</span><br>        <span class="hljs-number">2</span>: iconst_0<span class="hljs-comment">//准备一个常数0</span><br>        <span class="hljs-number">3</span>: istore_2<span class="hljs-comment">//将常数0放入局部变量的2号槽位 x=0</span><br>        <span class="hljs-number">4</span>: iload_1<span class="hljs-comment">//将局部变量表1号槽位的数放入操作数栈中</span><br>        <span class="hljs-number">5</span>: bipush        <span class="hljs-number">10</span><span class="hljs-comment">//将数字10放入操作数栈中，此时操作数栈中有2个数</span><br>        <span class="hljs-number">7</span>: if_icmpge     <span class="hljs-number">21</span><span class="hljs-comment">//比较操作数栈中的两个数，如果下面的数大于上面的数，就跳转到21。这里的比较是将两个数做减法。因为涉及运算操作，所以会将两个数弹出操作数栈来进行运算。运算结束后操作数栈为空</span><br>       <span class="hljs-number">10</span>: iload_2<span class="hljs-comment">//将局部变量2号槽位的数放入操作数栈中，放入的值是0</span><br>       <span class="hljs-number">11</span>: iinc          <span class="hljs-number">2</span>, <span class="hljs-number">1</span><span class="hljs-comment">//将局部变量2号槽位的数加1，自增后，槽位中的值为1</span><br>       <span class="hljs-number">14</span>: istore_2<span class="hljs-comment">//将操作数栈中的数放入到局部变量表的2号槽位，2号槽位的值又变为了0</span><br>       <span class="hljs-number">15</span>: iinc          <span class="hljs-number">1</span>, <span class="hljs-number">1</span> <span class="hljs-comment">//1号槽位的值自增1</span><br>       <span class="hljs-number">18</span>: goto          <span class="hljs-number">4</span> <span class="hljs-comment">//跳转到第4条指令</span><br>       <span class="hljs-number">21</span>: getstatic     #<span class="hljs-number">2</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>       <span class="hljs-number">24</span>: iload_2<br>       <span class="hljs-number">25</span>: invokevirtual #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method java/io/PrintStream.println:(I)V</span><br>       <span class="hljs-number">28</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="cinit"><a href="#cinit" class="headerlink" title="cinit()"></a>cinit()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo3</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">static</span> &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125;<br><br><span class="hljs-keyword">static</span> &#123;<br>i = <span class="hljs-number">30</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(i); <span class="hljs-comment">//结果为30</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译器会按<strong>从上至下</strong>的顺序，收集所有 static 静态代码块和静态成员赋值的代码，<strong>合并</strong>为一个特殊的方法 cinit()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">0</span>, args_size=<span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>: bipush        <span class="hljs-number">10</span><br>         <span class="hljs-number">2</span>: putstatic     #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Field i:I</span><br>         <span class="hljs-number">5</span>: bipush        <span class="hljs-number">20</span><br>         <span class="hljs-number">7</span>: putstatic     #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Field i:I</span><br>        <span class="hljs-number">10</span>: bipush        <span class="hljs-number">30</span><br>        <span class="hljs-number">12</span>: putstatic     #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Field i:I</span><br>        <span class="hljs-number">15</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h5 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo4</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;s1&quot;</span>;<br><br>&#123;<br>b = <span class="hljs-number">20</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>&#123;<br>a = <span class="hljs-string">&quot;s2&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Demo4</span><span class="hljs-params">(String a, <span class="hljs-type">int</span> b)</span> &#123;<br><span class="hljs-built_in">this</span>.a = a;<br><span class="hljs-built_in">this</span>.b = b;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Demo4</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo4</span>(<span class="hljs-string">&quot;s3&quot;</span>, <span class="hljs-number">30</span>);<br>System.out.println(d.a);<br>System.out.println(d.b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译器会按<strong>从上至下</strong>的顺序，收集所有 {} 代码块和成员变量赋值的代码，<strong>形成新的构造方法</strong>，但<strong>原始构造方法</strong>内的代码<strong>总是在后</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">3</span><br>        <span class="hljs-number">0</span>: aload_0<br>        <span class="hljs-number">1</span>: invokespecial #<span class="hljs-number">1</span>                  <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>        <span class="hljs-number">4</span>: aload_0<br>        <span class="hljs-number">5</span>: ldc           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// String s1</span><br>        <span class="hljs-number">7</span>: putfield      #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Field a:Ljava/lang/String;</span><br>       <span class="hljs-number">10</span>: aload_0<br>       <span class="hljs-number">11</span>: bipush        <span class="hljs-number">20</span><br>       <span class="hljs-number">13</span>: putfield      #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Field b:I</span><br>       <span class="hljs-number">16</span>: aload_0<br>       <span class="hljs-number">17</span>: bipush        <span class="hljs-number">10</span><br>       <span class="hljs-number">19</span>: putfield      #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Field b:I</span><br>       <span class="hljs-number">22</span>: aload_0<br>       <span class="hljs-number">23</span>: ldc           #<span class="hljs-number">5</span>                  <span class="hljs-comment">// String s2</span><br>       <span class="hljs-number">25</span>: putfield      #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Field a:Ljava/lang/String;</span><br>       <span class="hljs-comment">//原始构造方法在最后执行</span><br>       <span class="hljs-number">28</span>: aload_0<br>       <span class="hljs-number">29</span>: aload_1<br>       <span class="hljs-number">30</span>: putfield      #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Field a:Ljava/lang/String;</span><br>       <span class="hljs-number">33</span>: aload_0<br>       <span class="hljs-number">34</span>: iload_2<br>       <span class="hljs-number">35</span>: putfield      #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Field b:I</span><br>       <span class="hljs-number">38</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo5</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Demo5</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Demo5</span> <span class="hljs-variable">demo5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo5</span>();<br>demo5.test1();<br>demo5.test2();<br>demo5.test3();<br>Demo5.test4();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不同方法在调用时，对应的虚拟机指令有所区别</p><ul><li>私有、构造、被final修饰的方法，在调用时都使用<strong>invokespecial</strong>指令</li><li>普通成员方法在调用时，使用<strong>invokevirtual</strong>指令。因为编译期间无法确定该方法的内容，只有在运行期间才能确定，动态绑定</li><li>静态方法在调用时使用<strong>invokestatic</strong>指令</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">2</span>, args_size=<span class="hljs-number">1</span><br>   <span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// class com/nyima/JVM/day5/Demo5 </span><br>   <span class="hljs-number">3</span>: dup<br>   <span class="hljs-number">4</span>: invokespecial #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method &quot;&lt;init&gt;&quot;:()V</span><br>   <span class="hljs-number">7</span>: astore_1<br>   <span class="hljs-number">8</span>: aload_1<br>   <span class="hljs-number">9</span>: invokespecial #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Method test1:()V</span><br>  <span class="hljs-number">12</span>: aload_1<br>  <span class="hljs-number">13</span>: invokespecial #<span class="hljs-number">5</span>                  <span class="hljs-comment">// Method test2:()V</span><br>  <span class="hljs-number">16</span>: aload_1<br>  <span class="hljs-number">17</span>: invokevirtual #<span class="hljs-number">6</span>                  <span class="hljs-comment">// Method test3:()V</span><br>  <span class="hljs-number">20</span>: invokestatic  #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method test4:()V</span><br>  <span class="hljs-number">23</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><ul><li>new 是创建【对象】，给对象分配堆内存，执行成功会将【<strong>对象引用</strong>】压入操作数栈</li><li>dup 是赋值操作数栈栈顶的内容，本例即为【<strong>对象引用</strong>】，为什么需要两份引用呢，一个是要配合 invokespecial 调用该对象的构造方法 “init”:()V （会消耗掉栈顶一个引用），另一个要 配合 astore_1 赋值给局部变量</li><li>终方法（ﬁnal），私有方法（private），构造方法都是由 invokespecial 指令来调用，属于静态绑定</li><li>普通成员方法是由 invokevirtual 调用，属于<strong>动态绑定</strong>，即支持多态 成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】</li></ul><h4 id="多态原理"><a href="#多态原理" class="headerlink" title="多态原理"></a>多态原理</h4><p>因为普通成员方法需要在运行时才能确定具体的内容，所以虚拟机需要调用<strong>invokevirtual</strong>指令</p><p>在执行invokevirtual指令时，经历了以下几个步骤</p><ul><li>先通过栈帧中对象的引用找到对象</li><li>分析对象头，找到对象实际的Class</li><li>Class结构中有<strong>vtable</strong></li><li>查询vtable找到方法的具体地址</li><li>执行方法的字节码</li></ul><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><h5 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>i = <span class="hljs-number">10</span>;<br>&#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应字节码指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span><br>        <span class="hljs-number">0</span>: iconst_0<br>        <span class="hljs-number">1</span>: istore_1<br>        <span class="hljs-number">2</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-number">4</span>: istore_1<br>        <span class="hljs-number">5</span>: goto          <span class="hljs-number">12</span><br>        <span class="hljs-number">8</span>: astore_2<br>        <span class="hljs-number">9</span>: bipush        <span class="hljs-number">20</span><br>       <span class="hljs-number">11</span>: istore_1<br>       <span class="hljs-number">12</span>: <span class="hljs-keyword">return</span><br>     <span class="hljs-comment">//多出来一个异常表</span><br>     Exception table:<br>        from    to  target type<br>            <span class="hljs-number">2</span>     <span class="hljs-number">5</span>     <span class="hljs-number">8</span>   Class java/lang/Exception<br></code></pre></td></tr></table></figure><ul><li>可以看到多出来一个 Exception table 的结构，[from, to) 是<strong>前闭后开</strong>（也就是检测2~4行）的检测范围，一旦这个范围内的字节码执行出现异常，则通过 type 匹配异常类型，如果一致，进入 target 所指示行号</li><li>8行的字节码指令 astore_2 是将异常对象引用存入局部变量表的2号位置（为e）</li></ul><h5 id="多个single-catch"><a href="#多个single-catch" class="headerlink" title="多个single-catch"></a>多个single-catch</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>i = <span class="hljs-number">10</span>;<br>&#125;<span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>i = <span class="hljs-number">30</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span><br>        <span class="hljs-number">0</span>: iconst_0<br>        <span class="hljs-number">1</span>: istore_1<br>        <span class="hljs-number">2</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-number">4</span>: istore_1<br>        <span class="hljs-number">5</span>: goto          <span class="hljs-number">19</span><br>        <span class="hljs-number">8</span>: astore_2<br>        <span class="hljs-number">9</span>: bipush        <span class="hljs-number">20</span><br>       <span class="hljs-number">11</span>: istore_1<br>       <span class="hljs-number">12</span>: goto          <span class="hljs-number">19</span><br>       <span class="hljs-number">15</span>: astore_2<br>       <span class="hljs-number">16</span>: bipush        <span class="hljs-number">30</span><br>       <span class="hljs-number">18</span>: istore_1<br>       <span class="hljs-number">19</span>: <span class="hljs-keyword">return</span><br>     Exception table:<br>        from    to  target type<br>            <span class="hljs-number">2</span>     <span class="hljs-number">5</span>     <span class="hljs-number">8</span>   Class java/lang/ArithmeticException<br>            <span class="hljs-number">2</span>     <span class="hljs-number">5</span>    <span class="hljs-number">15</span>   Class java/lang/Exception<br></code></pre></td></tr></table></figure><ul><li>因为异常出现时，<strong>只能进入</strong> Exception table 中<strong>一个分支</strong>，所以局部变量表 slot 2 位置<strong>被共用</strong></li></ul><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>i = <span class="hljs-number">10</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>i = <span class="hljs-number">30</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>        <span class="hljs-number">0</span>: iconst_0<br>        <span class="hljs-number">1</span>: istore_1<br>        <span class="hljs-comment">//try块</span><br>        <span class="hljs-number">2</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-number">4</span>: istore_1<br>        <span class="hljs-comment">//try块执行完后，会执行finally    </span><br>        <span class="hljs-number">5</span>: bipush        <span class="hljs-number">30</span><br>        <span class="hljs-number">7</span>: istore_1<br>        <span class="hljs-number">8</span>: goto          <span class="hljs-number">27</span><br>       <span class="hljs-comment">//catch块     </span><br>       <span class="hljs-number">11</span>: astore_2 <span class="hljs-comment">//异常信息放入局部变量表的2号槽位</span><br>       <span class="hljs-number">12</span>: bipush        <span class="hljs-number">20</span><br>       <span class="hljs-number">14</span>: istore_1<br>       <span class="hljs-comment">//catch块执行完后，会执行finally        </span><br>       <span class="hljs-number">15</span>: bipush        <span class="hljs-number">30</span><br>       <span class="hljs-number">17</span>: istore_1<br>       <span class="hljs-number">18</span>: goto          <span class="hljs-number">27</span><br>       <span class="hljs-comment">//出现异常，但未被Exception捕获，会抛出其他异常，这时也需要执行finally块中的代码   </span><br>       <span class="hljs-number">21</span>: astore_3<br>       <span class="hljs-number">22</span>: bipush        <span class="hljs-number">30</span><br>       <span class="hljs-number">24</span>: istore_1<br>       <span class="hljs-number">25</span>: aload_3<br>       <span class="hljs-number">26</span>: athrow  <span class="hljs-comment">//抛出异常</span><br>       <span class="hljs-number">27</span>: <span class="hljs-keyword">return</span><br>     Exception table:<br>        from    to  target type<br>            <span class="hljs-number">2</span>     <span class="hljs-number">5</span>    <span class="hljs-number">11</span>   Class java/lang/Exception<br>            <span class="hljs-number">2</span>     <span class="hljs-number">5</span>    <span class="hljs-number">21</span>   any<br>           <span class="hljs-number">11</span>    <span class="hljs-number">15</span>    <span class="hljs-number">21</span>   any<br></code></pre></td></tr></table></figure><p>可以看到 ﬁnally 中的代码被<strong>复制了 3 份</strong>，分别放入 try 流程，catch 流程以及 catch剩余的异常类型流程</p><p><strong>注意</strong>：虽然从字节码指令看来，每个块中都有finally块，但是finally块中的代码<strong>只会被执行一次</strong></p><h5 id="finally中的return"><a href="#finally中的return" class="headerlink" title="finally中的return"></a>finally中的return</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Demo3.test();<br>        <span class="hljs-comment">//结果为20</span><br>System.out.println(i);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">try</span> &#123;<br>i = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> i;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>i = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">0</span><br>        <span class="hljs-number">0</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-number">2</span>: istore_0<br>        <span class="hljs-number">3</span>: iload_0<br>        <span class="hljs-number">4</span>: istore_1  <span class="hljs-comment">//暂存返回值</span><br>        <span class="hljs-number">5</span>: bipush        <span class="hljs-number">20</span><br>        <span class="hljs-number">7</span>: istore_0<br>        <span class="hljs-number">8</span>: iload_0<br>        <span class="hljs-number">9</span>: ireturn<span class="hljs-comment">//ireturn会返回操作数栈顶的整型值20</span><br>       <span class="hljs-comment">//如果出现异常，还是会执行finally块中的内容，没有抛出异常</span><br>       <span class="hljs-number">10</span>: astore_2<br>       <span class="hljs-number">11</span>: bipush        <span class="hljs-number">20</span><br>       <span class="hljs-number">13</span>: istore_0<br>       <span class="hljs-number">14</span>: iload_0<br>       <span class="hljs-number">15</span>: ireturn<span class="hljs-comment">//这里没有athrow了，也就是如果在finally块中如果有返回操作的话，且try块中出现异常，会吞掉异常！</span><br>     Exception table:<br>        from    to  target type<br>            <span class="hljs-number">0</span>     <span class="hljs-number">5</span>    <span class="hljs-number">10</span>   any<br></code></pre></td></tr></table></figure><ul><li>由于 ﬁnally 中的 <strong>ireturn</strong> 被插入了所有可能的流程，因此返回结果肯定以ﬁnally的为准</li><li>至于字节码中第 2 行，似乎没啥用，且留个伏笔，看下个例子</li><li>跟上例中的 ﬁnally 相比，发现<strong>没有 athrow 了</strong>，这告诉我们：如果在 ﬁnally 中出现了 return，会<strong>吞掉异常</strong></li><li>所以<strong>不要在finally中进行返回操作</strong></li></ul><h5 id="finally不带return"><a href="#finally不带return" class="headerlink" title="finally不带return"></a>finally不带return</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Demo4.test();<br>System.out.println(i);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">0</span><br>        <span class="hljs-number">0</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-number">2</span>: istore_0 <span class="hljs-comment">//赋值给i 10</span><br>        <span class="hljs-number">3</span>: iload_0<span class="hljs-comment">//加载到操作数栈顶</span><br>        <span class="hljs-number">4</span>: istore_1 <span class="hljs-comment">//加载到局部变量表的1号位置</span><br>        <span class="hljs-number">5</span>: bipush        <span class="hljs-number">20</span><br>        <span class="hljs-number">7</span>: istore_0 <span class="hljs-comment">//赋值给i 20</span><br>        <span class="hljs-number">8</span>: iload_1 <span class="hljs-comment">//加载局部变量表1号位置的数10到操作数栈</span><br>        <span class="hljs-number">9</span>: ireturn <span class="hljs-comment">//返回操作数栈顶元素 10</span><br>       <span class="hljs-number">10</span>: astore_2<br>       <span class="hljs-number">11</span>: bipush        <span class="hljs-number">20</span><br>       <span class="hljs-number">13</span>: istore_0<br>       <span class="hljs-number">14</span>: aload_2 <span class="hljs-comment">//加载异常</span><br>       <span class="hljs-number">15</span>: athrow <span class="hljs-comment">//抛出异常</span><br>     Exception table:<br>        from    to  target type<br>            <span class="hljs-number">3</span>     <span class="hljs-number">5</span>    <span class="hljs-number">10</span>   any<br></code></pre></td></tr></table></figure><h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo5</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lock</span>();<br><span class="hljs-keyword">synchronized</span> (lock) &#123;<br>System.out.println(i);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lock</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">5</span>, args_size=<span class="hljs-number">1</span><br>        <span class="hljs-number">0</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-number">2</span>: istore_1<br>        <span class="hljs-number">3</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// class com/nyima/JVM/day06/Lock</span><br>        <span class="hljs-number">6</span>: dup <span class="hljs-comment">//复制一份，放到操作数栈顶，用于构造函数消耗</span><br>        <span class="hljs-number">7</span>: invokespecial #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method com/nyima/JVM/day06/Lock.&quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-number">10</span>: astore_2 <span class="hljs-comment">//剩下的一份放到局部变量表的2号位置</span><br>       <span class="hljs-number">11</span>: aload_2 <span class="hljs-comment">//加载到操作数栈</span><br>       <span class="hljs-number">12</span>: dup <span class="hljs-comment">//复制一份，放到操作数栈，用于加锁时消耗</span><br>       <span class="hljs-number">13</span>: astore_3 <span class="hljs-comment">//将操作数栈顶元素弹出，暂存到局部变量表的三号槽位。这时操作数栈中有一份对象的引用</span><br>       <span class="hljs-number">14</span>: monitorenter <span class="hljs-comment">//加锁</span><br>       <span class="hljs-comment">//锁住后代码块中的操作    </span><br>       <span class="hljs-number">15</span>: getstatic     #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>       <span class="hljs-number">18</span>: iload_1<br>       <span class="hljs-number">19</span>: invokevirtual #<span class="hljs-number">5</span>                  <span class="hljs-comment">// Method java/io/PrintStream.println:(I)V</span><br>       <span class="hljs-comment">//加载局部变量表中三号槽位对象的引用，用于解锁    </span><br>       <span class="hljs-number">22</span>: aload_3    <br>       <span class="hljs-number">23</span>: monitorexit <span class="hljs-comment">//解锁</span><br>       <span class="hljs-number">24</span>: goto          <span class="hljs-number">34</span><br>       <span class="hljs-comment">//异常操作    </span><br>       <span class="hljs-number">27</span>: astore        <span class="hljs-number">4</span><br>       <span class="hljs-number">29</span>: aload_3<br>       <span class="hljs-number">30</span>: monitorexit <span class="hljs-comment">//解锁</span><br>       <span class="hljs-number">31</span>: aload         <span class="hljs-number">4</span><br>       <span class="hljs-number">33</span>: athrow<br>       <span class="hljs-number">34</span>: <span class="hljs-keyword">return</span><br>     <span class="hljs-comment">//可以看出，无论何时出现异常，都会跳转到27行，将异常放入局部变量中，并进行解锁操作，然后加载异常并抛出异常。      </span><br>     Exception table:<br>        from    to  target type<br>           <span class="hljs-number">15</span>    <span class="hljs-number">24</span>    <span class="hljs-number">27</span>   any<br>           <span class="hljs-number">27</span>    <span class="hljs-number">31</span>    <span class="hljs-number">27</span>   any<br></code></pre></td></tr></table></figure><h3 id="3、编译期处理"><a href="#3、编译期处理" class="headerlink" title="3、编译期处理"></a>3、编译期处理</h3><p>所谓的 <strong>语法糖</strong> ，其实就是指 java 编译器把 *.java 源码编译为.class 字节码的过程中，<strong>自动生成</strong>和<strong>转换</strong>的一些代码</p><h4 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Candy1</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>经过编译期编译成class字节码优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Candy1</span> &#123;<br>   <span class="hljs-comment">//这个无参构造器是java编译器帮我们加上的</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Candy1</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">//即调用父类 Object 的无参构造方法，即调用 java/lang/Object.&quot; &lt;init&gt;&quot;:()V</span><br>      <span class="hljs-built_in">super</span>();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h4><p>基本类型和其包装类型的相互转换过程，称为拆装箱</p><p>在JDK 5以后，它们的转换可以在编译期自动完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>转换过程如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//基本类型赋值给包装类型，称为装箱</span><br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">1</span>);<br>      <span class="hljs-comment">//包装类型赋值给基本类型，称谓拆箱</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x.intValue();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型集合取值"><a href="#泛型集合取值" class="headerlink" title="泛型集合取值"></a>泛型集合取值</h4><p>泛型也是在 JDK 5 开始加入的特性，但 java 在<strong>编译泛型代码后</strong>会执行 <strong>泛型擦除</strong> 的动作，即泛型信息在编译为字节码之后就<strong>丢失</strong>了，实际的类型都当做了 <strong>Object</strong> 类型来处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo3</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      list.add(<span class="hljs-number">10</span>);<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>    stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span><br>       <span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// class java/util/ArrayList</span><br>       <span class="hljs-number">3</span>: dup<br>       <span class="hljs-number">4</span>: invokespecial #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-number">7</span>: astore_1<br>       <span class="hljs-number">8</span>: aload_1<br>       <span class="hljs-number">9</span>: bipush        <span class="hljs-number">10</span><br>      <span class="hljs-number">11</span>: invokestatic  #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br>      <span class="hljs-comment">//这里进行了泛型擦除，实际调用的是add(Objcet o)</span><br>      <span class="hljs-number">14</span>: invokeinterface #<span class="hljs-number">5</span>,  <span class="hljs-number">2</span>            <span class="hljs-comment">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span><br>      <span class="hljs-number">19</span>: pop<br>      <span class="hljs-number">20</span>: aload_1<br>      <span class="hljs-number">21</span>: iconst_0<br>      <span class="hljs-comment">//这里也进行了泛型擦除，实际调用的是get(Object o)   </span><br>      <span class="hljs-number">22</span>: invokeinterface #<span class="hljs-number">6</span>,  <span class="hljs-number">2</span>            <span class="hljs-comment">// InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</span><br><span class="hljs-comment">//这里进行了类型转换，将Object转换成了Integer</span><br>      <span class="hljs-number">27</span>: checkcast     #<span class="hljs-number">7</span>                  <span class="hljs-comment">// class java/lang/Integer</span><br>      <span class="hljs-number">30</span>: astore_2<br>      <span class="hljs-number">31</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>所以调用get函数取值时，有一个类型转换的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (Integer) list.get(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>如果要将返回结果赋值给一个int类型的变量，则还有<strong>自动拆箱</strong>的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (Integer) list.get(<span class="hljs-number">0</span>).intValue();<br></code></pre></td></tr></table></figure><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo4</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(String... args)</span> &#123;<br>      <span class="hljs-comment">//将args赋值给arr，可以看出String...实际就是String[] </span><br>      String[] arr = args;<br>      System.out.println(arr.length);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      foo(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可变参数 <strong>String…</strong> args 其实是一个 <strong>String[]</strong> args ，从代码中的赋值语句中就可以看出来。 同 样 java 编译器会在编译期间将上述代码变换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo4</span> &#123;<br>   <span class="hljs-keyword">public</span> Demo4 &#123;&#125;<br><br>    <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(String[] args)</span> &#123;<br>      String[] arr = args;<br>      System.out.println(arr.length);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      foo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>&#125;);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，如果调用的是foo()，即未传递参数时，等价代码为foo(new String[]{})，<strong>创建了一个空数组</strong>，而不是直接传递的null</p><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo5</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//数组赋初值的简化写法也是一种语法糖。</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x : arr) &#123;<br>System.out.println(x);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译器会帮我们转换为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo5</span> &#123;<br>    <span class="hljs-keyword">public</span> Demo5 &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; ++i) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> arr[i];<br>System.out.println(x);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果是集合使用foreach</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo5</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>      <span class="hljs-keyword">for</span> (Integer x : list) &#123;<br>         System.out.println(x);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>集合要使用foreach，需要该集合类实现了<strong>Iterable接口</strong>，因为集合的遍历需要用到<strong>迭代器Iterator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo5</span> &#123;<br>    <span class="hljs-keyword">public</span> Demo5 &#123;&#125;<br>    <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>      <span class="hljs-comment">//获得该集合的迭代器</span><br>      Iterator&lt;Integer&gt; iterator = list.iterator();<br>      <span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>         <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (Integer)iterator.next();<br>         System.out.println(x);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="switch字符串"><a href="#switch字符串" class="headerlink" title="switch字符串"></a>switch字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo6</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>      <span class="hljs-keyword">switch</span> (str) &#123;<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hello&quot;</span> :<br>            System.out.println(<span class="hljs-string">&quot;h&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;world&quot;</span> :<br>            System.out.println(<span class="hljs-string">&quot;w&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在编译器中执行的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo6</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Demo6</span><span class="hljs-params">()</span> &#123;<br>      <br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>      <span class="hljs-comment">//通过字符串的hashCode+value来判断是否匹配</span><br>      <span class="hljs-keyword">switch</span> (str.hashCode()) &#123;<br>         <span class="hljs-comment">//hello的hashCode</span><br>         <span class="hljs-keyword">case</span> <span class="hljs-number">99162322</span> :<br>            <span class="hljs-comment">//再次比较，因为字符串的hashCode有可能相等</span><br>            <span class="hljs-keyword">if</span>(str.equals(<span class="hljs-string">&quot;hello&quot;</span>)) &#123;<br>               x = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-comment">//world的hashCode</span><br>         <span class="hljs-keyword">case</span> <span class="hljs-number">113318802</span> :<br>            <span class="hljs-keyword">if</span>(str.equals(<span class="hljs-string">&quot;world&quot;</span>)) &#123;<br>               x = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br><br>      <span class="hljs-comment">//用第二个switch在进行输出判断</span><br>      <span class="hljs-keyword">switch</span> (x) &#123;<br>         <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            System.out.println(<span class="hljs-string">&quot;h&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            System.out.println(<span class="hljs-string">&quot;w&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>过程说明：</p><ul><li>在编译期间，单个的switch被分为了两个<ul><li>第一个用来匹配字符串，并给x赋值<ul><li>字符串的匹配用到了字符串的hashCode，还用到了equals方法</li><li>使用hashCode是为了提高比较效率，使用equals是防止有hashCode冲突（如BM和C.）</li></ul></li><li>第二个用来根据x的值来决定输出语句</li></ul></li></ul><h4 id="switch枚举"><a href="#switch枚举" class="headerlink" title="switch枚举"></a>switch枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo7</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">SEX</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> SEX.MALE;<br>      <span class="hljs-keyword">switch</span> (sex) &#123;<br>         <span class="hljs-keyword">case</span> MALE:<br>            System.out.println(<span class="hljs-string">&quot;man&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> FEMALE:<br>            System.out.println(<span class="hljs-string">&quot;woman&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">SEX</span> &#123;<br>   MALE, FEMALE;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译器中执行的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo7</span> &#123;<br>   <span class="hljs-comment">/**     </span><br><span class="hljs-comment">    * 定义一个合成类（仅 jvm 使用，对我们不可见）     </span><br><span class="hljs-comment">    * 用来映射枚举的 ordinal 与数组元素的关系     </span><br><span class="hljs-comment">    * 枚举的 ordinal 表示枚举对象的序号，从 0 开始     </span><br><span class="hljs-comment">    * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1     </span><br><span class="hljs-comment">    */</span> <br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">$MAP</span> &#123;<br>      <span class="hljs-comment">//数组大小即为枚举元素个数，里面存放了case用于比较的数字</span><br>      <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>      <span class="hljs-keyword">static</span> &#123;<br>         <span class="hljs-comment">//ordinal即枚举元素对应所在的位置，MALE为0，FEMALE为1</span><br>         map[SEX.MALE.ordinal()] = <span class="hljs-number">1</span>;<br>         map[SEX.FEMALE.ordinal()] = <span class="hljs-number">2</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//将对应位置枚举元素的值赋给x，用于case操作</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> $MAP.map[sex.ordinal()];<br>      <span class="hljs-keyword">switch</span> (x) &#123;<br>         <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            System.out.println(<span class="hljs-string">&quot;man&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            System.out.println(<span class="hljs-string">&quot;woman&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">SEX</span> &#123;<br>   MALE, FEMALE;<br>&#125;<br></code></pre></td></tr></table></figure><p>转换后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sex</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span>&lt;Sex&gt; &#123;   <br>   <span class="hljs-comment">//对应枚举类中的元素</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Sex MALE;    <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Sex FEMALE;    <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Sex[] $VALUES;<br>   <br>    <span class="hljs-keyword">static</span> &#123;       <br>    <span class="hljs-comment">//调用构造函数，传入枚举元素的值及ordinal</span><br>    MALE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sex</span>(<span class="hljs-string">&quot;MALE&quot;</span>, <span class="hljs-number">0</span>);    <br>        FEMALE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sex</span>(<span class="hljs-string">&quot;FEMALE&quot;</span>, <span class="hljs-number">1</span>);   <br>        $VALUES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sex</span>[]&#123;MALE, FEMALE&#125;; <br>   &#125;<br> <br>   <span class="hljs-comment">//调用父类中的方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Sex</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> ordinal)</span> &#123;     <br>        <span class="hljs-built_in">super</span>(name, ordinal);    <br>    &#125;<br>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Sex[] values() &#123;  <br>        <span class="hljs-keyword">return</span> $VALUES.clone();  <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Sex <span class="hljs-title function_">valueOf</span><span class="hljs-params">(String name)</span> &#123; <br>        <span class="hljs-keyword">return</span> Enum.valueOf(Sex.class, name);  <br>    &#125; <br>   <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo8</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;running...&quot;</span>);<br>         &#125;<br>      &#125;;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>转换后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo8</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//用额外创建的类来创建匿名内部类对象</span><br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo8$1</span>();<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//创建了一个额外的类，实现了Runnable接口</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo8$1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>   <span class="hljs-keyword">public</span> Demo8$<span class="hljs-number">1</span>() &#123;&#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;running...&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果匿名内部类中引用了<strong>局部变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo8</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(x);<br>         &#125;<br>      &#125;;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>转化后代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo8</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(x);<br>         &#125;<br>      &#125;;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo8$1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>   <span class="hljs-comment">//多创建了一个变量</span><br>   <span class="hljs-type">int</span> val$x;<br>   <span class="hljs-comment">//变为了有参构造器</span><br>   <span class="hljs-keyword">public</span> Demo8$<span class="hljs-number">1</span>(<span class="hljs-type">int</span> x) &#123;<br>      <span class="hljs-built_in">this</span>.val$x = x;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(val$x);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：<strong>当所在的方法的形参需要被内部类里面使用时，该形参必须为final。</strong>内部类编译成功后，它会产生一个class文件，该class文件与外部类并不是同一class文件，仅仅只保留对外部类的引用。内部类中我对属性的改变并不会影响到外部的形参</p><h3 id="4、类加载阶段"><a href="#4、类加载阶段" class="headerlink" title="4、类加载阶段"></a>4、类加载阶段</h3><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><ul><li><p>将类的字节码载入</p><p>方法区（1.8后为元空间，在本地内存中）中，内部采用 C++ 的 instanceKlass 描述 java 类，它的重要 ﬁeld 有：</p><ul><li>_java_mirror 即 java 的类镜像，例如对 String 来说，它的镜像类就是 String.class，作用是把 klass 暴露给 java 使用</li><li>_super 即父类</li><li>_ﬁelds 即成员变量</li><li>_methods 即方法</li><li>_constants 即常量池</li><li>_class_loader 即类加载器</li><li>_vtable 虚方法表</li><li>_itable 接口方法</li></ul></li><li><p>如果这个类还有父类没有加载，<strong>先加载父类</strong></p></li><li><p>加载和链接可能是<strong>交替运行</strong>的</p></li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611205050.png" alt="img" style="zoom:50%;"><ul><li>instanceKlass保存在<strong>方法区</strong>。JDK 8以后，方法区位于元空间中，而元空间又位于本地内存中</li><li>_java_mirror则是保存在<strong>堆内存</strong>中</li><li>InstanceKlass和*.class(JAVA镜像类)互相保存了对方的地址</li><li>类的对象在对象头中保存了.class的地址。让对象可以通过堆中的*.class找到方法区中的instanceKlass，从而获取类的各种信息</li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>验证字节码是否符合 JVM规范，安全性检查</p><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>为 static 变量分配空间，设置默认值</p><ul><li>static变量在JDK 7以前是存储与instanceKlass末尾(方法区)，但在JDK 7以后就存储在_java_mirror末尾(堆)</li><li>static变量在分配空间和赋值是在两个阶段完成的。<strong>分配空间在准备阶段完成，赋值在初始化阶段完成</strong></li><li>如果 static 变量是 ﬁnal 的<strong>基本类型</strong>，以及<strong>字符串常量</strong>，那么编译阶段值就确定了，<strong>赋值是在准备阶段完成</strong></li><li>如果 static 变量是 ﬁnal 的，但属于<strong>引用类型</strong>，那么赋值也会在<strong>初始化阶段完成</strong></li></ul><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p><strong>HSDB的使用</strong></p><ul><li>先获得要查看的进程ID</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">jps</span><br></code></pre></td></tr></table></figure><ul><li>打开HSDB</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java -cp F:\JAVA\JDK8.<span class="hljs-number">0</span>\lib\sa-jdi<span class="hljs-selector-class">.jar</span> sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span>.HSDB<br></code></pre></td></tr></table></figure><ul><li>运行时可能会报错，是因为<strong>缺少一个.dll的文件</strong>，我们在JDK的安装目录中找到该文件，复制到缺失的文件下即可</li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221703.png" alt="img" style="zoom:50%;"><p><strong>解析的含义</strong></p><p>将常量池中的符号引用解析为直接引用</p><ul><li>未解析时，常量池中的看到的对象仅是符号，未真正的存在于内存中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>      <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Demo1.class.getClassLoader();<br>      <span class="hljs-comment">//只加载不解析</span><br>      Class&lt;?&gt; c = loader.loadClass(<span class="hljs-string">&quot;com.nyima.JVM.day8.C&quot;</span>);<br>      <span class="hljs-comment">//用于阻塞主线程</span><br>      System.in.read();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br>   <span class="hljs-type">D</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>();<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>打开HSDB<ul><li>可以看到此时只加载了类C</li></ul></li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223153.png" alt="img" style="zoom: 50%;"><p>查看类C的常量池，可以看到类D<strong>未被解析</strong>，只是存在于常量池中的符号</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611230658.png" alt="img" style="zoom: 50%;"><ul><li><p>解析以后，会将常量池中的符号引用解析为直接引用</p><ul><li>可以看到，此时已加载并解析了类C和类D</li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223441.png" alt="img" style="zoom: 50%;"></li></ul><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200613104723.png" alt="img" style="zoom: 50%;"><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化阶段就是<strong>执行类构造器cinit()方法的过程</strong>，虚拟机会保证这个类的『构造方法』的线程安全</p><ul><li>cinit()方法是由编译器自动收集类中的所有类变量的<strong>赋值动作和静态语句块</strong>（static{}块）中的语句合并产生的</li></ul><p><strong>注意</strong></p><p>编译器收集的顺序是由语句在源文件中<strong>出现的顺序决定</strong>的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它<strong>之后</strong>的变量，在前面的静态语句块<strong>可以赋值，但是不能访问</strong>，如</p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201118204542.png" alt="img" style="zoom:50%;"><h5 id="发生时机"><a href="#发生时机" class="headerlink" title="发生时机"></a>发生时机</h5><p><strong>类的初始化是懒惰的</strong></p><p>以下情况会初始化</p><ul><li>main 方法所在的类，总会被首先初始化</li><li>首次访问这个类的静态变量或静态方法时</li><li>子类初始化，如果父类还没初始化，会引发</li><li>子类访问父类的静态变量，只会触发父类的初始化</li><li>Class.forName</li><li>new 会导致初始化</li></ul><p>以下情况不会初始化</p><ul><li>访问类的 static ﬁnal 静态常量（基本类型和字符串）</li><li>类对象.class 不会触发初始化</li><li>创建该类对象的数组</li><li>类加载器的.loadClass方法</li><li>Class.forNamed的参数2为false时</li></ul><p><strong>验证类是否被初始化，可以看该类的静态代码块是否被执行</strong></p><h3 id="5、类加载器"><a href="#5、类加载器" class="headerlink" title="5、类加载器"></a>5、类加载器</h3><p>Java虚拟机设计团队有意把类加载阶段中的<strong>“通过一个类的全限定名来获取描述该类的二进制字节流”</strong>这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需的类。实现这个动作的代码被称为<strong>“类加载器”</strong>（ClassLoader）</p><h4 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h4><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远超类加载阶段</p><p>对于任意一个类，都必须由加载它的<strong>类加载器</strong>和这个<strong>类本身</strong>一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通俗一些：<strong>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义</strong>，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等</p><p>以JDK 8为例</p><table><thead><tr><th>名称</th><th>加载的类</th><th>说明</th></tr></thead><tbody><tr><td>Bootstrap ClassLoader（启动类加载器）</td><td>JAVA_HOME&#x2F;jre&#x2F;lib</td><td>无法直接访问，<strong>显示为null</strong></td></tr><tr><td>Extension ClassLoader(拓展类加载器)</td><td>JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext</td><td>上级为Bootstrap</td></tr><tr><td>Application ClassLoader(应用程序类加载器)</td><td>classpath</td><td>上级为Extension</td></tr><tr><td>自定义类加载器</td><td>自定义</td><td>上级为Application</td></tr></tbody></table><h4 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h4><p>可通过在控制台输入指令，使得类被启动类加器加载</p><h4 id="拓展类加载器"><a href="#拓展类加载器" class="headerlink" title="拓展类加载器"></a>拓展类加载器</h4><p>如果classpath和JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext 下有同名类，加载时会使用<strong>拓展类加载器</strong>加载。当应用程序类加载器发现拓展类加载器已将该同名类加载过了，则不会再次加载</p><h4 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h4><p>双亲委派模式，即调用类加载器ClassLoader 的 loadClass 方法时，查找类的规则</p><p>loadClass源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-type">boolean</span> resolve)<br>    <span class="hljs-keyword">throws</span> ClassNotFoundException<br>&#123;<br>    <span class="hljs-keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<br>        <span class="hljs-comment">// 首先查找该类是否已经被该类加载器加载过了</span><br>        Class&lt;?&gt; c = findLoadedClass(name);<br>        <span class="hljs-comment">//如果没有被加载过</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">t0</span> <span class="hljs-operator">=</span> System.nanoTime();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//看是否被它的上级加载器加载过了 Extension的上级是Bootstarp，但它显示为null</span><br>                <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>                    c = parent.loadClass(name, <span class="hljs-literal">false</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//看是否被启动类加载器加载过</span><br>                    c = findBootstrapClassOrNull(name);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                <span class="hljs-comment">// ClassNotFoundException thrown if class not found</span><br>                <span class="hljs-comment">// from the non-null parent class loader</span><br>                <span class="hljs-comment">//捕获异常，但不做任何处理</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//如果还是没有找到，先让拓展类加载器调用findClass方法去找到该类，如果还是没找到，就抛出异常</span><br>                <span class="hljs-comment">//然后让应用类加载器去找classpath下找该类</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> System.nanoTime();<br>                c = findClass(name);<br><br>                <span class="hljs-comment">// 记录时间</span><br>                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);<br>                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);<br>                sun.misc.PerfCounter.getFindClasses().increment();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resolve) &#123;<br>            resolveClass(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h4><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>想加载非 classpath 随意路径中的类文件</li><li>通过接口来使用实现，希望解耦时，常用在框架设计</li><li>这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器</li></ul><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li>继承ClassLoader父类</li><li>要遵从双亲委派机制，重写 ﬁndClass 方法<ul><li>不是重写loadClass方法，否则不会走双亲委派机制</li></ul></li><li>读取类文件的字节码</li><li>调用父类的 deﬁneClass 方法来加载类</li><li>使用者调用该类加载器的 loadClass 方法</li></ul><h4 id="破坏双亲委派模式"><a href="#破坏双亲委派模式" class="headerlink" title="破坏双亲委派模式"></a>破坏双亲委派模式</h4><ul><li>双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即JDK1.2面世以前的“远古”时代<ul><li>建议用户重写findClass()方法，在类加载器中的loadClass()方法中也会调用该方法</li></ul></li><li>双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的<ul><li>如果有基础类型又要调用回用户的代码，此时也会破坏双亲委派模式</li></ul></li><li>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的<ul><li>这里所说的“动态性”指的是一些非常“热”门的名词：代码热替换（Hot Swap）、模块热部署（Hot Deployment）等</li></ul></li></ul><h3 id="6、运行期优化"><a href="#6、运行期优化" class="headerlink" title="6、运行期优化"></a>6、运行期优化</h3><h4 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h4><p>JVM 将执行状态分成了 5 个层次：</p><ul><li>0层：解释执行，用解释器将字节码翻译为机器码</li><li>1层：使用 C1 即时编译器编译执行（不带 proﬁling）</li><li>2层：使用 C1 即时编译器编译执行（带基本的profiling）</li><li>3层：使用 C1 即时编译器编译执行（带完全的profiling）</li><li>4层：使用 C2 即时编译器编译执行</li></ul><p>proﬁling 是指在运行过程中收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的回边次数】等</p><h5 id="即时编译器（JIT）与解释器的区别"><a href="#即时编译器（JIT）与解释器的区别" class="headerlink" title="即时编译器（JIT）与解释器的区别"></a>即时编译器（JIT）与解释器的区别</h5><ul><li>解释器<ul><li>将字节码<strong>解释</strong>为机器码，下次即使遇到相同的字节码，仍会执行重复的解释</li><li>是将字节码解释为针对所有平台都通用的机器码</li></ul></li><li>即时编译器<ul><li>将一些字节码<strong>编译</strong>为机器码，<strong>并存入 Code Cache</strong>，下次遇到相同的代码，直接执行，无需再编译</li><li>根据平台类型，生成平台特定的机器码</li></ul></li></ul><p>对于大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；</p><p>对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。 </p><p>执行效率： Interpreter &lt; C1 &lt; C2</p><h5 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h5><p>逃逸分析（Escape Analysis），Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术</p><p>逃逸分析的 JVM 参数如下：</p><ul><li>开启逃逸分析：-XX:+DoEscapeAnalysis</li><li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li><li>显示分析结果：-XX:+PrintEscapeAnalysis</li></ul><p>逃逸分析技术在 Java SE 6u23+ 开始支持，并默认设置为启用状态</p><p><strong>对象逃逸状态</strong></p><p><strong>全局逃逸（GlobalEscape）</strong></p><ul><li>即一个对象的作用范围逃出了当前方法或者当前线程：<ul><li>对象是一个静态变量</li><li>对象是一个已经发生逃逸的对象</li><li>对象作为当前方法的返回值</li></ul></li></ul><p><strong>参数逃逸（ArgEscape）</strong></p><ul><li>即一个对象被作为方法参数传递或者被参数引用，但在调用过程中不会发生全局逃逸，这个状态是通过被调方法的字节码确定的</li></ul><p><strong>没有逃逸</strong></p><ul><li>即方法中的对象没有发生逃逸</li></ul><p><strong>逃逸分析优化</strong></p><p>针对上面第三点，当一个对象<strong>没有逃逸</strong>时，可以得到以下几个虚拟机的优化</p><p><strong>锁消除</strong></p><p>我们知道线程同步锁是非常牺牲性能的，当编译器确定当前对象只有当前线程使用，那么就会移除该对象的同步锁</p><p>例如，StringBuffer 和 Vector 都是用 synchronized 修饰线程安全的，但大部分情况下，它们都只是在当前线程中用到，这样编译器就会优化移除掉这些锁操作</p><p>锁消除的 JVM 参数如下：</p><ul><li>开启锁消除：-XX:+EliminateLocks</li><li>关闭锁消除：-XX:-EliminateLocks</li></ul><p>锁消除在 JDK8 中都是默认开启的，并且锁消除都要建立在逃逸分析的基础上</p><p><strong>标量替换</strong></p><p>首先要明白标量和聚合量，<strong>基础类型</strong>和<strong>对象的引用</strong>可以理解为<strong>标量</strong>，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象</p><p>对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做<strong>标量替换</strong>。</p><p>这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能</p><p>标量替换的 JVM 参数如下：</p><ul><li>开启标量替换：-XX:+EliminateAllocations</li><li>关闭标量替换：-XX:-EliminateAllocations</li><li>显示标量替换详情：-XX:+PrintEliminateAllocations</li></ul><p>标量替换同样在 JDK8 中都是默认开启的，并且都要建立在逃逸分析的基础上</p><p><strong>栈上分配</strong></p><p>当对象没有发生逃逸时，该<strong>对象</strong>就可以通过标量替换分解成成员标量分配在<strong>栈内存</strong>中，和方法的生命周期一致，随着栈帧出栈时销毁，减少了 GC 压力，提高了应用程序性能</p><h4 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h4><h5 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a><strong>内联函数</strong></h5><p>内联函数就是在程序编译时，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体来直接进行替换</p><h5 id="JVM内联函数"><a href="#JVM内联函数" class="headerlink" title="JVM内联函数"></a><strong>JVM内联函数</strong></h5><p>C++是否为内联函数由自己决定，Java由<strong>编译器决定</strong>。Java不支持直接声明为内联函数的，如果想让他内联，你只能够向编译器提出请求: 关键字<strong>final修饰</strong> 用来指明那个函数是希望被JVM内联的，如</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-comment">// to do something  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>总的来说，一般的函数都不会被当做内联函数，只有声明了final后，编译器才会考虑是不是要把你的函数变成内联函数。</p><p>如果JVM监测到一些<strong>小方法被频繁的执行</strong>，它会把方法的调用替换成方法体本身，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add4</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> x3, <span class="hljs-type">int</span> x4)</span> &#123; <br><span class="hljs-comment">//这里调用了add2方法</span><br>        <span class="hljs-keyword">return</span> add2(x1, x2) + add2(x3, x4);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add2</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> x2)</span> &#123;  <br>        <span class="hljs-keyword">return</span> x1 + x2;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法调用被替换后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add4</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> x3, <span class="hljs-type">int</span> x4)</span> &#123;  <br>    <span class="hljs-comment">//被替换为了方法本身</span><br>       <span class="hljs-keyword">return</span> x1 + x2 + x3 + x4;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="反射优化"><a href="#反射优化" class="headerlink" title="反射优化"></a>反射优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;foo...&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>      <span class="hljs-type">Method</span> <span class="hljs-variable">foo</span> <span class="hljs-operator">=</span> Demo3.class.getMethod(<span class="hljs-string">&quot;foo&quot;</span>);<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;=<span class="hljs-number">16</span>; i++) &#123;<br>         foo.invoke(<span class="hljs-literal">null</span>);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>foo.invoke 前面 0 ~ 15 次调用使用的是 MethodAccessor 的 NativeMethodAccessorImpl 实现</p><p>invoke方法源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CallerSensitive</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object obj, Object... args)</span><br>    <span class="hljs-keyword">throws</span> IllegalAccessException, IllegalArgumentException,<br>       InvocationTargetException<br>&#123;<br>    <span class="hljs-keyword">if</span> (!override) &#123;<br>        <span class="hljs-keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;<br>            Class&lt;?&gt; caller = Reflection.getCallerClass();<br>            checkAccess(caller, clazz, obj, modifiers);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//MethodAccessor是一个接口，有3个实现类，其中有一个是抽象类</span><br>    <span class="hljs-type">MethodAccessor</span> <span class="hljs-variable">ma</span> <span class="hljs-operator">=</span> methodAccessor;             <span class="hljs-comment">// read volatile</span><br>    <span class="hljs-keyword">if</span> (ma == <span class="hljs-literal">null</span>) &#123;<br>        ma = acquireMethodAccessor();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ma.invoke(obj, args);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614133554.png" alt="img"></p><p>会由DelegatingMehodAccessorImpl去调用NativeMethodAccessorImpl</p><p>NativeMethodAccessorImpl源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NativeMethodAccessorImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MethodAccessorImpl</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Method method;<br>    <span class="hljs-keyword">private</span> DelegatingMethodAccessorImpl parent;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numInvocations;<br><br>    NativeMethodAccessorImpl(Method var1) &#123;<br>        <span class="hljs-built_in">this</span>.method = var1;<br>    &#125;<br><br><span class="hljs-comment">//每次进行反射调用，会让numInvocation与ReflectionFactory.inflationThreshold的值（15）进行比较，并使使得numInvocation的值加一</span><br><span class="hljs-comment">//如果numInvocation&gt;ReflectionFactory.inflationThreshold，则会调用本地方法invoke0方法</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object var1, Object[] var2)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException, InvocationTargetException &#123;<br>        <span class="hljs-keyword">if</span> (++<span class="hljs-built_in">this</span>.numInvocations &gt; ReflectionFactory.inflationThreshold() &amp;&amp; !ReflectUtil.isVMAnonymousClass(<span class="hljs-built_in">this</span>.method.getDeclaringClass())) &#123;<br>            <span class="hljs-type">MethodAccessorImpl</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> (MethodAccessorImpl)(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodAccessorGenerator</span>()).generateMethod(<span class="hljs-built_in">this</span>.method.getDeclaringClass(), <span class="hljs-built_in">this</span>.method.getName(), <span class="hljs-built_in">this</span>.method.getParameterTypes(), <span class="hljs-built_in">this</span>.method.getReturnType(), <span class="hljs-built_in">this</span>.method.getExceptionTypes(), <span class="hljs-built_in">this</span>.method.getModifiers());<br>            <span class="hljs-built_in">this</span>.parent.setDelegate(var3);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> invoke0(<span class="hljs-built_in">this</span>.method, var1, var2);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParent</span><span class="hljs-params">(DelegatingMethodAccessorImpl var1)</span> &#123;<br>        <span class="hljs-built_in">this</span>.parent = var1;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title function_">invoke0</span><span class="hljs-params">(Method var0, Object var1, Object[] var2)</span>;<br>&#125;Copy<br><span class="hljs-comment">//ReflectionFactory.inflationThreshold()方法的返回值</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">inflationThreshold</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br></code></pre></td></tr></table></figure><ul><li>一开始if条件不满足，就会调用本地方法invoke0</li><li>随着numInvocation的增大，当它大于ReflectionFactory.inflationThreshold的值16时，就会本地方法访问器替换为一个运行时动态生成的访问器，来提高效率<ul><li>这时会从反射调用变为<strong>正常调用</strong>，即直接调用 Reflect1.foo()</li></ul></li></ul><h2 id="五、内存模型"><a href="#五、内存模型" class="headerlink" title="五、内存模型"></a>五、内存模型</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/2019/11/16/HTML/"/>
    <url>/2019/11/16/HTML/</url>
    
    <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h4><ul><li><p>meta charset&#x3D;”utf-8” &#x2F; &gt;    utf-8表示的是使用万国码</p></li><li><p>html&gt;表示代码是html，主要包含head和body两部分</p></li><li><p>head&gt;头部，这部分包含显示在网页标题栏中的标题和其他在网页中不显示的信息</p></li><li><p>body&gt;主体部分，显示页面中的文字图像连接等等</p></li><li><p>title&gt;网页标题栏中的标题，例如百度主页</p></li><li><p>h1&gt;~h6&gt; 标题，字体从打大到小</p></li><li><p>p&gt;段落 不自动分行（color颜色，align位置）</p></li><li><p>blockquote&gt;段落 自动分行</p></li><li><p>font&gt; 对字体进行修饰（color颜色，face字体，size大小）</p></li><li><p>b&gt;或strong&gt; 字体加粗</p></li><li><p>i&gt;字体倾斜</p></li><li><p>u&gt;字体下划线</p></li><li><p>br &#x2F;&gt;强制换行 nobr&gt;不换行</p></li><li><p>hr&#x2F;&gt;分割线</p></li><li><p>&lt;! –注释内容–&gt;   注释</p></li><li><p>&amp;nbsp空格</p></li><li><p>img src&#x3D;”图片路径”&gt;插入图片（width长度，height宽度，align水平位置， valign上下位置）</p></li><li><p>a href&#x3D;””&gt; 超链接</p></li><li><p>span&gt;改变一行内元素</p></li><li><p>div&gt; 块元素</p></li><li><p>details&gt; 标签用于描述文档或文档某个部分的细节。与 summary&gt; 标签 配合使用可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details。</p></li><li><p>display:none;隐藏内容   display:block;显示内容</p></li></ul><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span> 定义表格<br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span> 定义表格标题<br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span> 定义表格的表头，相当于<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> 定义表格的行<br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 定义表格单元<br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span> 定义表格的页眉<br><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span> 定义表格的页脚<br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>  定义表格的主体<br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span>  对表格的列进行组合<br><span class="hljs-tag">&lt;<span class="hljs-name">rowspan</span>&gt;</span>  列合并<br><span class="hljs-tag">&lt;<span class="hljs-name">colspan</span>&gt;</span> 行合并<br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span>  定义表格列属性（span标签规定列数）<br><span class="hljs-tag">&lt;<span class="hljs-name">cellspacing</span>&gt;</span> 规定单元格之间的间距<br><span class="hljs-tag">&lt;<span class="hljs-name">cellpadding</span>&gt;</span> 规定单元格与文本之间的边距<br><span class="hljs-tag">&lt;<span class="hljs-name">border</span>&gt;</span>  单元格边框（solid实线边框）<br><span class="hljs-tag">&lt;<span class="hljs-name">bgcolor</span>&gt;</span>  单元格背景颜色<br></code></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>无序列表（type规定列表图标类型）<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>有序列表（type规定列表序列类型）<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项  <span class="hljs-tag">&lt;<span class="hljs-name">start</span>&gt;</span>定义从几开始  <span class="hljs-tag">&lt;<span class="hljs-name">reversed</span>&gt;</span>逻辑属性，规定属性什么顺序排序（只在谷歌浏览器显示）<br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>定义列表：多用于对事物的解释  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>定义列表的项  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>描述列表中的项<br></code></pre></td></tr></table></figure><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>创建表单<br>action=&quot;url&quot; 指定接收处理表单数据的服务器url地址<br>method=&quot;get\post&quot;设置表单数据提交方式 get是默认方式    post可大量提交数据<br>name指定表单名称<br>datalist 规定输入框的选项列表，通过option元素进行创建<br>keygen 用于表单的密钥生成器（私钥：储存在客户端；公钥：发送到服务器）<br>表单域<br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span>单行文本输入框<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span>密码输入框<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> /&gt;</span>单选框<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span>复选框<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span>隐藏域<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span>文件域<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span> 专门用于输入E-email地址的文本 框<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span> /&gt;</span>输入url地址的输入域<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span>/&gt;</span> 用于提供输入数值的文本框 min最小值 max最大值 step设置合法的间隔<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span>/&gt;</span>用于提供输入一定范围数值，显示为滑动条 min最小值 max最大值 step指定每次滑动的步幅<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span>/&gt;</span> 用于搜索域<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;color&quot;</span>/&gt;</span>用于选择颜色 <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span>/&gt;</span>用于输入电话号码 <br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">autofocus</span>&gt;</span> 用于指定页面加载后是否自动获取焦点（光标自  动显示）<br><span class="hljs-tag">&lt;<span class="hljs-name">multiple</span>&gt;</span> 指定输入框可以选择多个值<br><span class="hljs-tag">&lt;<span class="hljs-name">placeholder</span>&gt;</span> 为input类型的输入框提供相关提示信息<br><span class="hljs-tag">&lt;<span class="hljs-name">reauired</span>&gt;</span> 规定输入框写的内容不能为空，否则不允许用户提 交表单<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span>下拉列表框   size为1时为下拉列表  <br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>多行文本输入框  cols行数  rows列数<br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>常用文本输入标签<br><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span>分组或字段域<br><span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>分组或字段域的标题<br><span class="hljs-tag">&lt;<span class="hljs-name">maxlength</span>&gt;</span>单行文本允许输入的最大字符数<br><span class="hljs-tag">&lt;<span class="hljs-name">autocomplete</span>&gt;</span> on开启自动填充 off关闭自动填充<br><span class="hljs-tag">&lt;<span class="hljs-name">novalidate</span>&gt;</span>提交表单时取消对表单进行有效的检查<br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> /&gt;</span>普通按钮  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span>提交按钮，将表单信息  提交到   action所指的文件<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image&quot;</span> /&gt;</span>图片提交按钮<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span>重置按钮<br><br><br></code></pre></td></tr></table></figure><h4 id="CSS语法结构"><a href="#CSS语法结构" class="headerlink" title="CSS语法结构"></a>CSS语法结构</h4><h5 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">width</span>&gt;</span>宽<br><span class="hljs-tag">&lt;<span class="hljs-name">height</span>&gt;</span>高<br>并非显示的宽高，显示的宽高加上了border和padding<br>如果保持盒子真是占有宽度不变，加width就需要减padding<br><span class="hljs-tag">&lt;<span class="hljs-name">border</span>&gt;</span>边框（像素 线性：solid实线边框 颜色）<br>按要素拆分：把像素，border-style线性，颜色分开写(要素可以分别设置边框)<br>按方向拆分：例border-top-color上边框颜色<br><span class="hljs-tag">&lt;<span class="hljs-name">padding</span>&gt;</span>边框和文本的距离 也有背景颜色 可以描述四个方向left左，right右，bottom下，top上（上右下左   如果写两个的话下会和上一样，左会和右一样）<br><span class="hljs-tag">&lt;<span class="hljs-name">margin</span>&gt;</span><br>1. 塌陷现象：在标准文档流中margin竖直方向不叠加，以较大的为准,水平方向叠加<br>2. margin的值可以为auto，表示自动，可以用该属性（margin:0 auto;）让盒子居中，但盒子必须有width，并且在标准流中<br>3. 如果父亲没有border，儿子添加的margin就是对整行添加该属性<br>4. IE6双倍margin bug：当出现的连续浮动的元素携带和浮动方向相同的margin时，队首的元素会双倍margin；<br>可以使浮动方向和margin方向相反；<br>也可以使用hack：单独给队首的盒子写margin<br>5. IE6的 3px bug<br>6. 对于IE6小于12px的盒子兼容问题，追加一个_font-size:0;<br></code></pre></td></tr></table></figure><h5 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h5><p>宏观定义：web页面制作必须从上至下</p><ol><li><p>空白折叠现象：插入的图片img换行中间会隔开（两个img紧密相邻时去掉空白）</p></li><li><p>高矮不齐，底端对齐</p></li><li><p>自动换行</p></li><li><p>块级元素和行内元素</p><p>块级元素</p><p>​1&gt;霸占一行，不能与其他任何元素并列</p><p>​2&gt;能接受宽高</p><p>​3&gt;如果不设置宽高，宽高将默认变为父亲的100%</p><p>行内元素</p><p>​1&gt;与其他行内元素并排</p><p>​2&gt;不能设置宽高，默认宽高就是文字宽高</p><p>display:inline;将块元素改变为行内元素，改变为行内元素性质</p><p>display:block;将行内元素改变为块元素，改变为块元素性质</p></li><li><p>HTML中将标签分为了文本级和容器级</p><p>​文本级：p, span, a, b, i, u, em</p><p>​容器级：div, h系列, li, dt, dd</p><p>​除了p是文本级标签但是是块级元素，其余文本级标签都是行内元素</p></li></ol><h5 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h5><p>float:right; 右浮动</p><p>使两个元素并排，且宽高不变</p><ol><li><p>浮动的元素脱离标准文档流：元素浮动将有块元素和行内元素的性质</p></li><li><p>浮动的元素相互贴靠</p></li><li><p>浮动的元素有“字围”效果：浮动的元素能挡住盒子，不能挡住盒子里的内容</p></li><li><p>浮动元素不设置宽，将自动收缩到文字的宽高</p></li></ol><h5 id="浮动的清除"><a href="#浮动的清除" class="headerlink" title="浮动的清除"></a>浮动的清除</h5><ol><li>给祖先元素加高度</li></ol><p>添加高度时，浮动就只在盒子里进行（有高度的盒子，才能关住浮动）</p><p>添加内容撑出高度（相当于给盒子添加高度；脱标的属性不能撑出高）</p><ol start="2"><li>clear:both;清除别人对我的影响；清除全部（左，右）浮动</li></ol><p>使用clear:both;时margin会失效</p><ol start="3"><li>隔墙法</li></ol><p>在两个盒子之间创建一个div添加clear:both;属性并且添加高度</p><p>内墙法：将隔墙法的盒子建在第一个盒子后</p><ol start="4"><li>overflow:hidden;表示溢出隐藏；所有溢出边框的内容都隐藏掉</li></ol><p>一个父亲不能被浮动的儿子撑出高，但是给父亲添加overflow:hidden;就可以被撑出高</p><h5 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h5><p>有些属性，当给自身添加属性时其后代也拥有了该属性（color, text-开头,  line-开头,  font-开头）</p><p>关于文字样式的都能继承，所有关于定位的，盒子的，布局的都不能继承</p><h5 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h5><p>css处理冲突的能力</p><p>属性相同时会被叠层掉相同的属性，权重高的显示（数一个盒子用的各种选择器数量  依次比较id选择器 ，类选择器 ， 标签选择器的数量）遇见逗号，相当于两个盒子</p><p>权重一样谁在后显示谁，通过继承性继承的属性权重为零（如果全是零，谁描述的近听谁的）</p><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><p>如果三种样式同时控制我们的内容：行内优先级最高外部样式，内部样式：谁离着内容近，谁优先级高</p><h4 id="CSS导入方式"><a href="#CSS导入方式" class="headerlink" title="CSS导入方式"></a>CSS导入方式</h4><h5 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h5><p>&lt;标记名 style&#x3D;”属性1:属性值1; 属性2:属性值2; 属性3:属性值3;”&gt; 内容 &lt;&#x2F;标记名&gt;</p><h5 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h5><p>style type&#x3D;”text&#x2F;css”&gt;选择器 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3;}</p><h5 id="链入式"><a href="#链入式" class="headerlink" title="链入式"></a>链入式</h5><p>link href&#x3D;”CSS文件的路径” type&#x3D;”text&#x2F;css” rel&#x3D;”stylesheet” &#x2F;&gt;链入式将所有的样式放在一个或多个以.css为扩展名的外部样式表文件中通过<link>标记将外部样式表文件链接到HTML文档中  href：定义所链接外部样式表文件的URL ；  type：定义所链接文档的类型 ；  rel：定义当前文档与被链接文档之间的关系</p><h5 id="导入式"><a href="#导入式" class="headerlink" title="导入式"></a>导入式</h5><p> style type&#x3D;”text&#x2F;css” &gt;@import url(css文件路径);或 @import “css文件路径”;</p><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><p>{属性1:属性值1; 属性2:属性值2; 属性3:属性值3;}  属性与属性值间用冒号，多个属性之间用英文分号隔开，属性的值由多个单词组成且中间包含空格则必须为这个属性值加上英文状态下的引号。</p><h5 id="标签-元素-选择器"><a href="#标签-元素-选择器" class="headerlink" title="标签(元素)选择器"></a>标签(元素)选择器</h5><p>标记名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }   使用:&lt;标记名&gt;内容&lt;&#x2F;标记名&gt;</p><h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><p>.类名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  使用：</p><p class="类名"> 内容</p>     id选择器和类选择器的值不能以数字开头；用字母开头   a12   12a(不行)<p></p><h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h5><p>#id名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  使用：<div id="id">内容 </div></p><h5 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h5><p>*{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</p><h5 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h5><p>标签名[标签属性&#x3D;’标签属性值’]{属性名：属性值；……}nowrap：空格空行无效，强制文本不能换行，除非遇到换行标记<br></p><h5 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h5><p>父标签&gt;子标签{属性名:属性值;……} 设置后代元素的属性</p><h5 id="后代元素选择器"><a href="#后代元素选择器" class="headerlink" title="后代元素选择器"></a>后代元素选择器</h5><p>父元素 后代元素{属性名:属性值;…… } 例如table b{属性名:属性值;…… }表示表格中所有b标签设置属性</p><h5 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h5><p>标签1+标签2{属性名:属性值;…… } 标签1和标签2具有同一个父元素并且在父元素中相邻</p><h5 id="一般兄弟选择器"><a href="#一般兄弟选择器" class="headerlink" title="一般兄弟选择器"></a>一般兄弟选择器</h5><p>标签1~标签2{属性名:属性值;…… } 标签1和标签2具有同一个父元素并且在父元素中相邻与相邻兄弟选择器区别在于匹配所有标签1后边的兄弟元素</p><h5 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h5><p>一般为标签.类{属性名:属性值;…… }</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
